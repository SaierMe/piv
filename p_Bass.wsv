<火山程序 类型 = "通常" 版本 = 1 />

包 火山.BASS音频支持库 <注释 = "https://github.com/SaierMe/piv" @视窗.外部头文件 = "BASS\\include\\piv_bass.hpp"
        "//@视窗.外部头文件" = "BASS\\include\\bass.h" "//@视窗.外部库" = "BASS\\$(p)\\bass.lib"
        @视窗.附属文件 = "BASS\\$(p)\\bass.dll">

类 BASS音频类 <公开 注释 = "BASS version: 2.4.16.7" 注释 = "http://www.un4seen.com"
        注释 = "BASS 可以在非盈利软件中免费使用,商用则需要购买许可证.">
{
    变量 错误对照表 <静态 类型 = 整数到文本哈希表>
    变量 格式过滤器 <静态 类型 = 文本型>

    方法 加载动态库 <公开 静态 类型 = 逻辑型 注释 = "程序默认在执行本类的函数时加载与程序文件同位置的DLL文件."
            注释 = "如果你想将DLL放在其他位置,请在执行其他方法前调用本方法手动加载." 注释 = "注意: 请尽量在启动方法中加载,且不应将本对象的实例定义在启动类内." 折叠
            @嵌入式方法 = "req_str_param_text_pointer = true">
    参数 动态库路径 <类型 = 文本型 注释 = "bass.dll的路径">
    {
        @ BassDll::data().Load(@<动态库路径>)
    }

    方法 卸载动态库 <公开 静态 注释 = "手动卸载动态库,一般不需要执行本方法." 折叠 @嵌入式方法 = "">
    {
        @ BassDll::data().Free()
    }

    方法 类_清理 <折叠>
    {
        释放 ()
    }

    # 初始化、信息及其他

    方法 置配置选项 <公开 类型 = 逻辑型 注释 = "设置选项的值,该方法可以随时使用,不需要先执行初始化."
            返回值注释 = "返回设置是否成功,如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 选项 <类型 = 整数 注释 = "使用\"BASS_配置选项\"里的常量值">
    参数 值 <类型 = 整数 注释 = "具体可用的设置值可以看\"BASS_配置选项\"里的常量备注">
    {
        @ BassDll::Fn().BASS_SetConfig(static_cast<DWORD>(@<选项>), static_cast<DWORD>(@<值>))
    }

    方法 取配置选项 <公开 类型 = 整数 注释 = "获取配置选项的值" 返回值注释 = "成功返回配置值,失败返回-1,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠
            @嵌入式方法 = "">
    参数 选项 <类型 = 整数 注释 = "使用\"BASS_配置选项\"里的常量值">
    {
        @ static_cast<INT>(BassDll::Fn().BASS_GetConfig(static_cast<DWORD>(@<选项>)))
    }

    方法 置配置选项_指针 <公开 类型 = 逻辑型 注释 = "请改用\"置文本配置项\",本方法将在2025年删除." 注释 = "设置指针类型的配置选项"
            返回值注释 = "返回设置是否成功,如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "" @废弃 = 警告>
    参数 选项 <类型 = 整数 注释 = "使用\"BASS_配置选项_指针\"里的常量值">
    参数 值 <类型 = 变整数 注释 = "具体可用的设置值可以看\"BASS_配置选项_指针\"里的常量备注">
    {
        @ BassDll::Fn().BASS_SetConfigPtr(static_cast<DWORD>(@<选项>), (const void *)@<值>)
    }

    方法 取配置选项_指针 <公开 类型 = 变整数 注释 = "请改用\"取文本配置项\",本方法将在2025年删除." 注释 = "获取指针类型的配置选项"
            返回值注释 = "成功返回配置值的指针,失败返回0,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "" @废弃 = 警告>
    参数 选项 <类型 = 整数 注释 = "使用\"BASS_配置选项_指针\"里的常量值">
    {
        @ reinterpret_cast<INT_P>(BassDll::Fn().BASS_GetConfigPtr(@<选项>))
    }

    方法 置文本配置项 <公开 类型 = 逻辑型 注释 = "设置文本类型的配置选项" 返回值注释 = "返回设置是否成功,如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠
            @嵌入式方法 = "">
    参数 选项 <类型 = 整数 注释 = "使用\"BASS_文本配置项\"里的常量值">
    参数 值 <类型 = 文本型 注释 = "具体可用的设置值可以看\"BASS_文本配置项\"里的常量备注;" 注释 = "注: 空对象表示NULL(空文本指针)" @默认值 = 空对象>
    {
        @ BassDll::Fn().BASS_SetConfigPtr(static_cast<DWORD>(@<选项>) | BASS_UNICODE, @<值>.GetTextMaybeNull())
    }

    方法 取文本配置项 <公开 类型 = 文本型 注释 = "获取文本类型的配置选项" 返回值注释 = "成功返回配置值的指针,失败返回0,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息."
            折叠 @嵌入式方法 = "">
    参数 选项 <类型 = 整数 注释 = "使用\"BASS_文本配置项\"里的常量值">
    {
        @ @an<CVolString>(reinterpret_cast<const WCHAR *>(BassDll::Fn().BASS_GetConfigPtr(@<选项> | BASS_UNICODE)))
    }

    方法 取版本 <公开 类型 = 整数 注释 = "获取已加载的BASS的版本号" 返回值注释 = "  返回BASS版本; 例如, 0x02040103(十六进制)将是版本2.4.1.3"
            返回值注释 = "  其中高16位为主版本号,低16位为修订版本号." 折叠 @嵌入式方法 = "">
    {
        @ static_cast<INT>(BassDll::Fn().BASS_GetVersion())
    }

    方法 取错误代码 <公开 类型 = 整数 注释 = "获取当前线程中最近一次调用BASS函数的错误代码" 返回值注释 = "如果在上一次BASS函数调用期间未发生错误, 则返回0" 折叠
            @嵌入式方法 = "">
    {
        @ BassDll::Fn().BASS_ErrorGetCode()
    }

    方法 取错误描述 <公开 类型 = 文本型 注释 = "获取当前线程中最近一次调用BASS函数的错误描述" 返回值注释 = "返回错误的描述文本,未定义的错误代码则返回空文本." 折叠>
    参数 错误代码 <类型 = 整数 注释 = "-2为自动获取错误代码,否则为提供错误代码,返回对应的错误描述." @默认值 = -2>
    {
        如果 (错误代码 == -2)
        {
            错误代码 = 取错误代码 ()
        }
        如果 (错误对照表.是否为空 () == 真)
        {
            生成错误对照表 ()
        }
        返回 (错误对照表.取值 (错误代码))
    }

    方法 生成错误对照表 <静态 注释 = "内部使用,生成错误对照表" 折叠>
    {
        错误对照表.插入 (0, "一切正常")
        错误对照表.插入 (1, "内存不足")
        错误对照表.插入 (2, "无法打开此文件")
        错误对照表.插入 (3, "没有可用的设备驱动程序")
        错误对照表.插入 (4, "采样缓冲区丢失")
        错误对照表.插入 (5, "无效的句柄")
        错误对照表.插入 (6, "不支持的采样格式")
        错误对照表.插入 (7, "无效的位置")
        错误对照表.插入 (8, "BASS没有成功初始化")
        错误对照表.插入 (9, "设备已经成功启动，无需重复启动")
        错误对照表.插入 (10, "SSL/HTTPS支持不可用")
        错误对照表.插入 (11, "设备需要重新初始化")
        错误对照表.插入 (14, "已经执行了该操作，无需重复执行")
        错误对照表.插入 (17, "文件中不包含音频数据")
        错误对照表.插入 (18, "无法获取可用的通道")
        错误对照表.插入 (19, "指定的类型不合法")
        错误对照表.插入 (20, "指定的参数不合法")
        错误对照表.插入 (21, "不支持3D")
        错误对照表.插入 (22, "不支持EAX")
        错误对照表.插入 (23, "无效的设备编号")
        错误对照表.插入 (24, "当前非播放状态")
        错误对照表.插入 (25, "非法的采样率")
        错误对照表.插入 (27, "此流不是文件流")
        错误对照表.插入 (29, "没有可用的硬件语音")
        错误对照表.插入 (31, "此文件没有采样数据")
        错误对照表.插入 (32, "无法打开网络连接")
        错误对照表.插入 (33, "无法创建此文件")
        错误对照表.插入 (34, "音效不可用")
        错误对照表.插入 (37, "请求的数据或操作不可用")
        错误对照表.插入 (38, "此通道不是解码通道")
        错误对照表.插入 (39, "未安装需求的DirectX版本")
        错误对照表.插入 (40, "连接超时")
        错误对照表.插入 (41, "不受支持的文件格式")
        错误对照表.插入 (42, "不可用的扬声器")
        错误对照表.插入 (43, "无效的版本号")
        错误对照表.插入 (44, "编解码器不可用或不受支持")
        错误对照表.插入 (45, "此通道或文件已经jies")
        错误对照表.插入 (46, "设备繁忙")
        错误对照表.插入 (47, "此文件不能转换成流")
        错误对照表.插入 (48, "不支持的协议")
        错误对照表.插入 (49, "拒绝访问")
        错误对照表.插入 (-1, "其他未知问题")

        错误对照表.插入 (5000, "WASAPI不可用")
        错误对照表.插入 (5001, "缓冲区大小无效")
        错误对照表.插入 (5002, "无法设备类别")
        错误对照表.插入 (5003, "拒绝访问")
    }

    方法 取所有设备信息 <公开 类型 = 整数 注释 = "获取所有可用的输出设备" 返回值注释 = "成功返回设备数量,失败返回0,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠
            @禁止流程检查 = 真>
    参数 设备信息 <类型 = BASS_设备信息数组 注释 = "返回的设备信息" "">
    {
        设备信息.删除所有成员 ()
        变量 索引 <类型 = 整数 值 = 0>
        变量 信息 <类型 = BASS_设备信息>
        判断循环 (取设备信息 (索引, 信息))
        {
            设备信息.加入成员 (信息)
            索引 = 索引 + 1
        }
        返回 (设备信息.取成员数 ())
    }

    方法 取设备信息 <公开 类型 = 逻辑型 注释 = "获取一个输出设备的信息" 返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠
            @嵌入式方法 = "">
    参数 设备号 <类型 = 整数 注释 = "0 为无声音,从1开始为真实的输出设备.">
    参数 设备信息 <类型 = BASS_设备信息 注释 = "返回的设备信息" "">
    {
        @ BassDll::Fn().BASS_GetDeviceInfo(static_cast<DWORD>(@<设备号>), &@<设备信息>)
    }

    方法 初始化 <公开 类型 = 逻辑型 注释 = "初始化输出设备,建议启动后调用. 如果事先没有初始化,别的函数将失效."
            返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 输出设备 <类型 = 整数 注释 = "指定输出设备. -1 = 默认设置,0 = 无声音,1 = 第一个真实输出设备." @默认值 = -1>
    参数 采样率 <类型 = 整数 注释 = "输出的采样率,默认为48000." @默认值 = 48000>
    参数 设备标志 <类型 = 整数 注释 = "使用\"BASS_设备标志\"的组合值" @默认值 = 0>
    参数 窗口句柄 <类型 = 变整数 注释 = "  指定窗口句柄,0 为当前窗口(控制台程序也请用0)." 注释 = "  该参数只有在使用DirectSound输出时是必须的." @默认值 = 0>
    {
        @ BassDll::Fn().BASS_Init(@<输出设备>, static_cast<DWORD>(@<采样率>), static_cast<DWORD>(@<设备标志>), reinterpret_cast<HWND>(@<窗口句柄>), NULL)
    }

    方法 释放 <公开 类型 = 逻辑型 注释 = "  释放输出设备使用的所有资源,包括其所有样本、流和MOD音乐." 注释 = "非必要使用,类析构的时候会自动调用."
            返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    {
        @ BassDll::Fn().BASS_Free()
    }

    方法 置输出设备 <公开 类型 = 逻辑型 注释 = "设置当前线程后续使用的输出设备" 返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠
            @嵌入式方法 = "">
    参数 设备号 <类型 = 整数 注释 = "0 = 无声音,1 = 第一个真实输出设备.">
    {
        @ BassDll::Fn().BASS_SetDevice(static_cast<DWORD>(@<设备号>))
    }

    方法 取输出设备 <公开 类型 = 整数 注释 = "获取当前线程使用的输出设备" 返回值注释 = "成功返回设备号,失败返回-1,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠
            @嵌入式方法 = "">
    {
        @ static_cast<INT>(BassDll::Fn().BASS_GetDevice())
    }

    方法 取输出信息 <公开 类型 = 逻辑型 注释 = "获取当前所用设备的信息" 返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠
            @嵌入式方法 = "">
    参数 信息 <类型 = BASS_信息 注释 = "返回的信息">
    {
        @ BassDll::Fn().BASS_GetInfo(&@<信息>)
    }

    方法 取输出设备类型 <公开 类型 = 整数 注释 = "返回输出设备的类型值" 返回值注释 = "请用\"BASS_设备信息标志\"的常量与返回值比较,以此判断输出设备的类型." 折叠>
    参数 设备信息标志 <类型 = 整数>
    {
        返回 (位与 (设备信息标志, BASS_设备信息标志.BASS_DEVICE_TYPE_MASK))
    }

    方法 取输出设备类型名 <公开 类型 = 文本型 注释 = "返回输出设备的类型名称(中文名称)" 返回值注释 = "成功返回输出设备的类型名称" 折叠>
    参数 设备信息标志 <类型 = 整数>
    {
        变量 类型值 <类型 = 整数>
        类型值 = 位与 (设备信息标志, BASS_设备信息标志.BASS_DEVICE_TYPE_MASK)
        分支判断 (类型值)
        {
            分支 (BASS_设备信息标志.BASS_DEVICE_TYPE_NETWORK)
            {
                返回 ("网络设备")
            }
            分支 (BASS_设备信息标志.BASS_DEVICE_TYPE_SPEAKERS)
            {
                返回 ("扬声器")
            }
            分支 (BASS_设备信息标志.BASS_DEVICE_TYPE_LINE)
            {
                返回 ("线路输出")
            }
            分支 (BASS_设备信息标志.BASS_DEVICE_TYPE_HEADPHONES)
            {
                返回 ("耳机")
            }
            分支 (BASS_设备信息标志.BASS_DEVICE_TYPE_MICROPHONE)
            {
                返回 ("麦克风")
            }
            分支 (BASS_设备信息标志.BASS_DEVICE_TYPE_HEADSET)
            {
                返回 ("耳机(带麦克风)")
            }
            分支 (BASS_设备信息标志.BASS_DEVICE_TYPE_HANDSET)
            {
                返回 ("手机")
            }
            分支 (BASS_设备信息标志.BASS_DEVICE_TYPE_DIGITAL)
            {
                返回 ("数字接口")
            }
            分支 (BASS_设备信息标志.BASS_DEVICE_TYPE_SPDIF)
            {
                返回 ("S/PDIF")
            }
            分支 (BASS_设备信息标志.BASS_DEVICE_TYPE_HDMI)
            {
                返回 ("HDMI接口")
            }
            分支 (BASS_设备信息标志.BASS_DEVICE_TYPE_DISPLAYPORT)
            {
                返回 ("DisplayPort接口")
            }
        }
        返回 ("未知设备")
    }

    方法 开始输出 <公开 类型 = 逻辑型 注释 = "开始或恢复输出." 注释 = "使用\"初始化\"方法时会自动开始,除非你暂停或停止了输出,一般不需要使用此方法."
            返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    {
        @ BassDll::Fn().BASS_Start()
    }

    方法 停止输出 <公开 类型 = 逻辑型 注释 = "停止输出,将停止播放所有音乐、样本和流."
            返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    {
        @ BassDll::Fn().BASS_Stop()
    }

    方法 暂停输出 <公开 类型 = 逻辑型 注释 = "停止输出,将暂停所有音乐、样本和流,使用\"开始输出\"可以恢复."
            返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    {
        @ BassDll::Fn().BASS_Pause()
    }

    方法 是否已启动 <公开 类型 = 整数 注释 = "检查是否已经开始输出" 返回值注释 = "  设备未启动返回0,如果设备已启动且处于活动状态,则返回1."
            返回值注释 = "  如果处于非活动状态(没有播放任何内容,并且禁用BASS_CONFIG_DEV_NONSTOP),则返回2." 折叠 @嵌入式方法 = "">
    {
        @ static_cast<INT>(BassDll::Fn().BASS_IsStarted())
    }

    方法 更新缓冲 <公开 类型 = 逻辑型 注释 = "更新HSTREAM和HMUSIC声道的播放缓冲"
            返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 长度 <类型 = 整数 注释 = "要渲染的数据量,单位为毫秒.">
    {
        @ BassDll::Fn().BASS_Update(static_cast<DWORD>(@<长度>))
    }

    方法 取CPU使用率 <公开 类型 = 单精度小数 注释 = "获取BASS当前的CPU使用率" 返回值注释 = "返回CPU使用率" 折叠 @嵌入式方法 = "">
    {
        @ BassDll::Fn().BASS_GetCPU()
    }

    方法 置音量 <公开 类型 = 逻辑型 注释 = "设置输出设备的主音量(系统音量)" 返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠
            @嵌入式方法 = "">
    参数 音量 <类型 = 单精度小数 注释 = "音量范围:0(静音)到1(最大值).">
    {
        @ BassDll::Fn().BASS_SetVolume(@<音量>)
    }

    方法 取音量 <公开 类型 = 单精度小数 注释 = "获取当前的主音量级别" 返回值注释 = "成功返回音量值,失败返回-1,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息."
            返回值注释 = "音量范围:0(静音)到1(最大值)." 折叠 @嵌入式方法 = "">
    {
        @ BassDll::Fn().BASS_GetVolume()
    }

    方法 取声音对象 <公开 类型 = 变整数 注释 = "获取DirectSound对象" 折叠 @嵌入式方法 = "">
    参数 对象 <类型 = 整数>
    {
        @ reinterpret_cast<INT_P>(BassDll::Fn().BASS_GetDSoundObject(static_cast<DWORD>(@<对象>)))
    }

    # 空间音效

    方法 置空间音效因子 <公开 类型 = 逻辑型 注释 = "设置3D空间音效计算的影响因子,修改设置后需要调用\"应用空间音效\"才会实际生效."
            返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 距离因子 <类型 = 单精度小数 注释 = "  小于等于0=保持当前设置, 1.0=米, 0.9144=码, 0.3048=英尺."
            注释 = "  默认情况下,BASS以米为单位测量距离,如果要使用不同的测量单位,可以更改此参数." @默认值 = 0.0>
    参数 衰减因子 <类型 = 单精度小数 注释 = "  声音随距离衰减的速度,取值0.0-10.0"
            注释 = "  少于或等于0.0=保持当前设置, 0.0=无衰减,1.0=真实世界,2.0=真实世界×2" @默认值 = 0.0>
    参数 多普勒因子 <类型 = 单精度小数 注释 = "  取值0.0-10.0" 注释 = "  少于或等于0.0=保持当前设置, 0.0=无多普勒,1.0=真实世界,2.0=真实世界×2"
            注释 = "  多普勒效应是声音在靠近或远离你时改变音调的方式. 听众和声速设置用于计算此效果,此参数值可用于减小或放大效果." @默认值 = 0.0>
    {
        @ BassDll::Fn().BASS_Set3DFactors(@<距离因子>, @<衰减因子>, @<多普勒因子>)
    }

    方法 取空间音效因子 <公开 类型 = 逻辑型 注释 = "获取3D空间音效计算的影响因子" 返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息."
            折叠 @嵌入式方法 = "">
    参数 距离因子 <类型 = 单精度小数类 注释 = "  小于等于0=保持当前设置, 1.0=米, 0.9144=码, 0.3048=英尺"
            注释 = "  默认情况下,BASS以米为单位测量距离,如果要使用不同的测量单位,可以更改此参数.">
    参数 衰减因子 <类型 = 单精度小数类 注释 = "  声音随距离衰减的速度,取值0.0-10.0"
            注释 = "  少于或等于0.0=保持当前设置, 0.0=无衰减,1.0=真实世界,2.0=真实世界×2">
    参数 多普勒因子 <类型 = 单精度小数类 注释 = "  取值0.0-10.0" 注释 = "  少于或等于0.0=保持当前设置, 0.0=无多普勒,1.0=真实世界,2.0=真实世界×2"
            注释 = "  多普勒效应是声音在靠近或远离你时改变音调的方式. 听众和声速设置用于计算此效果,此参数值可用于减小或放大效果.">
    {
        @ BassDll::Fn().BASS_Get3DFactors(&@<距离因子.值>, &@<衰减因子.值>, &@<多普勒因子.值>)
    }

    方法 置空间音效位置 <公开 类型 = 逻辑型 注释 = "设置听众(即播放器)的位置、速度和方向,修改设置后需要调用\"应用空间音效\"才会实际生效."
            返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 位置 <类型 = BASS_3D矢量 注释 = "听众的位置,空对象表示保持当前设置." @默认值 = 空对象>
    参数 速度 <类型 = BASS_3D矢量 注释 = "听众的速度单位为长度/秒(长度单位用\"置空间音效因子\"设置)."
            注释 = "空对象表示保持当前设置. 只用于计算多普勒效应,不会影响听众的位置." @默认值 = 空对象>
    参数 正面 <类型 = BASS_3D矢量 注释 = "听众正面所指的方向." 注释 = "空对象表示保持当前设置,这是自动规范化的." @默认值 = 空对象>
    参数 顶部 <类型 = BASS_3D矢量 注释 = "听众顶部指向的方向." 注释 = "空对象表示保持当前设置,这是自动规范化的,并在必要时调整为与前向量成直角." @默认值 = 空对象>
    {
        @ BassDll::Fn().BASS_Set3DPosition(@<位置>.GetPtrMayNull(), @<速度>.GetPtrMayNull(), @<正面>.GetPtrMayNull(), @<顶部>.GetPtrMayNull())
    }

    方法 取空间音效位置 <公开 类型 = 逻辑型 注释 = "获取听众(即播放器)的位置、速度和方向"
            返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 位置 <类型 = BASS_3D矢量 注释 = "听众的位置,空指针表示不接收." @默认值 = 空对象>
    参数 速度 <类型 = BASS_3D矢量 注释 = "听众的速度单位为长度/秒(长度单位用\"置空间音效因子\"设置);" 注释 = "空指针表示不接收." @默认值 = 空对象>
    参数 正面 <类型 = BASS_3D矢量 注释 = "听众正面所指的方向,空指针表示不接收." @默认值 = 空对象>
    参数 顶部 <类型 = BASS_3D矢量 注释 = "听众顶部指向的方向,空指针表示不接收." @默认值 = 空对象>
    {
        @ BassDll::Fn().BASS_Get3DPosition(@<位置>.GetPtrMayNull(), @<速度>.GetPtrMayNull(), @<正面>.GetPtrMayNull(), @<顶部>.GetPtrMayNull())
    }

    方法 应用空间音效 <公开 注释 = "应用对3D空间音效系统所做的更改" 折叠 @嵌入式方法 = "">
    {
        @ BassDll::Fn().BASS_Apply3D()
    }

    # 插件

    方法 加载插件目录 <公开 类型 = 整数 注释 = "加载插件文件夹里的所有BASS插件. 如果你要使用\"浏览音乐文件\",务必用本命令加载插件." 返回值注释 = "返回成功加载的插件数量" 折叠>
    参数 插件目录 <类型 = 文本型 注释 = "BASS插件的文件夹路径,请以\\结尾.">
    参数 插件信息 <类型 = BASS_插件信息数组 注释 = "返回所有加载成功的插件信息,以便之后获取可用的格式名.">
    {
        变量 局_插件目录 <类型 = 文本型>
        变量 查找插件 <类型 = 文件查找类>
        变量 找到文件 <类型 = 文本型>
        变量 插件文件 <类型 = 文本数组类>
        局_插件目录 = 插件目录
        检查加入路径字符 (局_插件目录)
        插件信息.删除所有成员 ()
        找到文件 = 查找插件.寻找文件 (局_插件目录 + "bass*.dll")
        判断循环 (找到文件 != "")
        {
            插件文件.加入成员 (找到文件)
            // 处理事件 ()
            找到文件 = 查找插件.寻找文件 ("")
        }
        查找插件.停止寻找文件 ()
        插件文件.枚举循环 ()
        {
            变量 插件句柄 <类型 = 整数>
            插件句柄 = 加载插件 (局_插件目录 + 插件文件.取枚举值 ())
            如果 (插件句柄 != 0)
            {
                变量 信息 <类型 = BASS_插件信息>
                信息 = 取插件信息 (插件句柄)
                插件信息.加入成员 (信息)
            }
        }
        更新格式过滤器 (插件信息)  // 将插件增加的格式支持添加了"浏览音乐文件"的过滤器中
        返回 (插件信息.取成员数 ())
    }

    方法 加载插件 <公开 类型 = 整数 注释 = "加载一个BASS插件" 返回值注释 = "成功返回插件句柄,失败返回0,如果返回0,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息."
            折叠 @嵌入式方法 = "">
    参数 文件名 <类型 = 文本型 注释 = "插件的文件名">
    {
        @ static_cast<INT>(BassDll::Fn().BASS_PluginLoad(@<文件名>.GetText(), BASS_UNICODE))
    }

    方法 释放插件 <公开 类型 = 逻辑型 注释 = "卸载一个BASS插件" 返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠
            @嵌入式方法 = "">
    参数 插件句柄 <类型 = 整数 注释 = "\"加载插件\"返回插件的句柄">
    {
        @ BassDll::Fn().BASS_PluginFree(static_cast<HPLUGIN>(@<插件句柄>))
    }

    方法 插件开关 <公开 类型 = 逻辑型 注释 = "启用或禁用插件." 注释 = "此方法允许在之后创建的流或样本中禁用部分插件,而不影响正在使用此插件的流媒体."
            返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 插件句柄 <类型 = 整数 注释 = "\"加载插件\"返回插件的句柄">
    参数 是否启用 <类型 = 逻辑型 注释 = "真为启用插件,假为禁用插件.">
    {
        @ BassDll::Fn().BASS_PluginEnable(static_cast<HPLUGIN>(@<插件句柄>), @<是否启用>)
    }

    方法 取插件信息 <公开 类型 = BASS_插件信息 注释 = "获取插件的信息" 返回值注释 = "成功返回插件信息,失败返回空信息,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息."
            折叠 @嵌入式方法 = "">
    参数 插件句柄 <类型 = 整数 注释 = "\"加载插件\"返回插件的句柄">
    {
        @ BassDll::Fn().BASS_PluginGetInfo(static_cast<HPLUGIN>(@<插件句柄>))
    }

    # 音频样本

    方法 打开样本文件 <公开 类型 = 整数 注释 = "从WAV、AIFF、MP3、MP2、MP1、OGG或插件支持的文件格式加载一段样本."
            返回值注释 = "成功返回样本句柄,失败返回0,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 文件名 <类型 = 文本型 注释 = "文件的完整路径和名称">
    参数 数据偏移 <类型 = 长整数 注释 = "从文件偏移一段位置开始获取数据流" @默认值 = 0>
    参数 数据长度 <类型 = 整数 注释 = "0 = 使用整个文件数据. 如果长度超过文件末尾,它将自动降低到文件的结尾." @默认值 = 0>
    参数 最大回放 <类型 = 整数 注释 = "  最大同时播放数量,取值1(最小)-65535(最大)."
            注释 = "  如果没有可供播放的剩余通道(播放已达到最大次数),在下一参数使用BASS_SAMPLE_OVER_标志之一可以越过限制.">
    参数 标志 <类型 = 整数 注释 = "  使用\"BASS_音频标志\"类中的以下部分常量的组合值:"
            注释 = "  BASS_SAMPLE_FLOAT、BASS_SAMPLE_LOOP、BASS_SAMPLE_MONO、BASS_SAMPLE_3D、BASS_SAMPLE_MUTEMAX、"
            注释 = "  BASS_SAMPLE_OVER_VOL、BASS_SAMPLE_OVER_POS、BASS_SAMPLE_OVER_DIST">
    {
        @ static_cast<INT>(BassDll::Fn().BASS_SampleLoad(FALSE, reinterpret_cast<const void*>(@<文件名>.GetText()), static_cast<QWORD>(@<数据偏移>),
        @     static_cast<DWORD>(@<数据长度>), static_cast<DWORD>(@<最大回放>), static_cast<DWORD>(@<标志>) | BASS_UNICODE))
    }

    方法 打开内存样本数据 <公开 类型 = 整数 注释 = "从WAV、AIFF、MP3、MP2、MP1、OGG或插件支持的文件格式加载一段样本."
            返回值注释 = "成功返回样本句柄,失败返回0,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @禁止流程检查 = 真>
    参数 样本数据 <类型 = 字节集类 注释 = "注意局部字节集可能会被释放">
    参数 最大回放 <类型 = 整数 注释 = "  最大同时播放数量,取值1(最小)-65535(最大)."
            注释 = "  如果没有可供播放的剩余通道(播放已达到最大次数),使用BASS_SAMPLE_OVER_标志之一可以越过限制.">
    参数 标志 <类型 = 整数 注释 = "  使用\"BASS_音频标志\"类中的以下部分常量的组合值:"
            注释 = "  BASS_SAMPLE_FLOAT、BASS_SAMPLE_LOOP、BASS_SAMPLE_MONO、BASS_SAMPLE_3D、BASS_SAMPLE_MUTEMAX、"
            注释 = "  BASS_SAMPLE_OVER_VOL、BASS_SAMPLE_OVER_POS、BASS_SAMPLE_OVER_DIST">
    {
        @ return static_cast<INT>(BassDll::Fn().BASS_SampleLoad(TRUE, reinterpret_cast<const void*>(@<样本数据>.GetPtr()), NULL,
        @     static_cast<DWORD>(@<样本数据>.GetSize()), static_cast<DWORD>(@<最大回放>), static_cast<DWORD>(@<标志>)));
    }

    方法 创建样本 <公开 类型 = 整数 注释 = "创建一段样本" 返回值注释 = "成功返回样本句柄,失败返回0,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠
            @嵌入式方法 = "">
    参数 样本长度 <类型 = 整数 注释 = "样本的数据长度(单位为字节)">
    参数 采样率 <类型 = 整数 注释 = "默认采样率" @默认值 = 48000>
    参数 声道数 <类型 = 整数 注释 = "声道数量. 1 = 单声道, 2 = 立体声, 以此类推..." @默认值 = 2>
    参数 最大回放 <类型 = 整数 注释 = "  最大同时播放数量,取值1(最小)-65535(最大)."
            注释 = "  如果没有可供播放的剩余通道(播放已达到最大次数),在下一参数使用BASS_SAMPLE_OVER_标志之一可以越过限制." @默认值 = 1>
    参数 标志 <类型 = 整数 注释 = "  使用\"BASS_音频标志\"类中的以下部分常量的组合值:"
            注释 = "  BASS_SAMPLE_8BITS、BASS_SAMPLE_FLOAT、BASS_SAMPLE_LOOP、BASS_SAMPLE_3D、BASS_SAMPLE_MUTEMAX、"
            注释 = "  BASS_SAMPLE_OVER_VOL、BASS_SAMPLE_OVER_POS、BASS_SAMPLE_OVER_DIST" @默认值 = 0>
    {
        @ static_cast<INT>(BassDll::Fn().BASS_SampleCreate(static_cast<DWORD>(@<样本长度>), static_cast<DWORD>(@<采样率>),
        @     static_cast<DWORD>(@<声道数>), static_cast<DWORD>(@<最大回放>), static_cast<DWORD>(@<标志>)))
    }

    方法 释放样本 <公开 类型 = 逻辑型 注释 = "释放一段样本的资源" 返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠
            @嵌入式方法 = "">
    参数 样本句柄 <类型 = 整数 注释 = "样本的句柄">
    {
        @ BassDll::Fn().BASS_SampleFree(static_cast<HSAMPLE>(@<样本句柄>))
    }

    方法 置样本数据 <公开 类型 = 逻辑型 注释 = "设置一段样本的数据" 返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠
            @嵌入式方法 = "">
    参数 样本句柄 <类型 = 整数 注释 = "样本的句柄">
    参数 缓冲区 <类型 = 变整数 注释 = "欲设置的数据缓冲区指针">
    {
        @ BassDll::Fn().BASS_SampleSetData(static_cast<HSAMPLE>(@<样本句柄>), reinterpret_cast<const void *>(@<缓冲区>))
    }

    方法 取样本数据 <公开 类型 = 逻辑型 注释 = "获取一段样本的数据副本" 返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠
            @嵌入式方法 = "">
    参数 样本句柄 <类型 = 整数 注释 = "样本的句柄">
    参数 缓冲区 <类型 = 变整数 注释 = "返回获取的样本数据">
    {
        @ BassDll::Fn().BASS_SampleGetData(static_cast<HSAMPLE>(@<样本句柄>), reinterpret_cast<void*>(@<缓冲区>))
    }

    方法 置样本数据2 <公开 类型 = 逻辑型 注释 = "设置一段样本的数据. 跟\"置样本数据\"一样,只是把缓冲区封装成字节集类."
            返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 样本句柄 <类型 = 整数 注释 = "样本的句柄">
    参数 缓冲区 <类型 = 字节集类 注释 = "欲设置的数据缓冲区">
    {
        @ BassDll::Fn().BASS_SampleSetData(static_cast<HSAMPLE>(@<样本句柄>), reinterpret_cast<const void *>(@<缓冲区>.GetPtr()))
    }

    方法 取样本数据2 <公开 类型 = 逻辑型 注释 = "获取一段样本的数据副本. 跟\"取样本数据\"一样,只是把缓冲区封装成字节集类."
            返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @禁止流程检查 = 真>
    参数 样本句柄 <类型 = 整数 注释 = "样本的句柄">
    参数 缓冲区 <类型 = 字节集类 注释 = "返回获取的样本数据">
    {
        变量 信息 <类型 = BASS_样本>
        取样本信息 (样本句柄, 信息)
        缓冲区.分配字节集 (信息.数据长度)
        @ return BassDll::Fn().BASS_SampleGetData(static_cast<HSAMPLE>(@<样本句柄>), @<缓冲区>.GetPtr());
    }

    方法 取样本信息 <公开 类型 = 逻辑型 注释 = "获取一段样本的默认属性和其他信息" 返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息."
            折叠 @嵌入式方法 = "">
    参数 样本句柄 <类型 = 整数 注释 = "样本的句柄">
    参数 信息 <类型 = BASS_样本 注释 = "返回获取的样本信息">
    {
        @ BassDll::Fn().BASS_SampleGetInfo(static_cast<HSAMPLE>(@<样本句柄>), &@<信息>)
    }

    方法 置样本信息 <公开 类型 = 逻辑型 注释 = "设置一段样本的默认属性" 返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠
            @嵌入式方法 = "">
    参数 样本句柄 <类型 = 整数 注释 = "样本的句柄">
    参数 信息 <类型 = BASS_样本 注释 = "设置样本的信息">
    {
        @ BassDll::Fn().BASS_SampleSetInfo(static_cast<HSAMPLE>(@<样本句柄>), &@<信息>)
    }

    方法 取样本通道 <公开 类型 = 整数 注释 = "为样本创建并初始化一条播放通道" 返回值注释 = "成功返回通道句柄,失败返回0,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息."
            折叠 @嵌入式方法 = "">
    参数 样本句柄 <类型 = 整数 注释 = "样本的句柄">
    参数 标志 <类型 = 整数 注释 = "  1 = BASS_SAMCHAN_NEW, 不覆盖现有的通道,获取一个新的播放通道."
            注释 = "  2 = BASS_SAMCHAN_STREAM, 创建新的流句柄而不是通道句柄." 注释 = "  以及\"BASS_音频标志\"类中的以下部分常量的组合值:"
            注释 = "  BASS_SAMPLE_LOOP、BASS_SAMPLE_OVER_VOL、BASS_SAMPLE_OVER_POS、"
            注释 = "  BASS_SAMPLE_OVER_DIST、BASS_STREAM_AUTOFREE、BASS_STREAM_DECODE、BASS_SPEAKER_xxx" @默认值 = 0>
    {
        @ static_cast<INT>(BassDll::Fn().BASS_SampleGetChannel(static_cast<HSAMPLE>(@<样本句柄>), static_cast<DWORD>(@<标志>)))
    }

    方法 取样本所有通道 <公开 类型 = 整数 注释 = "获取样本的所有现有通道" 返回值注释 = "成功返回现有通道数量,失败返回-1,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息."
            折叠 @禁止流程检查 = 真>
    参数 样本句柄 <类型 = 整数 注释 = "样本的句柄" "">
    参数 通道数组 <类型 = 整数数组类 注释 = "存放该样本所有通道句柄的数组;" 注释 = "该数组的大小应与创建样本时的最大设置相同,可以使用\"取样本信息\"获取该属性." @默认值 = 空对象>
    {
        @ BASS_SAMPLE info;
        @ BassDll::Fn().BASS_SampleGetInfo(static_cast<HSAMPLE>(@<样本句柄>), &info);
        @ @<通道数组>.data().InitCount(static_cast<INT_P>(info.max), TRUE);
        @ INT count = static_cast<INT>(BassDll::Fn().BASS_SampleGetChannels(static_cast<HSAMPLE>(@<样本句柄>), reinterpret_cast<HCHANNEL*>(@<通道数组>.data().GetData())));
        @ @<通道数组>.data().InitCount(count, FALSE);
        @ return count;
    }

    方法 停止样本 <公开 类型 = 逻辑型 注释 = "停止并释放样本的所有通道(HCHANNEL)"
            返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 样本句柄 <类型 = 整数 注释 = "样本的句柄">
    {
        @ BassDll::Fn().BASS_SampleStop(static_cast<HSAMPLE>(@<样本句柄>))
    }

    # 音频流

    方法 创建流数据 <公开 类型 = 整数 注释 = "创建一段用户样本流." 注释 = "参数\"处理函数\"为 0 时,需要在接收事件\"BASS音频类_写入流回调\"中自行写入流数据."
            返回值注释 = "成功返回流句柄,失败返回0,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @禁止流程检查 = 真>
    参数 采样率 <类型 = 整数 @默认值 = 48000>
    参数 声道 <类型 = 整数 注释 = "1 = 单声道, 2 = 立体声, 4 = 四声道, 6 = 5.1, 8 = 7.1" @默认值 = 2>
    参数 标志 <类型 = 整数 注释 = "使用\"BASS_音频标志\"类中的以下部分常量的组合值:"
            注释 = " BASS_SAMPLE_8BITS、BASS_SAMPLE_FLOAT、BASS_SAMPLE_3D、BASS_STREAM_AUTOFREE、BASS_STREAM_DECODE、BASS_SPEAKER_xxx"
            @默认值 = 0>
    参数 处理函数 <类型 = 整数 注释 = "0(除1-3外的任意值)=需要在接收事件\"BASS音频类_写入流回调\"中写入流数据;"
            注释 = "1=STREAMPROC_DEVICE 为设备的最终输出混合创建一个\"虚拟\"流;" 注释 = "2=STREAMPROC_DUMMY 创建一个\"虚拟\"流;"
            注释 = "3=STREAMPROC_PUSH 创建一个\"推送\"流,不是从STREAMPROC函数中提取BASS数据,而是通过\"推送流数据(BASS_StreamPutData)\"将数据推送到BASS."
            @默认值 = 0>
    {
        @ STREAMPROC* proc = nullptr;
        @ switch (@<处理函数>) {
        @     case 1:
        @         proc = STREAMPROC_DEVICE;
        @         break;
        @     case 2:
        @         proc = STREAMPROC_DUMMY;
        @         break;
        @     case 3:
        @         proc = STREAMPROC_PUSH;
        @         break;
        @     default:
        @         proc = &@sn<current_class_def>::BassStream;
        @ }
        @ return static_cast<INT>(BassDll::Fn().BASS_StreamCreate(static_cast<DWORD>(@<采样率>), static_cast<DWORD>(@<声道>), static_cast<DWORD>(@<标志>),
        @     proc, (@<处理函数> >= 1 && @<处理函数> <= 3) ? NULL : reinterpret_cast<void*>(this)));
    }

    方法 写入流回调 <公开 定义事件 类型 = 整数 注释 = "执行\"创建流数据\"后,需要在本事件处理流数据的写入函数."
            返回值注释 = "返回函数写入的字节数,如果已到达流的末尾,请返回写入字节数与 BASS_StreamProc_END (0x80000000) 的位或值." 折叠>
    参数 流句柄 <类型 = 整数 注释 = "需要写入流数据的句柄">
    参数 缓冲区 <类型 = 变整数 注释 = "指向写入样本数据的缓冲区指针. 数据应如下：8位样本为无符号,16位样本为有符号,32位浮点样本范围为-1到+1">
    参数 长度 <类型 = 整数 注释 = "写入的最大字节数">

    方法 打开流文件 <公开 类型 = 整数 注释 = "从MP3, MP2, MP1, OGG, WAV, AIFF或插件支持的文件格式创建一段样本流."
            返回值注释 = "成功返回流句柄,失败返回0,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 文件路径 <类型 = 文本型 注释 = "文件的完整路径和名称">
    参数 数据偏移 <类型 = 长整数 注释 = "从文件偏移一段位置开始获取数据流" @默认值 = 0>
    参数 数据长度 <类型 = 长整数 注释 = "0 = 使用整个文件数据" @默认值 = 0>
    参数 标志 <类型 = 整数 注释 = "使用\"BASS_音频标志\"类中的以下部分常量的组合值:"
            注释 = " BASS_SAMPLE_FLOAT、BASS_SAMPLE_MONO、BASS_SAMPLE_3D、BASS_SAMPLE_LOOP、BASS_STREAM_PRESCAN"
            注释 = " BASS_STREAM_AUTOFREE、BASS_STREAM_DECODE、BASS_SPEAKER_xxx、BASS_ASYNCFILE" @默认值 = 0>
    {
        @ static_cast<INT>(BassDll::Fn().BASS_StreamCreateFile(FALSE, reinterpret_cast<const void*>(@<文件路径>.GetText()),
        @     static_cast<DWORD>(@<数据偏移>), static_cast<DWORD>(@<数据长度>), static_cast<DWORD>(@<标志>) | BASS_UNICODE))
    }

    方法 打开内存流数据 <公开 类型 = 整数 注释 = "从支持格式的字节集中创建一段样本流"
            返回值注释 = "成功返回流句柄,失败返回0,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @禁止流程检查 = 真>
    参数 音频数据 <类型 = 字节集类 注释 = "注意局部字节集可能会被释放">
    参数 标志 <类型 = 整数 注释 = "  使用\"BASS_音频标志\"类中的以下部分常量的组合值:"
            注释 = "  BASS_SAMPLE_FLOAT、BASS_SAMPLE_MONO、BASS_SAMPLE_3D、BASS_SAMPLE_LOOP、BASS_STREAM_PRESCAN"
            注释 = "  BASS_STREAM_AUTOFREE、BASS_STREAM_DECODE、BASS_SPEAKER_xxx、BASS_ASYNCFILE" @默认值 = 0>
    {
        @ return static_cast<INT>(BassDll::Fn().BASS_StreamCreateFile(TRUE, reinterpret_cast<const void*>(@<音频数据>.GetPtr()), NULL,
        @     static_cast<DWORD>(@<音频数据>.GetSize()), static_cast<DWORD>(@<标志>)));
    }

    方法 打开网络文件 <公开 类型 = 整数 注释 = "从Internet上的MP3, MP2, MP1, OGG, WAV, AIFF或插件支持的文件创建样本流."
            注释 = "执行本方法后,可以在接收事件\"BASS音频类_下载回调\"中处理下载的网络数据."
            返回值注释 = "成功返回流句柄,失败返回0,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 Url地址 <类型 = 文本型 注释 = "流文件的网络地址必须以\"http://\"、\"https://\"或\"ftp://\"开头.">
    参数 数据偏移 <类型 = 整数 注释 = "从网络文件偏移一段位置开始获取数据流" @默认值 = 0>
    参数 标志 <类型 = 整数 注释 = "  使用\"BASS_音频标志\"类中的以下部分常量的组合值:"
            注释 = "  BASS_SAMPLE_FLOAT、BASS_SAMPLE_MONO、BASS_SAMPLE_3D、BASS_SAMPLE_LOOP、BASS_STREAM_RESTRATE"
            注释 = "  BASS_STREAM_BLOCK、BASS_STREAM_STATUS、BASS_STREAM_AUTOFREE、BASS_STREAM_DECODE、BASS_SPEAKER_xxx"
            @默认值 = 0>
    {
        @ static_cast<INT>(BassDll::Fn().BASS_StreamCreateURL(@<Url地址>.GetText(), static_cast<DWORD>(@<数据偏移>),
        @     static_cast<DWORD>(@<标志>) | BASS_UNICODE, &@sn<current_class_def>::BassDownload, &@sn<this>))
    }

    方法 下载回调 <公开 定义事件 类型 = 整数 注释 = "执行\"打开网络文件\"后,本事件会陆续收到网络流文件的下载片段" 返回值注释 = "该返回值无意义" 折叠>
    参数 缓冲区 <类型 = 变整数 注释 = "缓冲区包含了下载的部分数据, 0 = 下载结束">
    参数 数据长度 <类型 = 整数 注释 = "缓冲区的字节长度,0 = HTTP or ICY 标签">

    方法 文件处理_关闭 <公开 定义事件 类型 = 整数 注释 = "执行\"创建用户流文件\"后,在本事件处理文件的关闭" 返回值注释 = "返回值无意义">

    方法 文件处理_长度 <公开 定义事件 类型 = 整数 注释 = "执行\"创建用户流文件\"后,在本事件中获取文件长度" 返回值注释 = "返回文件长度">

    方法 文件处理_读入 <公开 定义事件 类型 = 整数 注释 = "执行\"创建用户流文件\"后,在本事件中读入文件数据"
            返回值注释 = "返回读取的字节数,-1 = 文件结束,0 = 文件结束(仅限文件系统设置为有缓冲区)" 折叠>
    参数 缓冲区 <类型 = 变整数 注释 = "指向获取数据的缓冲区指针">
    参数 长度 <类型 = 整数 注释 = "导入的最大字节数">

    方法 文件处理_搜索 <公开 定义事件 类型 = 整数 注释 = "执行\"创建用户流文件\"后,在本事件中移动文件的读取位置(仅限无缓冲的文件系统)." 注释 = "通常不需要使用,除非你循环播放文件."
            返回值注释 = "返回 1 表示成功,返回 0 表示失败" 折叠>
    参数 偏移 <类型 = 长整数 注释 = "移动文件的读取位置">

    方法 创建用户流文件 <公开 类型 = 整数 注释 = "从MP3、MP2、MP1、OGG、WAV、AIFF或插件支持的文件创建样本流,"
            注释 = "本方法需要通过\"文件处理_关闭\"、\"文件处理_长度\"、\"文件处理_读入\"、\"文件处理_搜索\"这四个接收事件处理文件."
            注释 = "本方法比较复杂,需要用户自行处理流数据,建议使用\"打开流文件\"." 返回值注释 = "成功返回流句柄,失败返回0,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠
            @禁止流程检查 = 真>
    参数 文件系统 <类型 = 整数 注释 = "  0 = 无缓冲(STREAMFILE_NOBUFFER),\"打开流文件(BASS_StreamCreateFile)\"使用的文件系统."
            注释 = "  1 = 有缓冲(STREAMFILE_BUFFER),\"打开网络文件(BASS_StreamCreateURL)\"使用的文件系统."
            注释 = "  2 = 有缓冲(STREAMFILE_BUFFERPUSH),跟1差不多,但数据通过\"推送流文件数据(BASS_StreamPutFileData)\"来获取."
            注释 = "  不同文件系统的回调方法有差别." "">
    参数 标志 <类型 = 整数 注释 = "  使用\"BASS_音频标志\"类中的以下部分常量的组合值:"
            注释 = "  BASS_SAMPLE_FLOAT、BASS_SAMPLE_MONO、BASS_SAMPLE_3D、BASS_SAMPLE_LOOP、BASS_STREAM_PRESCAN、BASS_STREAM_RESTRATE、"
            注释 = "  BASS_STREAM_BLOCK、BASS_STREAM_AUTOFREE、、BASS_STREAM_DECODE、BASS_SPEAKER_xxx、BASS_ASYNCFILE"
            @默认值 = 0>
    {
        @ BASS_FILEPROCS fileprocs;
        @ fileprocs.close = &@sn<current_class_def>::BassFileClose;
        @ fileprocs.length = &@sn<current_class_def>::BassFileLen;
        @ fileprocs.read = &@sn<current_class_def>::BassFileRead;
        @ fileprocs.seek = &@sn<current_class_def>::BassFileSeek;
        @ return static_cast<INT>(BassDll::Fn().BASS_StreamCreateFileUser(static_cast<DWORD>(@<文件系统>), static_cast<DWORD>(@<标志>), &fileprocs, this));
    }

    方法 释放流 <公开 类型 = 逻辑型 注释 = "释放一个样本流的资源,包括它拥有的任何sync/DSP/FX."
            返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 流句柄 <类型 = 整数 注释 = "样本流的句柄">
    {
        @ BassDll::Fn().BASS_StreamFree(static_cast<HSTREAM>(@<流句柄>))
    }

    方法 取流文件位置 <公开 类型 = 长整数 注释 = "获取流文件的位置和状态"
            返回值注释 = "成功,返回文件位置或状态,失败返回-1,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 流句柄 <类型 = 整数 注释 = "样本流的句柄">
    参数 模式 <类型 = 整数 注释 = "要获取的文件位置和状态,使用\"BASS_文件位置模式\"的常量值." @默认值 = 0>
    {
        @ static_cast<INT64>(BassDll::Fn().BASS_StreamGetFilePosition(static_cast<HSTREAM>(@<流句柄>), static_cast<DWORD>(@<模式>)))
    }

    方法 推送流数据 <公开 类型 = 整数 注释 = "将一段样本数据添加到\"推送\"流"
            返回值注释 = "成功返回读入数据的字节数量,失败返回-1,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 流句柄 <类型 = 整数 注释 = "样本流的句柄">
    参数 缓冲区 <类型 = 变整数 注释 = "指向样本数据的指针, 0 = 在队列缓冲区中分配空间,分配的空间尺寸不少于\"数据长度\"参数指定的值.">
    参数 数据长度 <类型 = 整数 注释 = "  以字节为单位的数据长度."
            注释 = "  可以选择使用 BASS_StreamProc_END (0x80000000)标志来表示流的结尾,为 0 时可用于仅检查队列的数据量.">
    {
        @ static_cast<INT>(BassDll::Fn().BASS_StreamPutData(static_cast<HSTREAM>(@<流句柄>), reinterpret_cast<void*>(@<缓冲区>), static_cast<DWORD>(@<数据长度>)))
    }

    方法 推送流文件数据 <公开 类型 = 整数 注释 = "将数据添加到\"推送缓冲\"的用户文件流的缓冲区"
            返回值注释 = "成功返回读入数据的字节数量,失败返回-1,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 流句柄 <类型 = 整数 注释 = "样本流的句柄">
    参数 文件数据 <类型 = 变整数 注释 = "文件数据的指针">
    参数 数据大小 <类型 = 整数 注释 = "数据的字节大小,或者用BASS_FILEDATA_END">
    {
        @ static_cast<INT>(BassDll::Fn().BASS_StreamPutFileData(static_cast<HSTREAM>(@<流句柄>), reinterpret_cast<void*>(@<文件数据>), static_cast<DWORD>(@<数据大小>)))
    }

    方法 推送流文件数据2 <公开 类型 = 整数 注释 = "将数据添加到\"推送缓冲\"的用户文件流的缓冲区. 跟\"推送流文件数据\"一样,只是把数据封装成字节集类,原始版本适合在回调事件中使用."
            返回值注释 = "成功返回读入数据的字节数量,失败返回-1,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @禁止流程检查 = 真>
    参数 流句柄 <类型 = 整数 注释 = "样本流的句柄">
    参数 文件数据 <类型 = 字节集类 注释 = "文件数据">
    {
        @ return static_cast<INT>(BassDll::Fn().BASS_StreamPutFileData(static_cast<HSTREAM>(@<流句柄>), reinterpret_cast<void*>(@<文件数据>.GetPtr()), static_cast<DWORD>(@<文件数据>.GetSize())));
    }

    # MOD/MO3 音乐

    方法 打开MOD音乐文件 <公开 类型 = 整数 注释 = "打开MOD格式的音乐文件"
            返回值注释 = "如果成功, 返回音乐句柄, 否则返回0;可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 文件路径 <类型 = 文本型 注释 = "文件的完整路径">
    参数 数据偏移 <类型 = 长整数 注释 = "文件偏移一段距离才开始读入MOD音乐格式" @默认值 = 0>
    参数 数据长度 <类型 = 长整数 注释 = "0 = 使用整个文件" @默认值 = 0>
    参数 标志 <类型 = 整数 注释 = "使用\"BASS_音频标志\"类中以下部分常量的组合值:"
            注释 = " BASS_SAMPLE_8BITS、BASS_SAMPLE_FLOAT、BASS_SAMPLE_MONO、BASS_SAMPLE_3D、BASS_SAMPLE_LOOP"
            注释 = " BASS_MUSIC_xxx、BASS_SPEAKER_xxx" @默认值 = 0>
    参数 采样率 <类型 = 整数 注释 = "0 = 初始化时指定的采样率, 1 = 设备当前输出的采样率" @默认值 = 0>
    {
        @ static_cast<INT>(BassDll::Fn().BASS_MusicLoad(FALSE, @<文件路径>.GetText(), static_cast<QWORD>(@<数据偏移>), static_cast<QWORD>(@<数据长度>),
        @     static_cast<DWORD>(@<标志>) | BASS_UNICODE, static_cast<DWORD>(@<采样率>)))
    }

    方法 打开内存MOD音乐 <公开 类型 = 整数 注释 = "打开MOD格式的音乐数据"
            返回值注释 = "如果成功, 返回音乐句柄, 否则返回0;可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @禁止流程检查 = 真>
    参数 内存数据 <类型 = 字节集类 注释 = "MOD 格式音乐的数据">
    参数 标志 <类型 = 整数 注释 = "  使用\"BASS_音频标志\"类中以下部分常量的组合值:"
            注释 = "  BASS_SAMPLE_8BITS、BASS_SAMPLE_FLOAT、BASS_SAMPLE_MONO、BASS_SAMPLE_3D、BASS_SAMPLE_LOOP、BASS_MUSIC_xxx、BASS_SPEAKER_xxx"
            @默认值 = 0>
    参数 采样率 <类型 = 整数 注释 = "0 = 初始化时指定的采样率, 1 = 设备当前输出的采样率" @默认值 = 0>
    {
        @ return static_cast<INT>(BassDll::Fn().BASS_MusicLoad(TRUE, @<内存数据>.GetPtr(), NULL, static_cast<DWORD>(@<内存数据>.GetSize()),
        @     static_cast<DWORD>(@<标志>), static_cast<DWORD>(@<采样率>)));
    }

    方法 释放MOD音乐 <公开 类型 = 逻辑型 注释 = "释放MOD音乐的资源,包括它拥有的任何sync/DSP/FX."
            返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 音乐句柄 <类型 = 整数 注释 = "MOD音乐的句柄">
    {
        @ BassDll::Fn().BASS_MusicFree(static_cast<HMUSIC>(@<音乐句柄>))
    }

    # 录制设备

    方法 取所有录制设备信息 <公开 类型 = 整数 注释 = "获取所有可用的录制设备" 返回值注释 = "成功返回设备数量,失败返回0." 折叠>
    参数 设备信息 <类型 = BASS_设备信息数组 注释 = "返回的设备信息" "">
    {
        设备信息.删除所有成员 ()
        变量 索引 <类型 = 整数 值 = 0>
        变量 信息 <类型 = BASS_设备信息>
        判断循环 (取录制设备信息 (索引, 信息))
        {
            设备信息.加入成员 (信息)
            索引 = 索引 + 1
        }
        返回 (设备信息.取成员数 ())
    }

    方法 取录制设备信息 <公开 类型 = 逻辑型 注释 = "获取一个录制设备的信息" 返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠
            @嵌入式方法 = "">
    参数 设备号 <类型 = 整数 注释 = "0 = 第一个设备,以此类推.">
    参数 设备信息 <类型 = BASS_设备信息 注释 = "返回的设备信息">
    {
        @ BassDll::Fn().BASS_RecordGetDeviceInfo(static_cast<DWORD>(@<设备号>), &@<设备信息>)
    }

    方法 初始化录制设备 <公开 类型 = 逻辑型 注释 = "初始化录制设备,使用录制功能之前必须初始化."
            返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 设备号 <类型 = 整数 注释 = "-1 = 默认设备, 0 = 第一个设备.">
    {
        @ BassDll::Fn().BASS_RecordInit(@<设备号>)
    }

    方法 释放录制设备 <公开 类型 = 逻辑型 注释 = "释放录制设备使用的所有资源" 返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠
            @嵌入式方法 = "">
    {
        @ BassDll::Fn().BASS_RecordFree()
    }

    方法 置录制设备 <公开 类型 = 逻辑型 注释 = "设置当前线程后续使用的录制设备" 返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠
            @嵌入式方法 = "">
    参数 设备号 <类型 = 整数 注释 = "要使用的设备, 0=第一个设备.">
    {
        @ BassDll::Fn().BASS_RecordSetDevice(static_cast<DWORD>(@<设备号>))
    }

    方法 取录制设备 <公开 类型 = 整数 注释 = "获取当前线程使用录制设备" 返回值注释 = "成功返回设备号,失败返回-1,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠
            @嵌入式方法 = "">
    {
        @ BassDll::Fn().BASS_RecordGetDevice()
    }

    方法 取录制信息 <公开 类型 = 逻辑型 注释 = "获取当前所用录制设备的信息" 返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠
            @嵌入式方法 = "">
    参数 信息 <类型 = BASS_录制信息 注释 = "返回的信息">
    {
        @ BassDll::Fn().BASS_RecordGetInfo(&@<信息>)
    }

    方法 取录制设备名 <公开 类型 = 文本型 注释 = "获取录制设备输入源的文本描述" 返回值注释 = "成功返回设备名,失败返回空文本,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息."
            折叠 @禁止流程检查 = 真>
    参数 输入设备 <类型 = 整数 注释 = "0 = 第一个设备, -1 = 主设备.">
    {
        @ const char* ret = BassDll::Fn().BASS_RecordGetInputName(@<输入设备>);
        @ if (ret)
        @     return @an<CVolString>(ret);
        @ return @an<CVolString>(L"");
    }

    方法 置录制设备设置 <公开 类型 = 逻辑型 注释 = "调整录制输入源的设置" 返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠
            @嵌入式方法 = "">
    参数 输入设备 <类型 = 整数 注释 = "0 = 第一个设备, -1 = 主设备 .">
    参数 是否启用 <类型 = 逻辑型 注释 = "是否启用输入">
    参数 音量 <类型 = 单精度小数 注释 = "0-1 (静音到最大音量), 少于 0 为保持当前设置.">
    {
        @ BassDll::Fn().BASS_RecordSetInput(@<输入设备>, @<是否启用> ? BASS_INPUT_ON : BASS_INPUT_OFF, @<音量>)
    }

    方法 取录制设备设置 <公开 类型 = 整数 注释 = "获取录制输入源的当前设置" 返回值注释 = "成功返回设置值,可以与\"BASS_录制标志\"位与确定具体的设置."
            返回值注释 = "失败返回-1,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 输入设备 <类型 = 整数 注释 = "0 = 第一个设备, -1 = 主设备.">
    参数 音量 <类型 = 单精度小数类 注释 = "返回音量" @默认值 = 空对象>
    {
        @ static_cast<INT>(BassDll::Fn().BASS_RecordGetInput(@<输入设备>, piv::GetBaseDataPtr<float*>(@<音量>)))
    }

    方法 取录制设备类型 <公开 类型 = 整数 注释 = "返回录制输入设备的类型值" 返回值注释 = "请用\"BASS_录制标志\"的常量与返回值比较,以此判断输入设备的类型." 折叠>
    参数 输入设备 <类型 = 整数 注释 = "0 = 第一个设备, -1 = 主设备.">
    {
        返回 (位与 (取录制设备设置 (输入设备), BASS_录制标志.BASS_INPUT_TYPE_MASK))
    }

    方法 取录制设备类型名称 <公开 类型 = 文本型 注释 = "返回录制设备的类型名称(中文名称)" 返回值注释 = "成功返回录制设备的类型名称">
    参数 输入设备 <类型 = 整数>
    {
        分支判断 (取录制设备类型 (输入设备))
        {
            分支 (BASS_录制标志.BASS_INPUT_TYPE_UNDEF)
            {
                返回 ("未知设备")
            }
            分支 (BASS_录制标志.BASS_INPUT_TYPE_DIGITAL)
            {
                返回 ("数字音源")
            }
            分支 (BASS_录制标志.BASS_INPUT_TYPE_LINE)
            {
                返回 ("线路或模拟输入")
            }
            分支 (BASS_录制标志.BASS_INPUT_TYPE_MIC)
            {
                返回 ("麦克风")
            }
            分支 (BASS_录制标志.BASS_INPUT_TYPE_SYNTH)
            {
                返回 ("内置MIDI合成器")
            }
            分支 (BASS_录制标志.BASS_INPUT_TYPE_CD)
            {
                返回 ("模拟音频CD")
            }
            分支 (BASS_录制标志.BASS_INPUT_TYPE_PHONE)
            {
                返回 ("电话")
            }
            分支 (BASS_录制标志.BASS_INPUT_TYPE_SPEAKER)
            {
                返回 ("PC扬声器")
            }
            分支 (BASS_录制标志.BASS_INPUT_TYPE_WAVE)
            {
                返回 ("WAV_PCM输出")
            }
            分支 (BASS_录制标志.BASS_INPUT_TYPE_AUX)
            {
                返回 ("AUX辅助")
            }
            分支 (BASS_录制标志.BASS_INPUT_TYPE_ANALOG)
            {
                返回 ("模拟信号源")
            }
        }
        返回 ("非输入设备")
    }

    方法 开始录制 <公开 类型 = 整数 注释 = "开始录制,执行本方法后,可以在接收事件\"BASS音频类_录制回调\"中处理录制数据."
            返回值注释 = "成功返回录制句柄,失败返回0,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 采样率 <类型 = 整数 注释 = "0 为当前设备的采样率">
    参数 声道 <类型 = 整数 注释 = "0 为设备当前的声道数量,1=单声道, 2=立体声, 4=四声道, 6=5.1, 8=7.1">
    参数 标志 <类型 = 整数 注释 = "  使用\"BASS_音频标志\"类中以下部分常量的组合值:"
            注释 = "  BASS_SAMPLE_8BITS、BASS_SAMPLE_FLOAT、BASS_RECORD_PAUSE" @默认值 = 0>
    {
        @ static_cast<INT>(BassDll::Fn().BASS_RecordStart(static_cast<DWORD>(@<采样率>), static_cast<DWORD>(@<声道>),
        @     static_cast<DWORD>(@<标志>), @sn<current_class_def>::BassRecord, &@sn<this>))
    }

    方法 录制回调 <公开 定义事件 类型 = 整数 注释 = "执行\"开始录制\"后,本事件会持续收到一段段的录制数据,你可以在此保存或同步回放录制数据."
            返回值注释 = "返回0为继续录制,返回其他任意数字为停止录制." 折叠>
    参数 录制句柄 <类型 = 整数 注释 = "录制的句柄">
    参数 缓冲区 <类型 = 变整数 注释 = "缓冲区中包含了一小段录制数据">
    参数 数据长度 <类型 = 整数 注释 = "缓冲区的数据长度">

    # 通道

    方法 位置_字节到秒 <公开 类型 = 小数 注释 = "将一个字节位置转换为时间位置(秒)"
            返回值注释 = "成功返回转换后的长度,失败返回负数,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HCHANNEL、HMUSIC、HSTREAM、HRECORD或HSAMPLE句柄.">
    参数 位置 <类型 = 长整数 注释 = "欲转换的位置">
    {
        @ BassDll::Fn().BASS_ChannelBytes2Seconds(static_cast<DWORD>(@<通道句柄>), static_cast<QWORD>(@<位置>))
    }

    方法 位置_秒到字节 <公开 类型 = 长整数 注释 = "将一个时间位置(秒)转换为字节位置"
            返回值注释 = "成功返回转换后的长度,失败返回-1,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HCHANNEL、HMUSIC、HSTREAM、HRECORD或HSAMPLE句柄.">
    参数 位置 <类型 = 小数 注释 = "欲转换的位置">
    {
        @ static_cast<INT64>(BassDll::Fn().BASS_ChannelSeconds2Bytes(static_cast<DWORD>(@<通道句柄>), @<位置>))
    }

    方法 取通道设备 <公开 类型 = 整数 注释 = "获取通道使用的设备" 返回值注释 = "成功返回设备号,失败返回-1,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠
            @嵌入式方法 = "">
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HCHANNEL、HMUSIC、HSTREAM、HRECORD或HSAMPLE句柄.">
    {
        @ static_cast<INT>(BassDll::Fn().BASS_ChannelGetDevice(static_cast<DWORD>(@<通道句柄>)))
    }

    方法 置通道设备 <公开 类型 = 逻辑型 注释 = "更改流、MOD 音乐或样本使用的设备" 返回值注释 = "返回是否成功. 可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠
            @嵌入式方法 = "">
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HCHANNEL、HMUSIC、HSTREAM、HRECORD或HSAMPLE句柄.">
    参数 设备号 <类型 = 整数 注释 = "欲使用的设备. 0=无声音, 1=第一个输出设备, BASS_NODEVICE(0x20000)=无设备.">
    {
        @ BassDll::Fn().BASS_ChannelSetDevice(static_cast<DWORD>(@<通道句柄>), static_cast<DWORD>(@<设备号>))
    }

    方法 取通道状态 <公开 类型 = 整数 注释 = "检查样本、流或MOD音乐是否处于活动(播放)或暂停状态,还可以检查是否正在录制." 注释 = "返回值请参考\"BASS_通道状态\"中的常量."
            返回值注释 = "0=停止状态, 1=正在播放, 2=停滞(等待采样数据), 3=暂停, 4=设备已暂停." 折叠 @嵌入式方法 = "">
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HCHANNEL、HMUSIC、HSTREAM或HRECORD句柄.">
    {
        @ static_cast<INT>(BassDll::Fn().BASS_ChannelIsActive(static_cast<DWORD>(@<通道句柄>)))
    }

    方法 取通道信息 <公开 类型 = 逻辑型 注释 = "获取通道中的信息" 返回值注释 = "返回是否成功. 可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HCHANNEL、HMUSIC、HSTREAM或HRECORD句柄.">
    参数 通道信息 <类型 = BASS_通道信息 注释 = "返回的通道信息">
    {
        @ BassDll::Fn().BASS_ChannelGetInfo(static_cast<DWORD>(@<通道句柄>), &@<通道信息>)
    }

    方法 取通道标签 <公开 类型 = 变整数 注释 = "获取通道的标签或标题. 返回的数据有可能是二进制、ASCII、UTF8、数组或结构体,需要你根据标签类型从指针获取数据."
            注释 = "如果获取简单的标签,推荐使用\"取通道标签_xxx\"等一系列二次封装的版本(仅支持了部分标签类型)."
            注释 = "如果获取较复杂的标签,推荐使用\"音频标签类\",后果是多附带一个dll文件."
            返回值注释 = "成功返回标签指针,失败返回0,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HMUSIC或HSTREAM句柄.">
    参数 标签 <类型 = 整数 注释 = "欲取的标签或标题,为\"BASS_标签类型\"的常量之一.">
    {
        @ reinterpret_cast<INT_P>(BassDll::Fn().BASS_ChannelGetTags(static_cast<DWORD>(@<通道句柄>), static_cast<DWORD>(@<标签>)))
    }

    方法 取通道标签_文本数组 <公开 类型 = 整数 注释 = "获取通道的部分返回数据为文本数组的的标签,为\"取通道标签\"的二次封装."
            返回值注释 = "成功返回数组成员数,失败返回-1,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @禁止流程检查 = 真>
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HMUSIC或HSTREAM句柄.">
    参数 标签 <类型 = 整数 注释 = "  欲取的标签或标题,必须为下列\"BASS_标签类型\"的常量之一:"
            注释 = "  BASS_TAG_OGG、BASS_TAG_HTTP、BASS_TAG_ICY、BASS_TAG_APE、BASS_TAG_MP4、BASS_TAG_WMA、"
            注释 = "  BASS_TAG_MF、BASS_TAG_RIFF_INFO">
    参数 标签数组 <类型 = 文本数组类 注释 = "返回的标签/标题数组">
    {
        @ @<标签数组>.data().RemoveAll();
        @ const char *comments = BassDll::Fn().BASS_ChannelGetTags(static_cast<DWORD>(@<通道句柄>), static_cast<DWORD>(@<标签>));
        @ if (!comments) return -1;
        @ @an<CVolMem> buf;
        @ while (*comments) {
        @     if (@<标签> == BASS_TAG_HTTP || @<标签> == BASS_TAG_ICY || @<标签> == BASS_TAG_RIFF_INFO) {
        @         @<标签数组>.data().Add(GetWideText(comments, buf, NULL));
        @     else
        @         @<标签数组>.data().Add(Utf8ToWStr(comments, -1, buf, NULL, NULL, TRUE)); // UTF8
        @     comments += strlen(comments) + 1;
        @ }
        @ return static_cast<INT>(@<标签数组>.data().GetCount());
    }

    方法 取通道标签_文本 <公开 类型 = 文本型 注释 = "获取通道的部分返回数据为文本型的的标签,为\"取通道标签\"的二次封装."
            返回值注释 = "成功返回标签文本,失败返回空文本,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @禁止流程检查 = 真>
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HMUSIC或HSTREAM句柄.">
    参数 标签 <类型 = 整数 注释 = "  欲取的标签或标题,必须为下列\"BASS_标签类型\"的常量之一:"
            注释 = "  BASS_TAG_META、BASS_TAG_VENDOR、BASS_TAG_LYRICS3、BASS_TAG_AM_NAME、BASS_TAG_AM_MIME、"
            注释 = "  BASS_TAG_RIFF_DISP、BASS_TAG_MUSIC_NAME、BASS_TAG_MUSIC_MESSAGE、BASS_TAG_MUSIC_AUTH、"
            注释 = "  BASS_TAG_MUSIC_INST、BASS_TAG_MUSIC_CHAN、BASS_TAG_MUSIC_SAMPLE">
    {
        @ const char *text = BassDll::Fn().BASS_ChannelGetTags(static_cast<DWORD>(@<通道句柄>), static_cast<DWORD>(@<标签>));
        @ if (text) {
        @     @an<CVolMem> buf;
        @     if (@<标签> == BASS_TAG_VENDOR || @<标签> == BASS_TAG_MUSIC_AUTH) {
        @         return @an<CVolString>{text}; // UTF8
        @     else
        @         return @an<CVolString>{GetWideText(text, buf, NULL)};
        @ }
        返回 ("")
    }

    方法 取通道标签_ID3v1 <公开 类型 = 逻辑型 注释 = "获取通道的ID3v1标签(BASS_TAG_ID3),为\"取通道标签\"的二次封装."
            返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @禁止流程检查 = 真>
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HMUSIC或HSTREAM句柄.">
    参数 标签 <类型 = TAG_ID3 注释 = "返回的标签信息">
    {
        @ const TAG_ID3* ret = reinterpret_cast<const TAG_ID3*>(BassDll::Fn().BASS_ChannelGetTags(static_cast<DWORD>(@<通道句柄>), BASS_TAG_ID3));
        @ @an<CVolMem> buf;
        @ if (ret) {
        @     @<标签.ID> = ret->id;
        @     @<标签.标题>.SetText(GetWideText(ret->title, buf, NULL));
        @     @<标签.艺术家>.SetText(GetWideText(ret->artist, buf, NULL));
        @     @<标签.专辑>.SetText(GetWideText(ret->album, buf, NULL));
        @     @<标签.年份>.SetText(GetWideText(ret->year, buf, NULL));
        @     @<标签.注释>.SetText(GetWideText(ret->comment, buf, NULL));
        @     @<标签.流派> = ret->genre;
        @     return TRUE;
        @ }
        @ return FALSE;
    }

    方法 置取通道标志 <公开 类型 = 整数 注释 = "修改和获取通道的标志" 返回值注释 = "成功返回通道的新标志,失败返回-1,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠
            @嵌入式方法 = "">
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HCHANNEL、HMUSIC或HSTREAM句柄.">
    参数 标志 <类型 = 整数 注释 = "  为\"BASS_音频标志\"中以下标志的组合值:"
            注释 = "  BASS_SAMPLE_LOOP、BASS_SAMPLE_MUTEMAX、BASS_STREAM_AUTOFREE、BASS_STREAM_RESTRATE、"
            注释 = "  BASS_MUSIC_NONINTER、BASS_MUSIC_SINCINTER、BASS_MUSIC_RAMP、BASS_MUSIC_RAMPS、"
            注释 = "  BASS_MUSIC_SURROUND、BASS_MUSIC_SURROUND2、BASS_MUSIC_FT2MOD、BASS_MUSIC_PT1MOD、"
            注释 = "  BASS_MUSIC_POSRESET、BASS_MUSIC_POSRESETEX 、BASS_MUSIC_STOPBACK、BASS_SPEAKER_xxx">
    参数 掩码 <类型 = 整数 注释 = "  要修改的标志(如上一参数所述),未包含在此参数的标志会保持原样." 注释 = "  如果将本参数设置为0,则可以用来获取通道的当前标志."
            注释 = "  如果要添加标志,则需要在\"标志\"和\"掩码\"参数里都有一样的标志." 注释 = "  如果要移除标志,则在此参数填写要移除的标志,且确保这个标志不在\"标志参数\"中."
            注释 = "  要修改扬声器标志,可以在本参数中使用任意的\"BASS_SPEAKER_xxx\"标志(无需包括其所有标志).">
    {
        @ static_cast<INT>(BassDll::Fn().BASS_ChannelFlags(static_cast<DWORD>(@<通道句柄>), static_cast<DWORD>(@<标志>), static_cast<DWORD>(@<掩码>)))
    }

    方法 锁定通道 <公开 类型 = 逻辑型 注释 = "将流、MOD音乐或录制的通道锁定到当前线程,锁定后将阻止其他线程访问该通道,直至解锁."
            返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HMUSIC、HSTREAM或HRECORD句柄.">
    参数 是否锁定 <类型 = 逻辑型 注释 = "是否锁定通道" @默认值 = 真>
    {
        @ BassDll::Fn().BASS_ChannelLock(static_cast<DWORD>(@<通道句柄>), @<是否锁定>)
    }

    方法 释放通道 <公开 类型 = 逻辑型 注释 = "释放一条通道,包括通道上的一切同步器/DSP/音效."
            返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HCHANNEL、HMUSIC、HSTREAM或HRECORD句柄.">
    {
        @ BassDll::Fn().BASS_ChannelFree(static_cast<DWORD>(@<通道句柄>))
    }

    方法 播放 <公开 类型 = 逻辑型 注释 = "开始或恢复播放样本、流、MOD音乐或录制." 返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息."
            折叠 @嵌入式方法 = "">
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HCHANNEL、HMUSIC、HSTREAM或HRECORD句柄.">
    参数 重头播放 <类型 = 逻辑型 注释 = "是否重头开始播放" @默认值 = 假>
    {
        @ BassDll::Fn().BASS_ChannelPlay(static_cast<DWORD>(@<通道句柄>), @<重头播放>)
    }

    方法 开始 <公开 类型 = 逻辑型 注释 = "开始或恢复播放样本、流、MOD音乐或录制." 返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息."
            折叠 @嵌入式方法 = "">
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HCHANNEL、HMUSIC、HSTREAM或HRECORD句柄.">
    {
        @ BassDll::Fn().BASS_ChannelStart(static_cast<DWORD>(@<通道句柄>))
    }

    方法 停止 <公开 类型 = 逻辑型 注释 = "停止播放样本、流、MOD音乐或停止录制." 返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息."
            折叠 @嵌入式方法 = "">
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HCHANNEL、HMUSIC、HSTREAM或HRECORD句柄.">
    {
        @ BassDll::Fn().BASS_ChannelStop(static_cast<DWORD>(@<通道句柄>))
    }

    方法 暂停 <公开 类型 = 逻辑型 注释 = "暂停播放样本、流、MOD音乐或暂停录制,暂停后可以用\"播放\"恢复."
            返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HCHANNEL、HMUSIC、HSTREAM或HRECORD句柄.">
    {
        @ BassDll::Fn().BASS_ChannelPause(static_cast<DWORD>(@<通道句柄>))
    }

    方法 更新播放缓冲 <公开 类型 = 逻辑型 注释 = "更新流或MOD音乐的播放缓冲" 返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠
            @嵌入式方法 = "">
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HMUSIC或HSTREAM句柄.">
    参数 数据长度 <类型 = 整数 注释 = "需要渲染的数据量,单位为毫秒. 0=默认值(2个更新周期),这是缓冲区中可用空间的上限." @默认值 = 0>
    {
        @ BassDll::Fn().BASS_ChannelUpdate(static_cast<DWORD>(@<通道句柄>), static_cast<DWORD>(@<数据长度>))
    }

    方法 置通道属性 <公开 类型 = 逻辑型 注释 = "设置通道的属性值" 返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠
            @嵌入式方法 = "">
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HCHANNEL、HMUSIC、HSTREAM或HRECORD句柄.">
    参数 属性 <类型 = 整数 注释 = "  要设置的值的属性,为\"BASS_通道属性\"的下列属性之一"
            注释 = "  BASS_ATTRIB_BUFFER、BASS_ATTRIB_FREQ、BASS_ATTRIB_GRANULE、BASS_ATTRIB_MUSIC_AMPLIFY、"
            注释 = "  BASS_ATTRIB_MUSIC_BPM、ASS_ATTRIB_MUSIC_PANSEP、BASS_ATTRIB_MUSIC_PSCALER、BASS_ATTRIB_MUSIC_SPEED、"
            注释 = "  BASS_ATTRIB_MUSIC_VOL_CHAN、BASS_ATTRIB_MUSIC_VOL_GLOBAL、BASS_ATTRIB_MUSIC_VOL_INST、BASS_ATTRIB_NET_RESUME、"
            注释 = "  BASS_ATTRIB_NOBUFFER、BASS_ATTRIB_NORAMP、BASS_ATTRIB_PAN、BASS_ATTRIB_PUSH_LIMIT、BASS_ATTRIB_SRC、"
            注释 = "  BASS_ATTRIB_TAIL、BASS_ATTRIB_VOL">
    参数 值 <类型 = 单精度小数 注释 = "新的属性值. 有关取值范围的详细信息,请参见属性的备注或文档.">
    {
        @ BassDll::Fn().BASS_ChannelSetAttribute(static_cast<DWORD>(@<通道句柄>), static_cast<DWORD>(@<属性>), @<值>)
    }

    方法 取通道属性 <公开 类型 = 逻辑型 注释 = "获取通道的指定属性值" 返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠
            @嵌入式方法 = "">
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HCHANNEL、HMUSIC、HSTREAM或HRECORD句柄.">
    参数 属性 <类型 = 整数 注释 = "要获取值的属性,为\"BASS_通道属性\"的属性之一.">
    参数 值 <类型 = 单精度小数类 注释 = "返回的属性值">
    {
        @ BassDll::Fn().BASS_ChannelGetAttribute(static_cast<DWORD>(@<通道句柄>), static_cast<DWORD>(@<属性>), &@<值.值>)
    }

    方法 置通道滑动属性 <公开 类型 = 逻辑型 注释 = "将通道的属性从其当前值滑动到新值" 返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息."
            折叠 @嵌入式方法 = "">
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HCHANNEL、HSTREAM、HMUSIC或HRECORD句柄.">
    参数 属性 <类型 = 整数 注释 = "  需要滑动的属性的值. 为\"BASS_通道属性\"的以下选项之一."
            注释 = "  BASS_ATTRIB_FREQ、BASS_ATTRIB_PAN、BASS_ATTRIB_VOL、BASS_ATTRIB_MUSIC_AMPLIFY、"
            注释 = "  BASS_ATTRIB_MUSIC_BPM、BASS_ATTRIB_MUSIC_PANSEP、BASS_ATTRIB_MUSIC_PSCALER、"
            注释 = "  BASS_ATTRIB_MUSIC_SPEED、BASS_ATTRIB_MUSIC_VOL_CHAN、BASS_ATTRIB_MUSIC_VOL_GLOBAL、"
            注释 = "  BASS_ATTRIB_MUSIC_VOL_INST"
            注释 = "  可选标志: BASS_SLIDE_LOG(0x1000000), 以对数方式而不是线性方式滑动属性值. 当从正变为负或从负变为正时,不能使用此选项.">
    参数 值 <类型 = 单精度小数 注释 = "新的属性值. 有关取值范围的详细信息,请参阅属性的备注.">
    参数 时间 <类型 = 整数 注释 = "属性改变成新值所需的时间长度(毫秒)">
    {
        @ BassDll::Fn().BASS_ChannelSlideAttribute(static_cast<DWORD>(@<通道句柄>), static_cast<DWORD>(@<属性>), @<值>, static_cast<DWORD>(@<时间>))
    }

    方法 通道是否滑动 <公开 类型 = 逻辑型 注释 = "检查样本、流或MOD音乐的一个属性(或所有属性)是否设置了滑动." 返回值注释 = "如果属性为滑动则返回真,否则返回假." 折叠
            @嵌入式方法 = "">
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是 HCHANNEL、HSTREAM或HMUSIC句柄.">
    参数 属性 <类型 = 整数 注释 = "  欲检查是否滑动的属性,为\"BASS_通道属性\"的以下选项之一,为0时表示所有属性."
            注释 = "  BASS_ATTRIB_FREQ、BASS_ATTRIB_PAN、BASS_ATTRIB_VOL、BASS_ATTRIB_MUSIC_AMPLIFY、"
            注释 = "  BASS_ATTRIB_MUSIC_BPM、BASS_ATTRIB_MUSIC_PANSEP、BASS_ATTRIB_MUSIC_PSCALER、"
            注释 = "  BASS_ATTRIB_MUSIC_SPEED、BASS_ATTRIB_MUSIC_VOL_CHAN、BASS_ATTRIB_MUSIC_VOL_GLOBAL、"
            注释 = "  BASS_ATTRIB_MUSIC_VOL_INST">
    {
        @ BassDll::Fn().BASS_ChannelIsSliding(static_cast<DWORD>(@<通道句柄>), static_cast<DWORD>(@<属性>))
    }

    方法 置通道属性EX <公开 类型 = 逻辑型 注释 = "设置通道的属性值" 返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠
            @嵌入式方法 = "">
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HCHANNEL、HMUSIC、HSTREAM或HRECORD句柄.">
    参数 属性 <类型 = 整数 注释 = "  要设置的值的属性,为\"BASS_通道属性\"的下列属性之一." 注释 = "  BASS_ATTRIB_SCANINFO、BASS_ATTRIB_USER">
    参数 值 <类型 = 变整数 注释 = "新的属性数据">
    参数 尺寸 <类型 = 整数 注释 = "属性数据的大小(单位为字节)">
    {
        @ BassDll::Fn().BASS_ChannelSetAttributeEx(static_cast<DWORD>(@<通道句柄>), static_cast<DWORD>(@<属性>), &@<值>, static_cast<DWORD>(@<尺寸>))
    }

    方法 取通道属性EX <公开 类型 = 整数 注释 = "获取通道的指定属性值" 返回值注释 = "成功返回属性数据的大小,失败返回0,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息."
            折叠 @嵌入式方法 = "">
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HCHANNEL、HMUSIC、HSTREAM或HRECORD句柄.">
    参数 属性 <类型 = 整数 注释 = "  要设置的值的属性,为\"BASS_通道属性\"的下列属性之一." 注释 = "  BASS_ATTRIB_SCANINFO、BASS_ATTRIB_USER">
    参数 值 <类型 = 变整数 注释 = "获取属性数据的指针">
    参数 尺寸 <类型 = 整数 注释 = "属性数据的大小(单位为字节),为0则仅获取属性的大小而不获取数据.">
    {
        @ static_cast<INT>(BassDll::Fn().BASS_ChannelGetAttributeEx(static_cast<DWORD>(@<通道句柄>), static_cast<DWORD>(@<属性>), &@<值>, static_cast<DWORD>(@<尺寸>)))
    }

    方法 置通道空间属性 <公开 类型 = 逻辑型 注释 = "设置具有3D空间音效功能的样本、流或MOD音乐通道的3D属性."
            返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HCHANNEL、HMUSIC、HSTREAM、HRECORD或HSAMPLE句柄.">
    参数 三维模式 <类型 = 整数 注释 = "  3D处理模式,为以下的标志之一,-1为保持当前状态." 注释 = "  0 = BASS_3DMODE_NORMAL, 正常的3D处理."
            注释 = "  1 = BASS_3DMODE_RELATIVE, 通道的3D位置(位置速度/方向)为听众的相对位置."
            注释 = "  当使用\"置通道3D位置\"更改听众的位置、速度和方向时,通道与听众的相对位置不会变."
            注释 = "  2 = BASS_3DMODE_OFF, 关闭通道上的3D处理,声音将在中央播放.">
    参数 最小距离 <类型 = 单精度小数 注释 = "当听众在此距离内时,音量达到最大值. 少于等于0为保持当前状态.">
    参数 最大距离 <类型 = 单精度小数 注释 = "当听众超过此距离时,音量停止下降. 少于等于0为保持当前状态.">
    参数 内投影角度 <类型 = 整数 注释 = "内投影圆锥体的角度,单位为度. 0(无圆锥体)到360(球体),-1为保持当前状态.">
    参数 外投影角度 <类型 = 整数 注释 = "外投影圆锥体的角度,单位为度. 0(无圆锥体)到360(球体),-1为保持当前状态.">
    参数 外投影音量 <类型 = 单精度小数 注释 = "外部投影圆锥体外的音量. 0(无声)到1(与圆锥体内部相同),少于等于0为保持当前状态.">
    {
        @ BassDll::Fn().BASS_ChannelSet3DAttributes(static_cast<DWORD>(@<通道句柄>), @<三维模式>, @<最小距离>, @<最大距离>, @<内投影角度>, @<外投影角度>, @<外投影音量>)
    }

    方法 取通道空间属性 <公开 类型 = 逻辑型 注释 = "获取具有3D空间音效功能的样本、流或MOD音乐通道的3D属性."
            返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HCHANNEL、HMUSIC、HSTREAM、HRECORD或HSAMPLE句柄." "">
    参数 三维模式 <类型 = 整数类 注释 = "  3D处理模式,为以下的标志之一. 参数留空为不获取." 注释 = "  0 = BASS_3DMODE_NORMAL, 正常的3D处理."
            注释 = "  1 = BASS_3DMODE_RELATIVE, 通道的3D位置(位置速度/方向)为听众的相对位置."
            注释 = "当使用\"置通道3D位置\"更改听众的位置、速度和方向时,通道与听众的相对位置不会变." 注释 = "  2 = BASS_3DMODE_OFF, 关闭通道上的3D处理,声音将在中央播放."
            @默认值 = 空对象>
    参数 最小距离 <类型 = 单精度小数类 注释 = "当听众在此距离内时,音量达到最大值. 参数留空为不获取." @默认值 = 空对象>
    参数 最大距离 <类型 = 单精度小数类 注释 = "当听众超过此距离时,音量停止下降.参数留空为不获取." @默认值 = 空对象>
    参数 内投影角度 <类型 = 整数类 注释 = "内投影圆锥体的角度,单位为度. 参数留空为不获取." @默认值 = 空对象>
    参数 外投影角度 <类型 = 整数类 注释 = "外投影圆锥体的角度,单位为度. 参数留空为不获取." @默认值 = 空对象>
    参数 外投影音量 <类型 = 单精度小数类 注释 = "外部投影圆锥体外的音量. 参数留空为不获取." @默认值 = 空对象>
    {
        @ BassDll::Fn().BASS_ChannelGet3DAttributes(static_cast<DWORD>(@<通道句柄>), &@<三维模式.值>, &@<最小距离.值>,
        @     &@<最大距离.值>, &@<内投影角度.值>, &@<外投影角度.值>, &@<外投影音量.值>)
    }

    方法 置通道空间位置 <公开 类型 = 逻辑型 注释 = "设置具有3D空间音效功能的样本、流或MOD音乐通道的3D位置."
            返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HCHANNEL、HMUSIC或HSTREAM句柄.">
    参数 位置 <类型 = BASS_3D矢量 注释 = "声音的位置,空对象表示保持当前设置." @默认值 = 空对象>
    参数 指向 <类型 = BASS_3D矢量 注释 = "声音的指向,空对象表示保持当前设置;" 注释 = "此项会自动规范化." @默认值 = 空对象>
    参数 速度 <类型 = BASS_3D矢量 注释 = "声音的速度,空对象表示保持当前设置;" 注释 = "仅用于计算多普勒效应,对声音的位置没有影响." @默认值 = 空对象>
    {
        @ BassDll::Fn().BASS_ChannelSet3DPosition(static_cast<DWORD>(@<通道句柄>), @<位置>.GetPtrMayNull(), @<指向>.GetPtrMayNull(), @<速度>.GetPtrMayNull())
    }

    方法 取通道空间位置 <公开 类型 = 逻辑型 注释 = "获取具有3D空间音效功能的样本、流或MOD音乐通道的3D位置."
            返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HCHANNEL、HMUSIC或HSTREAM句柄.">
    参数 位置 <类型 = BASS_3D矢量 注释 = "声音的位置,参数留空为不获取." @默认值 = 空对象>
    参数 指向 <类型 = BASS_3D矢量 注释 = "声音的指向,参数留空为不获取." @默认值 = 空对象>
    参数 速度 <类型 = BASS_3D矢量 注释 = "声音的速度,参数留空为不获取." @默认值 = 空对象>
    {
        @ BassDll::Fn().BASS_ChannelGet3DPosition(static_cast<DWORD>(@<通道句柄>), @<位置>.GetPtrMayNull(), @<指向>.GetPtrMayNull(), @<速度>.GetPtrMayNull())
    }

    方法 取通道长度 <公开 类型 = 长整数 注释 = "获取通道的播放总长度" 返回值注释 = "成功返回通道长度,失败返回-1,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠
            @嵌入式方法 = "">
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HCHANNEL、HMUSIC、HSTREAM、HRECORD或HSAMPLE句柄.">
    参数 位置模式 <类型 = 整数 注释 = "  仅支持以下三种模式." 注释 = "  0 = BASS_POS_BYTE,获取字节长度."
            注释 = "  1 = BASS_POS_MUSIC_ORDER,获取顺序长度(仅限MOD音乐)." 注释 = "  3 = BASS_POS_OGG,获取OGG文件中的比特流数."
            @默认值 = BASS_位置类型.BASS_POS_BYTE>
    {
        @ static_cast<INT64>(BassDll::Fn().BASS_ChannelGetLength(static_cast<DWORD>(@<通道句柄>), static_cast<DWORD>(@<位置模式>)))
    }

    方法 置播放位置 <公开 类型 = 逻辑型 注释 = "设置样本、MOD音乐或流的播放位置." 返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息."
            折叠 @嵌入式方法 = "">
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HCHANNEL、HSTREAM或HMUSIC句柄.">
    参数 播放位置 <类型 = 长整数 注释 = "播放位置,单位由参数\"长度模式\"确定.">
    参数 位置模式 <类型 = 整数 注释 = "  位置模式,默认为字节长度,可使用\"BASS_位置类型\"中的选项之一."
            注释 = "  可选位或\"BASS_位置类型\"的所有标志,再额外加上\"BASS_音频标志\"的BASS_MUSIC_POSRESET、BASS_MUSIC_POSRESETEX标志"
            @默认值 = BASS_位置类型.BASS_POS_BYTE>
    {
        @ BassDll::Fn().BASS_ChannelSetPosition(static_cast<DWORD>(@<通道句柄>), static_cast<QWORD>(@<播放位置>), static_cast<DWORD>(@<位置模式>))
    }

    方法 取播放位置 <公开 类型 = 长整数 注释 = "获取样本、流或MOD音乐的播放位置,也可以在录制通道上使用."
            返回值注释 = "成功返回播放位置,失败返回-1,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HCHANNEL、HMUSIC、HSTREAM、HRECORD或HSAMPLE句柄.">
    参数 位置模式 <类型 = 整数 注释 = "  仅支持以下两种模式" 注释 = "  0 = BASS_POS_BYTE,获取字节长度"
            注释 = "  1 = BASS_POS_MUSIC_ORDER,获取顺序长度(仅限MOD音乐)" 注释 = "  可选位或标志 BASS_POS_DECODE."
            @默认值 = BASS_位置类型.BASS_POS_BYTE>
    {
        @ static_cast<INT64>(BassDll::Fn().BASS_ChannelGetPosition(static_cast<DWORD>(@<通道句柄>), static_cast<DWORD>(@<位置模式>)))
    }

    方法 取通道电平 <公开 类型 = 整数 注释 = "获取样本、流、MOD音乐或录制的通道级别(峰值振幅)."
            返回值注释 = "失败返回-1,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息."
            返回值注释 = "如果成功,左声道的电平在低位(低16位),右声道在高位(高16位)返回,若通道为单声道,则低位与高位重复."
            返回值注释 = "该级别的线性范围为0(无声)到32768(最大).通道暂停时将返回0." 折叠 @嵌入式方法 = "">
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HCHANNEL、HMUSIC、HSTREAM或HRECORD句柄.">
    {
        @ static_cast<INT>(BassDll::Fn().BASS_ChannelGetLevel(static_cast<DWORD>(@<通道句柄>)))
    }

    方法 取立体声电平 <公开 类型 = 逻辑型 注释 = "获取样本、流、MOD音乐或录制的通道级别(峰值振幅),本方法用于返回立体声的左右声道电平." 返回值注释 = "返回是否成功." 折叠 "">
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HCHANNEL、HMUSIC、HSTREAM或HRECORD句柄.">
    参数 左声道 <类型 = 整数类 注释 = "返回左声道的电平. 范围为0(无声)到32768(最大)." @默认值 = 空对象>
    参数 右声道 <类型 = 整数类 注释 = "返回右声道的电平. 范围为0(无声)到32768(最大)." @默认值 = 空对象>
    {
        如果 (取通道状态 (通道句柄) == 1)
        {
            变量 电平 <类型 = 整数>
            电平 = 取通道电平 (通道句柄)
            如果 (电平 <= 0)
            {
                返回 (假)
            }
            左声道.值 = 位与 (电平, 0xFFFF)
            右声道.值 = 位右移 (电平, 16)
            返回 (真)
        }
        返回 (假)
    }

    方法 取通道电平EX <公开 类型 = 逻辑型 注释 = "获取样本、流、MOD音乐或录制的通道级别(峰值振幅)."
            返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @禁止流程检查 = 真>
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HCHANNEL、HMUSIC、HSTREAM或HRECORD句柄.">
    参数 电平数据 <类型 = 单精度小数数组类 注释 = "用于接收电平级别的数组">
    参数 数据长度 <类型 = 单精度小数 注释 = "计算电平的观察数据量,单位为秒,除解码通道外,最大值为1秒.">
    参数 声道 <类型 = 整数 注释 = "0=全部声道, 1=单声道, 2=立体声" @默认值 = 2>
    参数 是否RMS级别 <类型 = 逻辑型 注释 = "假为获取电平级别,真为获取RMS(均方根值)级别." @默认值 = 假>
    参数 应用属性 <类型 = 逻辑型 注释 = "为真时将当前的BASS_ATTRIB_VOL和BASS_ATTRIB_PAN值应用于电平级别中." @默认值 = 假>
    {
        @ DWORD flags = @<声道>;
        @ if (@<是否RMS级别>) flags |= BASS_LEVEL_RMS;
        @ if (@<应用属性>) flags |= BASS_LEVEL_VOLPAN;
        @ if (@<声道> == 1) {
        @     @<电平数据>.data().InitCount (1, TRUE);
        @ } else if (@<声道> == 2) {
        @     @<电平数据>.data().InitCount (2, TRUE);
        @ } else {
        @     BASS_CHANNELINFO ci;
        @     BASS_ChannelGetInfo (@<通道句柄>, &ci);
        @     @<电平数据>.data().InitCount(ci.chans, TRUE);
        @ }
        @ return BassDll::Fn().BASS_ChannelGetLevelEx(static_cast<DWORD>(@<通道句柄>), @<电平数据>.data().GetData(), @<数据长度>, flags);
    }

    方法 取通道数据 <公开 类型 = 整数 注释 = "获取样本、流、MOD音乐或录制通道的即时样本数据(或其FFT信号)"
            返回值注释 = "  失败返回-1,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 返回值注释 = "  请求FFT数据时,返回从通道读取的字节数(用于执行FFT)."
            返回值注释 = "  请求样本数据时,将返回写入缓冲区的字节数(不一定与使用BASS_DATA_FLOAT标志时读取的字节数相同)."
            返回值注释 = "  使用BASS_DATA_AVAILABLE标志时,将返回通道缓冲区中的字节数." 折叠 @嵌入式方法 = "">
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HCHANNEL、HMUSIC、HSTREAM或HRECORD句柄.">
    参数 缓冲区 <类型 = 变整数 注释 = "  用来接收数据的缓冲区指针." 注释 = "  当句柄是录制句柄(HRECORD)时,可以为0,以丢弃从录制缓冲区请求的数据." "">
    参数 长度 <类型 = 整数 注释 = "填写要获取的数据字节数(最多268435455或0xFFFFFFF),也可以使用\"BASS_通道数据类型\"中常量的组合值." "">
    {
        @ static_cast<INT>(BassDll::Fn().BASS_ChannelGetData(static_cast<DWORD>(@<通道句柄>), reinterpret_cast<void*>(@<缓冲区>), static_cast<DWORD>(@<长度>)))
    }

    方法 取通道数据2 <公开 类型 = 整数 注释 = "获取样本、流、MOD音乐或录制通道的即时样本数据(或其FFT信号)."
            注释 = "为\"取通道数据\"的二次封装版本,缓冲区改成字节集类了,而原始版本更适合在回调事件中使用."
            返回值注释 = "  失败返回-1,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息.." 返回值注释 = "  请求FFT数据时,返回从通道读取的字节数(用于执行FFT)."
            返回值注释 = "  请求样本数据时,将返回写入缓冲区的字节数(不一定与使用BASS_DATA_FLOAT标志时读取的字节数相同)."
            返回值注释 = "  使用BASS_DATA_AVAILABLE标志时,将返回通道缓冲区中的字节数." 折叠 @禁止流程检查 = 真>
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HCHANNEL、HMUSIC、HSTREAM或HRECORD句柄.">
    参数 缓冲区 <类型 = 字节集类 注释 = "  用来接收数据的缓冲区字节集." 注释 = "  当句柄是录制句柄(HRECORD)时,可以为\"空对象\",以丢弃从录制缓冲区请求的数据."
            @默认值 = 空对象>
    参数 长度 <类型 = 整数 注释 = "填写你想要获取的数据字节数(最多268435455或0xFFFFFFF),也可以使用\"BASS_通道数据类型\"中常量的组合值." @默认值 = 0>
    {
        变量 缓冲区长度 <类型 = 整数>
        变量 FFT倍数 <类型 = 整数>
        变量 通道信息 <类型 = BASS_通道信息>
        取通道信息 (通道句柄, 通道信息)
        如果 (通道信息.声道数 > 2)
        {
            FFT倍数 = 2 * 通道信息.声道数
        }
        否则
        {
            FFT倍数 = 4
        }
        如果 (位与 (长度, 0x80000007) == 0x80000007)  // 判断是否FFT,以及获取样本量
        {
            缓冲区长度 = 32768 * FFT倍数
        }
        否则 (位与 (长度, 0x80000006) == 0x80000006)
        {
            缓冲区长度 = 16384 * FFT倍数
        }
        否则 (位与 (长度, 0x80000005) == 0x80000005)
        {
            缓冲区长度 = 8192 * FFT倍数
        }
        否则 (位与 (长度, 0x80000004) == 0x80000004)
        {
            缓冲区长度 = 4096 * FFT倍数
        }
        否则 (位与 (长度, 0x80000003) == 0x80000003)
        {
            缓冲区长度 = 2048 * FFT倍数
        }
        否则 (位与 (长度, 0x80000002) == 0x80000002)
        {
            缓冲区长度 = 1024 * FFT倍数
        }
        否则 (位与 (长度, 0x80000001) == 0x80000001)
        {
            缓冲区长度 = 512 * FFT倍数
        }
        否则 (位与 (长度, 0x80000000) == 0x80000000)
        {
            缓冲区长度 = 256 * FFT倍数
        }
        否则
        {
            缓冲区长度 = 长度  // 不是FFT,则使用长度参数中的数值
        }
        缓冲区.分配字节集 (缓冲区长度)
        @ return static_cast<INT>(BassDll::Fn().BASS_ChannelGetData(static_cast<DWORD>(@<通道句柄>), reinterpret_cast<void*>(@<缓冲区>.GetPtr()), static_cast<DWORD>(@<长度>)));
    }

    方法 同步回调 <公开 定义事件 类型 = 整数 注释 = "执行\"置通道同步器\",可以在本事件中处理同步回调." 返回值注释 = "返回值无意义" 折叠>
    参数 同步句柄 <类型 = 整数 注释 = "同步器的句柄">
    参数 通道句柄 <类型 = 整数 注释 = "进行同步的通道">
    参数 数据 <类型 = 整数 注释 = "与同步类型关联的其他数据">

    方法 置通道同步器 <公开 类型 = 整数 注释 = "在MOD音乐、流或录制的通道上设置同步器,可以在接收事件\"BASS音频类_同步回调\"中处理同步操作."
            返回值注释 = "成功返回同步句柄,失败返回0,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HMUSIC、HSTREAM或HRECORD句柄.">
    参数 同步类型 <类型 = 整数 注释 = "同步的类型, 为\"BASS_同步类型\"中常量的组合值.">
    参数 同步参数 <类型 = 长整数 注释 = "设置同步参数. 参数值取决于同步类型,详细请看\"BASS_同步类型\"的常量备注.">
    {
        @ static_cast<INT>(BassDll::Fn().BASS_ChannelSetSync(static_cast<DWORD>(@<通道句柄>), static_cast<DWORD>(@<同步类型>),
        @     static_cast<QWORD>(@<同步参数>), &@sn<current_class_def>::BassSync, &@sn<this>))
    }

    方法 移除通道同步器 <公开 类型 = 逻辑型 注释 = "从MOD音乐、流或录制的通道上移除同步器."
            返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HMUSIC、HSTREAM或HRECORD句柄.">
    参数 同步句柄 <类型 = 整数 注释 = "欲移除的同步句柄">
    {
        @ BassDll::Fn().BASS_ChannelRemoveSync(static_cast<DWORD>(@<通道句柄>), static_cast<HSYNC>(@<同步句柄>))
    }

    方法 置通道链接 <公开 类型 = 逻辑型 注释 = "将两条MOD音乐或流通道链接在一起,然后可以同时播放两条通道."
            返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HMUSIC或HSTREAM句柄.">
    参数 链接通道 <类型 = 整数 注释 = "想要链接的通道句柄,可以是HMUSIC或HSTREAM句柄.">
    {
        @ BassDll::Fn().BASS_ChannelSetLink(static_cast<DWORD>(@<通道句柄>), static_cast<DWORD>(@<链接通道>))
    }

    方法 移除通道链接 <公开 类型 = 逻辑型 注释 = "移除两条MOD音乐或流通道的链接状态"
            返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HMUSIC或HSTREAM句柄.">
    参数 已链接通道 <类型 = 整数 注释 = "想要解除链接的通道句柄,可以是HMUSIC或HSTREAM句柄.">
    {
        @ BassDll::Fn().BASS_ChannelRemoveLink(static_cast<DWORD>(@<通道句柄>), static_cast<DWORD>(@<已链接通道>))
    }

    方法 DSP回调 <公开 定义事件 类型 = 整数 注释 = "执行\"置通道DSP功能\"后,可以在本事件自定义的DSP功能." 返回值注释 = "缓冲区的数据长度" 折叠>
    参数 DSP句柄 <类型 = 整数 注释 = "DSP功能的句柄">
    参数 通道句柄 <类型 = 整数 注释 = "设置了DSP功能的通道">
    参数 缓冲区 <类型 = 变整数 注释 = "指向写入样本数据的缓冲区指针. 数据应如下：8位样本为无符号,16位样本为有符号,32位浮点样本范围为-1到+1">
    参数 数据长度 <类型 = 整数 注释 = "与同步类型关联的其他数据">

    方法 置通道DSP功能 <公开 类型 = 整数 注释 = "在流、MOD 音乐或录制的通道上设置用户DSP功能,可以在接收事件\"BASS音频类_DSP回调\"中."
            返回值注释 = "成功返回DSP句柄,失败返回0,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HMUSIC、HSTREAM或HRECORD句柄.">
    参数 优先级 <类型 = 整数 注释 = "新DSP的优先级决定了其在DSP链中的位置,优先级较高的DSP优先被调用.">
    参数 用户数据 <类型 = 变整数 注释 = "传递给回调函数的用户自定义数据,在接收事件中返回" @默认值 = 0>
    {
        @ static_cast<INT>(BassDll::Fn().BASS_ChannelSetDSP(static_cast<DWORD>(@<通道句柄>), &@sn<current_class_def>::BassDsp, &@sn<this>, @<优先级>))
    }

    方法 移除通道DSP <公开 类型 = 逻辑型 注释 = "从流、MOD 音乐或录制的通道上移除DSP功能."
            返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HMUSIC、HSTREAM或HRECORD句柄">
    参数 DSP句柄 <类型 = 整数 注释 = "欲移除DSP功能的句柄,也可以用一个HFX句柄来移除音效.">
    {
        @ BassDll::Fn().BASS_ChannelRemoveDSP(static_cast<DWORD>(@<通道句柄>), static_cast<HDSP>(@<DSP句柄>))
    }

    方法 置通道音效 <公开 类型 = 整数 注释 = "在流、MOD 音乐或录制的通道上设置音效."
            返回值注释 = "成功返回音效句柄,失败返回0,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HSTREAM、HMUSIC或HRECORD句柄.">
    参数 效果类型 <类型 = 整数 注释 = "使用\"BASS_音效类型\"的常量之一,之后要用对应的结构体来获取和设置参数.">
    参数 优先级 <类型 = 整数 注释 = "新音效的优先级决定了其在DSP链中的位置,优先级较高的DSP/FX优先被调用." @默认值 = 0>
    {
        @ static_cast<INT>(BassDll::Fn().BASS_ChannelSetFX(static_cast<DWORD>(@<通道句柄>), static_cast<DWORD>(@<效果类型>), static_cast<DWORD>(@<优先级>)))
    }

    方法 移除通道音效 <公开 类型 = 逻辑型 注释 = "从流、MOD 音乐或录制的通道上移除FX音效."
            返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HSTREAM、HMUSIC或HRECORD句柄.">
    参数 音效句柄 <类型 = 整数 注释 = "欲移除音效的句柄,也可以用一个DSP句柄来DSP功能.">
    {
        @ BassDll::Fn().BASS_ChannelRemoveFX(@<通道句柄>, static_cast<HFX>(@<音效句柄>))
    }

    方法 置音效参数 <公开 类型 = 逻辑型 注释 = "设置音效的具体参数" 返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息."
            @嵌入式方法 = "">
    参数 音效句柄 <类型 = 整数 注释 = "音效的句柄">
    参数 参数 <类型 = 变整数 注释 = "  欲设置参数的结构体指针,该指针可以由\"参数类型.取变整数地址()\"获取."
            注释 = "  参数必须为以下的类型之一(具体类型由\"置通道音效\"的效果类型决定):"
            注释 = "  BASS_DX8_CHORUS、BASS_DX8_COMPRESSOR、BASS_DX8_DISTORTION、BASS_DX8_ECHO、"
            注释 = "  BASS_DX8_FLANGER、BASS_DX8_GARGLE、BASS_DX8_I3DL2REVERB、BASS_DX8_PARAMEQ、"
            注释 = "  BASS_DX8_REVERB、BASS_FX_VOLUME_PARAM">
    {
        @ BassDll::Fn().BASS_FXSetParameters(static_cast<HFX>(@<音效句柄>), reinterpret_cast<const void *>(@<参数>))
    }

    方法 取音效参数 <公开 类型 = 逻辑型 注释 = "获取音效的具体参数" 返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠
            @嵌入式方法 = "">
    参数 音效句柄 <类型 = 整数 注释 = "音效的句柄">
    参数 参数 <类型 = 变整数 注释 = "  返回参数的结构体指针,返回的指针可以用\"参数类型.取结构体数据(参数)\"将数据填写到参数变量中."
            注释 = "  参数必须为以下的类型之一(具体类型由\"置通道音效\"的效果类型决定):"
            注释 = "  BASS_DX8_CHORUS、BASS_DX8_COMPRESSOR、BASS_DX8_DISTORTION、BASS_DX8_ECHO、"
            注释 = "  BASS_DX8_FLANGER、BASS_DX8_GARGLE、BASS_DX8_I3DL2REVERB、BASS_DX8_PARAMEQ、"
            注释 = "  BASS_DX8_REVERB、BASS_FX_VOLUME_PARAM">
    {
        @ BassDll::Fn().BASS_FXGetParameters(static_cast<HFX>(@<音效句柄>), reinterpret_cast<void*>(@<参数>))
    }

    方法 置音效优先级 <公开 类型 = 逻辑型 注释 = "设置音效或DSP功能的优先级,从而确定其在DSP链中的位置."
            返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠 @嵌入式方法 = "">
    参数 句柄 <类型 = 整数 注释 = "DSP或音效的句柄">
    参数 优先级 <类型 = 整数 注释 = "新音效的优先级决定了其在DSP链中的位置,优先级较高的DSP/FX优先被调用.">
    {
        @ BassDll::Fn().BASS_FXSetPriority(static_cast<HFX>(@<句柄>), @<优先级>)
    }

    方法 重置音效 <公开 类型 = 逻辑型 注释 = "重置通道上的单个或所有音效的状态" 返回值注释 = "返回是否成功. 如果失败,可以用\"取错误代码\"或\"取错误描述\"获取具体的错误信息." 折叠
            @嵌入式方法 = "">
    参数 通道句柄 <类型 = 整数 注释 = "通道句柄,可以是HFX、HSTREAM、HMUSIC或HRECORD句柄.">
    {
        @ BassDll::Fn().BASS_FXReset(static_cast<DWORD>(@<通道句柄>))
    }

    # 其他

    方法 更新格式过滤器 <注释 = "本方法为\"加载插件目录\"和\"浏览音乐文件\"的辅助功能." 折叠>
    参数 插件信息数组 <类型 = BASS_插件信息数组 注释 = "留空为自动重新获取插件的信息">
    {
        变量 所有格式 <类型 = 文本型
                值 = "所有文件(*.*)|*.*|所有支持的音乐格式|*.mp3;*.mp2;*.mp1;*.ogg;*.wav;*.aiff;*.xm;*.it;*.s3m;*.mod;*.mtm;*.umx">
        变量 单一格式 <类型 = 文本型
                值 = "基本格式(*.mp3;*.mp2;*.mp1;*.ogg;*.wav;*.aiff)|*.mp3;*.mp2;*.mp1;*.ogg;*.wav;*.aiff|MOD音乐(*.xm;*.it;*.s3m;*.mod;*.mtm;*.umx)|*.xm;*.it;*.s3m;*.mod;*.mtm;*.umx">
        插件信息数组.枚举循环 ()
        {
            变量 插件格式 <类型 = BASS_插件格式>
            计次循环 (插件信息数组.取枚举值 ().格式数量)
            {
                插件格式 = 插件信息数组.取枚举值 ().支持格式.取成员 (取循环索引 ())
                加入格式文本 (单一格式, "|%s(%s)|", 插件格式.格式描述, 插件格式.格式扩展名)
                加入格式文本 (所有格式, ";%s", 插件格式.格式扩展名)
            }
        }
        加入文本 (格式过滤器, 所有格式)
        加入字符 (格式过滤器, '|')
        加入文本 (格式过滤器, 单一格式)
    }

    方法 浏览音乐文件 <公开 类型 = 整数 注释 = "调用系统的文件对话框选择打开音乐文件，允许多选,返回到文本数组类" 注释 = "请务必用\"加载插件目录\"来加载插件,本方法才能自动处理格式支持."
            返回值注释 = "返回音乐文件名的数量,失败或未选择返回0" 折叠>
    参数 父窗口句柄 <类型 = 变整数 注释 = "父窗口的句柄,0=表示无父窗口" @默认值 = 0>
    参数 文件名列表 <类型 = 文本数组类 注释 = "返回的文件名数组">
    参数 标题 <类型 = 文本型 注释 = "文件对话框的标题,默认为\"打开\"" @默认值 = "添加音乐文件">
    参数 初始目录 <类型 = 文本型 注释 = "留空为程序的运行文件夹" @默认值 = 空对象>
    {
        如果 (文本是否为空 (格式过滤器))  // 如果全局变量"格式过滤器"为空,表示没有加载插件,使用默认的过滤器
        {
            变量 默认过滤器 <类型 = 文本型
                    值 = "所有文件(*.*)|*.*|所有支持的音乐格式|*.mp3;*.mp2;*.mp1;*.ogg;*.wav;*.aiff;*.xm;*.it;*.s3m;*.mod;*.mtm;*.umx|基本格式(*.mp3;*.mp2;*.mp1;*.ogg;*.wav;*.aiff)|*.mp3;*.mp2;*.mp1;*.ogg;*.wav;*.aiff|MOD音乐(*.xm;*.it;*.s3m;*.mod;*.mtm;*.umx)|*.xm;*.it;*.s3m;*.mod;*.mtm;*.umx">
            格式过滤器 = 默认过滤器
        }
        返回 (通用文件对话框.打开选择多个文件 (文件名列表, 格式过滤器, 父窗口句柄, 标题, 0, 初始目录, 假))
    }

    # 内部使用的回调方法 ---
    # @begin
    # <> <include>
    # static DWORD CALLBACK BassStream(HSTREAM handle, void *buffer, DWORD length, void *user) {
    #     return static_cast<DWORD>(reinterpret_cast<@sn<current_class>*>(user)->@<写入流回调>(
    #         static_cast<INT>(handle), reinterpret_cast<INT_P>(buffer), static_cast<INT>(length)));
    # }
    # static void CALLBACK BassDownload(const void *buffer, DWORD length, void *user) {
    #     reinterpret_cast<@sn<current_class>*>(user)->@<下载回调>(
    #         reinterpret_cast<INT_P>(buffer), static_cast<INT>(length));
    # }
    # static BOOL CALLBACK BassRecord(HRECORD handle, const void *buffer, DWORD length, void *user) {
    #     return (reinterpret_cast<@sn<current_class>*>(user)->@<录制回调>(
    #         static_cast<INT>(handle), reinterpret_cast<INT_P>(buffer), static_cast<INT>(length)) == 0);
    # }
    # static void CALLBACK BassFileClose(void *user) {
    #     reinterpret_cast<@sn<current_class>*>(user)->@<文件处理_关闭>();
    # }
    # static QWORD CALLBACK BassFileLen(void *user) {
    #     return static_cast<QWORD>(reinterpret_cast<@sn<current_class>*>(user)->@<文件处理_长度>());
    # }
    # static DWORD CALLBACK BassFileRead(void *buffer, DWORD length, void *user) {
    #     return static_cast<DWORD>(reinterpret_cast<@sn<current_class>*>(user)->@<文件处理_读入>(
    #         reinterpret_cast<INT_P>(buffer), static_cast<INT>(length)));
    # }
    # static BOOL CALLBACK BassFileSeek(QWORD offset, void *user) {
    #     return (reinterpret_cast<@sn<current_class>*>(user)->@<文件处理_搜索>(static_cast<INT64>(offset)) == 0);
    # }
    # static void CALLBACK BassSync(HSYNC handle, DWORD channel, DWORD data, void *user) {
    #     reinterpret_cast<@sn<current_class>*>(user)->@<同步回调>(static_cast<INT>(handle), static_cast<INT>(channel), static_cast<INT>(data));
    # }
    # static void CALLBACK BassDsp(HDSP handle, DWORD channel, void *buffer, DWORD length, void *user) {
    #     reinterpret_cast<@sn<current_class>*>(user)->@<DSP回调>(static_cast<INT>(handle), static_cast<INT>(channel),
    #         reinterpret_cast<INT_P>(buffer), static_cast<INT>(length));
    # }
    # <> </include>
    # @end
}

类 BASS辅助类 <公开 注释 = "BASS用到的一些辅助方法." 折叠 @禁止创建对象 = 真>
{
    方法 组装WAVE <公开 静态 类型 = 逻辑型 注释 = "录制返回的数据不包含 WAVE 文件头数据,需要我们自行组装WAV." 返回值注释 = "返回是否成功" 折叠>
    参数 数据 <类型 = 字节集类 注释 = "需要组装文件头的WAV数据,如果是空字节集,那就是只写入WAVE文件头">
    参数 声道 <类型 = 整数 注释 = "声道数量">
    参数 采样率 <类型 = 整数 注释 = "WAV的采样率" @默认值 = 44100>
    参数 位深度 <类型 = BASS_位深度 注释 = "采样位深度" @默认值 = BASS_位深度.位深_16位>
    {
        如果 (字节集内容是否相同 (数据.取字节集左边 (4), 创建字节集 (0x52, 0x49, 0x46, 0x46)) == 真)  // 如果已经有文件头,修改文件头中的数据尺寸
        {
            如果 (数据.取字节集长度 () < 44)  // 不足44长度,说明连WAV文件头都不完整
            {
                返回 (假)
            }
            数据.字节集替换 (4, 4, 到字节集 (数据.取字节集长度 () - 8))  // 修改波形块尺寸
            数据.字节集替换 (40, 4, 到字节集 (数据.取字节集长度 () - 44))  // 修改WAV数据尺寸
            返回 (真)
        }
        否则
        {
            变量 文件头 <类型 = 字节集类>
            文件头.添加字节集内容 (0x52, 0x49, 0x46, 0x46)  // 格式块ID(ANSI): RIFF
            文件头.添加值到字节集 (数据.取字节集长度 () + 36)  // 格式块大小(整数),从下个地址到文件尾的长度(文件大小-8)
            文件头.添加字节集内容 (0x57, 0x41, 0x56, 0x45)  // 文件格式(ANSI): WAVE
            文件头.添加字节集内容 (0x66, 0x6D, 0x74, 0x20)  // 格式块ID(ANSI): fmt
            文件头.添加值到字节集 (16)  // 格式块的大小(整数): 16
            如果 (位深度 == BASS_位深度.位深_32位)
            {
                文件头.添加值到字节集 ((短整数)3)  // 编码格式(短整数): 3=IEEE_FLOAT
            }
            否则
            {
                文件头.添加值到字节集 ((短整数)1)  // 编码格式(短整数): 1=线性PCM编码
            }
            文件头.添加值到字节集 ((短整数)声道)  // 声道数(短整数): 1=单声道, 2=立体声
            文件头.添加值到字节集 (采样率)  // 采样率(整数)
            文件头.添加值到字节集 ((整数)位深度 * 采样率 * 声道 / 8)  // 比特率(整数): 平均数据传输率(每秒平均字节数)
            文件头.添加值到字节集 ((短整数)(声道 * (整数)位深度 / 8))  // 采样帧大小(短整数): 块对齐
            文件头.添加值到字节集 ((短整数)位深度)  // 位深度(短整数): 每个采样点的比特值
            文件头.添加字节集内容 (0x64, 0x61, 0x74, 0x61)  // 数据块ID(ANSI): data
            文件头.添加值到字节集 (数据.取字节集长度 ())  // 数据区大小(整数):
            数据.插入字节集 (0, 文件头)
            返回 (真)
        }
    }

    方法 取文件名无路径无后缀部分 <公开 静态 类型 = 文本型 折叠>
    参数 文件名 <类型 = 文本型>
    {
        变量 临时文本 <类型 = 文本型>
        变量 找到位置 <类型 = 整数>
        临时文本 = 取文件名无路径部分 (文件名)
        找到位置 = 倒找字符 (临时文本, '.')
        如果 (找到位置 != -1)
        {
            临时文本 = 取文本左边 (临时文本, 找到位置)

        }
        返回 (临时文本)
    }

    方法 秒格式化 <公开 静态 类型 = 文本型 折叠>
    参数 秒 <类型 = 小数>
    {
        变量 秒长 <类型 = 整数>
        变量 分长 <类型 = 整数>
        秒长 = (整数)四舍五入 (秒)
        分长 = 秒长 / 60
        返回 (取格式文本 ("%d:%02d", 分长 / 60, 分长 % 60, 秒长 % 60))
    }

    方法 取低16位 <公开 静态 类型 = 整数 注释 = "LOWORD" 折叠 @嵌入式方法 = "">
    参数 欲取低位的值 <类型 = 整数>
    {
        @ (INT)(WORD)@<欲取低位的值>
    }

    方法 取高16位 <公开 静态 类型 = 整数 注释 = "HIWORD" 折叠 @嵌入式方法 = "">
    参数 欲取高位的值 <类型 = 整数>
    {
        @ (INT)(WORD)(@<欲取高位的值> >> 16)
    }

    方法 取低8位 <公开 静态 类型 = 整数 注释 = "LOBYTE" 折叠 @嵌入式方法 = "">
    参数 欲取低位的值 <类型 = 整数>
    {
        @ (INT)(BYTE)@<欲取低位的值>
    }

    方法 取高8位 <公开 静态 类型 = 整数 注释 = "HIBYTE" 折叠 @嵌入式方法 = "">
    参数 欲取高位的值 <类型 = 整数>
    {
        @ (INT)(BYTE)(@<欲取高位的值> >> 8)
    }

    方法 MAKEWORD <公开 静态 类型 = 整数 注释 = "MAKEWORD" 折叠 @嵌入式方法 = "">
    参数 低字节序 <类型 = 整数>
    参数 高字节序 <类型 = 整数>
    {
        @ (INT)(WORD)(((@<低字节序>) & 0xff) | ((@<高字节序>) << 8))
    }

    方法 MAKELONG <公开 静态 类型 = 整数 注释 = "MAKELONG" 折叠 @嵌入式方法 = "">
    参数 低字节序 <类型 = 整数>
    参数 高字节序 <类型 = 整数>
    {
        @ (INT)(DWORD)(((@<低字节序>) & 0xFFFF) | ((@<高字节序>) << 16))
    }
}

# 信息类型和标志等

类 BASS_设备信息 <公开 基础类 = PIV结构模板 注释 = "\"取设备信息/BASS_GetDeviceInfo\"返回的信息" 折叠 @文档 = "category = \"辅助类\""
        @别名 = "BASS_DEVICEINFO" @别名类型 = 本地结构 @模板实现类 = "BASS_设备信息">
{
    方法 名称 <公开 静态 属性读 类型 = 文本型 注释 = "设备名称和描述" 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = BASS_设备信息>
    {
        @ @an<CVolString>(@<欲操作本对象>.name)
    }

    方法 驱动程序 <公开 静态 属性读 类型 = 文本型 注释 = "驱动程序的识别ID" 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = BASS_设备信息>
    {
        @ @an<CVolString>(@<欲操作本对象>.driver)
    }

    变量 标志 <公开 类型 = 整数 注释 = "设备当前的状态,为\"BASS_设备信息标志\"的组合值,可以用位与比较" @输出名 = "flags">

    方法 取展示内容 <公开 静态 类型 = 文本型 注释 = "将本对象中的所有数据用文本方式返回,用作调试或其它场合展示时使用." 折叠>
    参数 欲操作本对象 <类型 = BASS_设备信息>
    {
        返回 (取格式文本 ("<BASS_设备信息/BASS_DEVICEINFO> 总共 3 个成员:\r\n1. 名称: %s\r\n2. 驱动程序: %s\r\n2. 标志: %u", 欲操作本对象.名称, 欲操作本对象.驱动程序, 欲操作本对象.标志))
    }
}

类 BASS_设备信息数组 <公开 基础类 = PIV数组模板 @文档 = "category = \"辅助类\"" @模板实现类 = "BASS_设备信息">

类 BASS_插件信息 <公开 基础类 = PIV指针模板 注释 = "\"取插件信息/BASS_PluginGetInfo\"返回的信息" 折叠 @文档 = "category = \"辅助类\""
        @别名 = "const BASS_PLUGININFO*" @别名类型 = 本地参考类型 @模板实现类 = "BASS_插件信息">
{
    变量 插件版本 <公开 类型 = 整数 注释 = "插件版本号" @输出名 = "version">
    变量 格式数量 <公开 类型 = 整数 注释 = "支持的格式数量" @输出名 = "formatc">
    变量 支持格式 <公开 类型 = BASS_插件格式数组 注释 = "支持格式的数组" @输出名 = "formats">

    方法 取展示内容 <公开 静态 类型 = 文本型 注释 = "将本对象中的所有数据用文本方式返回,用作调试或其它场合展示时使用." 折叠>
    参数 欲操作本对象 <类型 = BASS_插件信息>
    {
        变量 展示内容 <类型 = 文本型>
        加入格式文本 (展示内容, "<BASS_插件信息/BASS_PLUGININFO> 总共 3 个成员:\r\n1. 插件版本: %u\r\n2. 格式数量: %u\r\n2. 支持格式: \r\n", 欲操作本对象.插件版本, 欲操作本对象.格式数量)
        加入多行文本 (展示内容, 欲操作本对象.支持格式.取展示内容 (欲操作本对象.格式数量), 2)
        返回 (展示内容)
    }
}

类 BASS_插件信息数组 <公开 基础类 = PIV数组模板 @文档 = "category = \"辅助类\"" @模板实现类 = "BASS_插件信息">

类 BASS_插件格式 <公开 基础类 = PIV结构模板 注释 = "\"BASS_插件信息\"中的支持格式成员" 折叠 @文档 = "category = \"辅助类\""
        @别名 = "BASS_PLUGINFORM" @别名类型 = 本地结构 @模板实现类 = "BASS_插件信息">
{
    变量 通道类型 <公开 类型 = 整数 注释 = "音轨的类型,如\"BASS_音轨信息\"结构中所示" @输出名 = "ctype">

    方法 格式描述 <公开 静态 属性读 类型 = 文本型 注释 = "文件格式的描述" 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = BASS_插件格式>
    {
        @ @an<CVolString>(@<欲操作本对象>.name)
    }

    方法 格式扩展名 <公开 静态 属性读 类型 = 文本型 注释 = "文件格式的扩展名" 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = BASS_插件格式>
    {
        @ @an<CVolString>(@<欲操作本对象>.exts)
    }

    方法 取展示内容 <公开 静态 类型 = 文本型 注释 = "将本对象中的所有数据用文本方式返回,用作调试或其它场合展示时使用." 折叠>
    参数 欲操作本对象 <类型 = BASS_插件格式>
    {
        返回 (取格式文本 ("<BASS_插件格式/BASS_PLUGINFORM> 总共 3 个成员:\r\n1. 通道类型: %u\r\n2. 格式描述: %s\r\n2. 格式扩展名: %s", 欲操作本对象.通道类型, 欲操作本对象.格式描述, 欲操作本对象.格式扩展名))
    }
}

类 BASS_插件格式数组 <公开 折叠 @文档 = "category = \"辅助类\"" @别名 = "const BASS_PLUGINFORM*" @别名类型 = 本地参考类型>
{
    方法 取成员 <公开 静态 类型 = BASS_插件格式 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = BASS_插件格式数组>
    参数 索引 <类型 = 整数>
    {
        @ @<欲操作本对象>[@<索引>]
    }

    方法 取展示内容 <公开 静态 类型 = 文本型 注释 = "将本对象中的所有数据用文本方式返回,用作调试或其它场合展示时使用." 折叠>
    参数 欲操作本对象 <类型 = BASS_插件格式数组>
    参数 成员数 <类型 = 整数 @默认值 = 0>
    {
        变量 展示内容 <类型 = 文本型>
        加入格式文本 (展示内容, "<BASS_插件格式数组> 总共 %d 个成员:\r\n", 成员数)
        计次循环 (成员数)
        {
            加入格式文本 (展示内容, "%d. ", 取循环索引 ())
            加入多行文本 (展示内容, 欲操作本对象.取成员 (取循环索引 ()).取展示内容 (), 2)
        }
        返回 (展示内容)
    }
}

类 BASS_录制信息 <公开 基础类 = PIV结构模板 注释 = "\"取录制信息/BASS_RecordGetInfo\"返回的信息" 折叠 @文档 = "category = \"辅助类\""
        @别名 = "BASS_RECORDINFO" @别名类型 = 本地结构 @模板实现类 = "BASS_录制信息">
{
    变量 标志 <公开 类型 = 整数 注释 = "DSCCAPS_EMULDRIVER 0x00000020 设备的驱动程序不支持DirectSound,因此只能模拟输出"
            注释 = "DSCCAPS_CERTIFIED 0x00000040 设备的驱动程序已通过Microsoft认证,此标志始终设置在WDM驱动程序上" @输出名 = "flags">
    变量 支持格式 <公开 类型 = 整数 注释 = "支持的标准格式,\"BASS_WAVE格式\"类中的 WAVE_FORMAT_xxx 标志" @输出名 = "formats">
    变量 输入数量 <公开 类型 = 整数 注释 = "设备可用的输入源数" @输出名 = "inputs">
    变量 单独输入 <公开 类型 = 逻辑型 注释 = "是否一次只能有一个输入处于活动状态" @输出名 = "singlein">
    变量 采样率 <公开 类型 = 整数 注释 = "设备的当前采样率。由于不需要重新采样，因此以此速率录制将提供最佳质量和性能" @输出名 = "freq">

    方法 取展示内容 <公开 静态 类型 = 文本型 注释 = "将本对象中的所有数据用文本方式返回,用作调试或其它场合展示时使用." 折叠>
    参数 欲操作本对象 <类型 = BASS_录制信息>
    {
        变量 格式文本 <类型 = 文本型
                值 = "<BASS_录制信息/BASS_RECORDINFO> 总共 5 个成员:\r\n1. 标志: %u\r\n2. 支持格式: %u\r\n3. 输入数量: %u\r\n4. 单独输入: %s\r\n5. 采样率: %u">
        返回 (取格式文本 (格式文本, 欲操作本对象.标志, 欲操作本对象.支持格式, 欲操作本对象.输入数量, 选择 (欲操作本对象.单独输入, "真", "假"), 欲操作本对象.采样率))
    }
}

类 BASS_WAVE格式 <公开 注释 = "\"BASS_录制信息\"类中支持格式的值范围" 折叠 @文档 = "category = \"常量\"">
{
    常量 WAVE_FORMAT_1M08 <公开 类型 = 整数 值 = @WAVE_FORMAT_1M08 注释 = "11.025 kHz, Mono,   8-bit">
    常量 WAVE_FORMAT_1S08 <公开 类型 = 整数 值 = @WAVE_FORMAT_1S08 注释 = "11.025 kHz, Stereo, 8-bit">
    常量 WAVE_FORMAT_1M16 <公开 类型 = 整数 值 = @WAVE_FORMAT_1M16 注释 = "11.025 kHz, Mono,   16-bit">
    常量 WAVE_FORMAT_1S16 <公开 类型 = 整数 值 = @WAVE_FORMAT_1S16 注释 = "11.025 kHz, Stereo, 16-bit">
    常量 WAVE_FORMAT_2M08 <公开 类型 = 整数 值 = @WAVE_FORMAT_2M08 注释 = "22.05  kHz, Mono,   8-bit">
    常量 WAVE_FORMAT_2S08 <公开 类型 = 整数 值 = @WAVE_FORMAT_2S08 注释 = "22.05  kHz, Stereo, 8-bit">
    常量 WAVE_FORMAT_2M16 <公开 类型 = 整数 值 = @WAVE_FORMAT_2M16 注释 = "22.05  kHz, Mono,   16-bit">
    常量 WAVE_FORMAT_2S16 <公开 类型 = 整数 值 = @WAVE_FORMAT_2S16 注释 = "22.05  kHz, Stereo, 16-bit">
    常量 WAVE_FORMAT_4M08 <公开 类型 = 整数 值 = @WAVE_FORMAT_4M08 注释 = "44.1   kHz, Mono,   8-bit">
    常量 WAVE_FORMAT_4S08 <公开 类型 = 整数 值 = @WAVE_FORMAT_4S08 注释 = "44.1   kHz, Stereo, 8-bit">
    常量 WAVE_FORMAT_4M16 <公开 类型 = 整数 值 = @WAVE_FORMAT_4M16 注释 = "44.1   kHz, Mono,   16-bit">
    常量 WAVE_FORMAT_4S16 <公开 类型 = 整数 值 = @WAVE_FORMAT_4S16 注释 = "44.1   kHz, Stereo, 16-bit">
}

类 BASS_设备信息标志 <公开 注释 = "设备信息的标志,可用于检查输出设备的类型" 折叠 @文档 = "category = \"常量\"">
{
    常量 BASS_DEVICE_ENABLED <公开 类型 = 整数 值 = @BASS_DEVICE_ENABLED 注释 = "设备已启用. 如果不存在此标志,则无法初始化设备."
            编辑时信息 = "33552, 0, 0, 0">
    常量 BASS_DEVICE_DEFAULT <公开 类型 = 整数 值 = @BASS_DEVICE_DEFAULT 注释 = "系统的默认设备" 编辑时信息 = "33552, 0, 0, 0">
    常量 BASS_DEVICE_INIT <公开 类型 = 整数 值 = @BASS_DEVICE_INIT
            注释 = "设备已初始化,即已调用\"初始化(BASS_Init)\"或\"初始化录制(BASS_RecordInit)\"" 编辑时信息 = "33552, 0, 0, 0">
    常量 BASS_DEVICE_LOOPBACK <公开 类型 = 整数 值 = @BASS_DEVICE_LOOPBACK
            注释 = "回放录制设备,它从输出设备捕获声音,可以通过具有相同的驱动程序数值来识别相应的输出设备." 编辑时信息 = "33552, 0, 0, 0">
    常量 BASS_DEVICE_DEFAULTCOM <公开 类型 = 整数 值 = @BASS_DEVICE_DEFAULTCOM 注释 = "系统默认的通信设备"
            编辑时信息 = "33552, 0, 0, 0">
    常量 "" <编辑时信息 = "33552, 0, 0, 0">
    常量 BASS_DEVICE_TYPE_MASK <公开 类型 = 整数 值 = @BASS_DEVICE_TYPE_MASK
            注释 = "掩码. 用来检查设备的类型,将标志的组合值与\"BASS_DEVICE_TYPE_MASK\"位与,即可得到设备类型的标志" 编辑时信息 = "33552, 0, 0, 0">
    常量 BASS_DEVICE_TYPE_NETWORK <公开 类型 = 整数 值 = @BASS_DEVICE_TYPE_NETWORK 注释 = "通过网络远程访问的音频终端设备"
            编辑时信息 = "33552, 0, 0, 0">
    常量 BASS_DEVICE_TYPE_SPEAKERS <公开 类型 = 整数 值 = @BASS_DEVICE_TYPE_SPEAKERS 注释 = "扬声器"
            编辑时信息 = "33552, 0, 0, 0">
    常量 BASS_DEVICE_TYPE_LINE <公开 类型 = 整数 值 = @BASS_DEVICE_TYPE_LINE
            注释 = "线路输出. 向音频解码器上的线路输入插孔发送线路电平模拟信号,或从解码器上的线路输出插孔接收线路电平模拟信号" 编辑时信息 = "33552, 0, 0, 0">
    常量 BASS_DEVICE_TYPE_HEADPHONES <公开 类型 = 整数 值 = @BASS_DEVICE_TYPE_HEADPHONES 注释 = "耳机"
            编辑时信息 = "33552, 0, 0, 0">
    常量 BASS_DEVICE_TYPE_MICROPHONE <公开 类型 = 整数 值 = @BASS_DEVICE_TYPE_MICROPHONE 注释 = "麦克风"
            编辑时信息 = "33552, 0, 0, 0">
    常量 BASS_DEVICE_TYPE_HEADSET <公开 类型 = 整数 值 = @BASS_DEVICE_TYPE_HEADSET 注释 = "一个头戴式耳机或一对耳机，带有用于双向通信的话筒"
            编辑时信息 = "33552, 0, 0, 0">
    常量 BASS_DEVICE_TYPE_HANDSET <公开 类型 = 整数 值 = @BASS_DEVICE_TYPE_HANDSET
            注释 = "电话听筒,手机的一部分,包括一个扬声器和一个用于双向通信的麦克风" 编辑时信息 = "33552, 0, 0, 0">
    常量 BASS_DEVICE_TYPE_DIGITAL <公开 类型 = 整数 值 = @BASS_DEVICE_TYPE_DIGITAL
            注释 = "数字接口. 通过未知类型的数字线缆连接到其他音频解码器" 编辑时信息 = "33552, 0, 0, 0">
    常量 BASS_DEVICE_TYPE_SPDIF <公开 类型 = 整数 值 = @BASS_DEVICE_TYPE_SPDIF
            注释 = "通过Sony/Philips数字接口(S/PDIF)线缆连接到音频解码器的音频终端设备" 编辑时信息 = "33552, 0, 0, 0">
    常量 BASS_DEVICE_TYPE_HDMI <公开 类型 = 整数 值 = @BASS_DEVICE_TYPE_HDMI
            注释 = "HDMI接口. 通过HDMI线缆连接到其他音频解码器的音频终端设备" 编辑时信息 = "33552, 0, 0, 0">
    常量 BASS_DEVICE_TYPE_DISPLAYPORT <公开 类型 = 整数 值 = @BASS_DEVICE_TYPE_DISPLAYPORT
            注释 = "DisplayPort接口. 通过DisplayPort线缆连接到其他音频解码器的音频终端设备" 编辑时信息 = "33552, 0, 0, 0">
}

类 BASS_3D矢量 <公开 基础类 = 扩展对象类 注释 = "3D空间音效的设置值" 折叠 @文档 = "category = \"辅助类\"">
{
    变量 x <公开 类型 = 单精度小数 注释 = "正数=右,负数=左">
    变量 y <公开 类型 = 单精度小数 注释 = "正数=上,负数=下">
    变量 z <公开 类型 = 单精度小数 注释 = "正数=前,负数=后">

    方法 取展示内容 <公开 注释 = "将本对象中的所有数据用文本方式填入到所提供的文本参数中,用作调试或其它场合展示时使用." 注释 = "" 折叠 @虚拟方法 = 可覆盖>
    参数 展示内容 <类型 = 文本型 注释 = "用作填入本对象中所有数据的展示文本">
    参数 最大展示数据尺寸 <类型 = 整数 注释 = "提供用户所指定的最大允许展示数据尺寸,小于0表示全部展示,等于0表示展示默认尺寸数据.">
    {
        加入格式文本 (展示内容, "<BASS_3D矢量/BASS_3DVECTOR>: {x: %f, y: %f, z:%f}", x, y, z)
    }

    # @begin
    # <> <include>
    # inline BASS_3DVECTOR* GetPtrMayNull() {
    #     return this->IsNullObject() ? nullptr : reinterpret_cast<BASS_3DVECTOR*>(&this->@<x>);
    # }
    # <> <include>
    # @end
}

类 BASS_样本 <公开 基础类 = PIV结构模板 注释 = "\"取样本信息/BASS_SampleGetInfo\"返回的信息" 折叠 @文档 = "category = \"辅助类\""
        @别名 = "BASS_SAMPLE" @别名类型 = 本地结构 @模板实现类 = "BASS_样本">
{
    变量 采样率 <公开 类型 = 整数 注释 = "freq, 默认播放采样率" @输出名 = "freq">
    变量 音量 <公开 类型 = 单精度小数 注释 = "volume，默认音量 (0-1)" @输出名 = "volume">
    变量 声像调节 <公开 类型 = 单精度小数 注释 = "pan，声像调节, -1(最左)到 +1(最右), 0 = 中间." @输出名 = "pan">
    变量 标志 <公开 类型 = 整数 注释 = "flags, BASS_SAMPLE_xxx 等标志" @输出名 = "flags">
    变量 数据长度 <公开 类型 = 整数 注释 = "length, 数据的字节长度" @输出名 = "length">
    变量 最大回放 <公开 类型 = 整数 注释 = "max，最大同步回放数量" @输出名 = "max">
    变量 原始比特率 <公开 类型 = 整数 注释 = "origres，原始比特率 0 = 未定义" @输出名 = "origres">
    变量 通道数量 <公开 类型 = 整数 注释 = "chans, 音轨数量" @输出名 = "chans">
    变量 最小间隔 <公开 类型 = 整数 注释 = "mingap, 两段音轨之间的最短创建时间(毫秒)" @输出名 = "mingap">
    变量 三维模式 <公开 类型 = 整数 注释 = "mode3d, BASS_3DMODE_xxx" @输出名 = "mode3d">
    变量 最小距离 <公开 类型 = 单精度小数 注释 = "mindist, 听众可以听到最大音量的距离" @输出名 = "mindist">
    变量 最大距离 <公开 类型 = 单精度小数 注释 = "maxdist, 听众听不到声音的最远距离" @输出名 = "maxdist">
    变量 内投影角度 <公开 类型 = 整数 注释 = "iangle, 内投影角度 0-360度" @输出名 = "iangle">
    变量 外投影角度 <公开 类型 = 整数 注释 = "oangle, 外投影角度 0-360度" @输出名 = "oangle">
    变量 外投影音量 <公开 类型 = 单精度小数 注释 = "outvol，0-1" @输出名 = "outvol">
    变量 vam <公开 类型 = 整数 注释 = "vam，未使用" @输出名 = "vam">
    变量 优先级 <公开 类型 = 整数 注释 = "priority，未使用" @输出名 = "priority">

    方法 取展示内容 <公开 静态 类型 = 文本型 注释 = "将本对象中的所有数据用文本方式返回,用作调试或其它场合展示时使用." 折叠>
    参数 欲操作本对象 <类型 = BASS_样本>
    {
        变量 格式文本 <类型 = 文本型
                值 = "<BASS_样本/BASS_SAMPLE> 总共 16 个成员:\r\n1. 采样率: %u\r\n2. 音量: %f\r\n3. 声像调节: %f\r\n4. 标志: %u\r\n5. 数据长度: %u\r\n5. 最大回放: %u\r\n6. 原始比特率: %u\r\n7. 通道数量: %u\r\n8. 最小间隔: %u\r\n9. 三维模式: %u\r\n10. 最小距离: %f\r\n11. 最大距离: %f\r\n12. 内投影角度: %u\r\n13. 外投影角度: %u\r\n14. 外投影音量: %f\r\n15. vam: %u\r\n16. 优先级: %u">
        返回 (取格式文本 (格式文本, 欲操作本对象.采样率, 欲操作本对象.音量, 欲操作本对象.声像调节, 欲操作本对象.标志, 欲操作本对象.数据长度, 欲操作本对象.最大回放, 欲操作本对象.原始比特率, 欲操作本对象.通道数量, 欲操作本对象.最小间隔, 欲操作本对象.三维模式, 欲操作本对象.最小距离, 欲操作本对象.最大距离, 欲操作本对象.内投影角度, 欲操作本对象.外投影角度, 欲操作本对象.外投影音量, 欲操作本对象.vam, 欲操作本对象.优先级))
    }
}

类 BASS_通道信息 <公开 基础类 = PIV结构模板 注释 = "\"取通道信息/BASS_ChannelGetInfo\"返回的信息" 折叠 @文档 = "category = \"辅助类\""
        @别名 = "BASS_CHANNELINFO" @别名类型 = 本地结构 @模板实现类 = "BASS_通道信息">
{
    变量 采样率 <公开 类型 = 整数 注释 = "默认采样率" @输出名 = "freq">
    变量 声道数 <公开 类型 = 整数 注释 = "1=单声道,2=立体声,以此类推" @输出名 = "chans">
    变量 标志 <公开 类型 = 整数 注释 = "为\"BASS_音频选项\"的组合值" @输出名 = "flags">
    变量 通道类型 <公开 类型 = 整数 注释 = "为\"BASS_音轨类型\"中的常量" @输出名 = "ctype">
    变量 原始比特率 <公开 类型 = 整数 注释 = "原始解析度(每个样本比特数). 0=未定义" 注释 = "如果原始样本格式为浮点格式,将设置BASS_ORIGRES_FLOAT标志,并且位数将为低位"
            @输出名 = "origres">
    变量 插件句柄 <公开 类型 = 整数 注释 = "音轨上应用的插件,0=未使用插件."
            注释 = "注意这仅适用于通过标准BASS流创建功能使用插件系统创建的流,而不是通过附加功能创建的流.有关插件的信息可以通过\"取插件信息(BASS_PlugingeInfo)\"获取"
            @输出名 = "plugin">
    变量 样本句柄 <公开 类型 = 整数 注释 = "音轨正在播放的样本,仅当\"音轨类型\"为BASS_CTYPE_SAMPLE或BASS_CTYPE_STREAM_SAMPLE时可用"
            @输出名 = "sample">

    方法 文件名 <公开 静态 属性读 类型 = 文本型 注释 = "音轨关联的文件名(仅限HSTREAM)" 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = BASS_通道信息>
    {
        @ @an<CVolString>((const wchar_t*)@<欲操作本对象>.filename)
    }

    方法 取展示内容 <公开 静态 类型 = 文本型 注释 = "将本对象中的所有数据用文本方式返回,用作调试或其它场合展示时使用." 折叠>
    参数 欲操作本对象 <类型 = BASS_通道信息>
    {
        变量 格式文本 <类型 = 文本型
                值 = "<BASS_通道信息/BASS_CHANNELINFO> 总共 8 个成员:\r\n1. 采样率: %u\r\n2. 声道数: %u\r\n3. 标志: %u\r\n4. 通道类型: %u\r\n5. 原始比特率: %u\r\n6. 插件句柄: %u\r\n7. 样本句柄: %u\r\n8. 文件名: %s">
        返回 (取格式文本 (格式文本, 欲操作本对象.采样率, 欲操作本对象.声道数, 欲操作本对象.标志, 欲操作本对象.通道类型, 欲操作本对象.原始比特率, 欲操作本对象.插件句柄, 欲操作本对象.样本句柄, 欲操作本对象.文件名))
    }
}

类 BASS_信息 <公开 基础类 = PIV结构模板 注释 = "\"取输出信息/BASS_GetInfo\"返回的信息" 折叠 @文档 = "category = \"辅助类\""
        @别名 = "BASS_INFO" @别名类型 = 本地结构 @模板实现类 = "BASS_信息">
{
    变量 标志 <公开 类型 = 整数 注释 = "设备的DirectSound功能,为以下常量的组合值："
            注释 = "DSCAPS_EMULDRIVER 0x00000020 设备的驱动程序不支持DirectSound,因此只能模拟输出"
            注释 = "DSCAPS_CERTIFIED 0x00000040 设备的驱动程序已通过Microsoft认证,此标志始终设置在WDM驱动程序上"
            注释 = "DSCAPS_HARDWARE 0x80000000 设备使用硬件混音来播放BASS输出,BASS声道的混音仍由BASS在软件中完成" @输出名 = "flags">
    变量 "// hwsize" <公开 类型 = 整数 注释 = "未使用" @输出名 = "hwsize">
    变量 "// hwfree" <公开 类型 = 整数 注释 = "未使用" @输出名 = "hwfree">
    变量 "// freesam" <公开 类型 = 整数 注释 = "未使用" @输出名 = "freesam">
    变量 "// free3d" <公开 类型 = 整数 注释 = "未使用" @输出名 = "free3d">
    变量 "// minrate" <公开 类型 = 整数 注释 = "未使用" @输出名 = "minrate">
    变量 "// maxrate" <公开 类型 = 整数 注释 = "未使用" @输出名 = "maxrate">
    变量 "// eax" <公开 类型 = 逻辑型 注释 = "未使用" @输出名 = "eax">
    变量 最小缓冲 <公开 类型 = 整数 注释 = "避免播放卡顿的最小缓冲长度(四舍五入到最接近的毫秒). 这是由 BASS_CONFIG_DEV_PERIOD 设置决定的."
            注释 = "注意: 如果缓冲更新不够频繁,使用缓冲长度仍可能出现卡顿. 如果需要最小延迟,最好通过BASS_ATTRIB_BUFFER选项禁用缓冲" @输出名 = "minbuf">
    变量 DirectSound版本 <公开 类型 = 整数 注释 = "DirectSound 版本"
            注释 = "9 = 支持DX9/8/7/5; 8 = 支持DX8/7/5; 7 = 支持DX7/5; 5 = 支持DX5; 0 = DX9/8/7/5都不支持" @输出名 = "dsver">
    变量 时延 <公开 类型 = 整数 注释 = "开始播放声道到听到声音的平均延迟(四舍五入至最接近的毫秒)" @输出名 = "latency">
    变量 初始化标志 <公开 类型 = 整数 注释 = "初始化(BASS_Init)时设置的设备标志,这里面包含了自动应用的标志" @输出名 = "initflags">
    变量 扬声器数量 <公开 类型 = 整数 注释 = "可用的扬声器数量" @输出名 = "speakers">
    变量 采样率 <公开 类型 = 整数 注释 = "当前的输出采样率" @输出名 = "freq">

    方法 取展示内容 <公开 静态 类型 = 文本型 注释 = "将本对象中的所有数据用文本方式返回,用作调试或其它场合展示时使用." 折叠>
    参数 欲操作本对象 <类型 = BASS_信息>
    {
        变量 格式文本 <类型 = 文本型
                值 = "<BASS_信息/BASS_INFO> 总共 6 个成员:\r\n1. 标志: %u\r\n2. DirectSound版本: %u\r\n3. 时延: %u\r\n4. 初始化标志: %u\r\n5. 扬声器数量: %u\r\n6. 采样率: %u">
        返回 (取格式文本 (格式文本, 欲操作本对象.标志, 欲操作本对象.最小缓冲, 欲操作本对象.DirectSound版本, 欲操作本对象.时延, 欲操作本对象.初始化标志, 欲操作本对象.扬声器数量, 欲操作本对象.采样率))
    }
}

类 BASS_配置选项 <公开 注释 = "\"置配置选项/BASS_SetConfig\"的选项,含部分扩展的配置" 折叠 @文档 = "category = \"常量\"">
{
    常量 BASS_CONFIG_BUFFER <公开 类型 = 整数 值 = @BASS_CONFIG_BUFFER 注释 = "流(HSTREAM)和MOD音乐(HMUSIC)通道的播放缓冲区长度."
            注释 = "参数: 缓冲区长度(单位为毫秒),最小长度为10ms,最大长度为5000ms,如果指定的长度超出此范围,则会自动将其封顶."
            注释 = "默认为500ms.更改后只影响以后创建的流,不影响现有的.">
    常量 BASS_CONFIG_UPDATEPERIOD <公开 类型 = 整数 值 = @BASS_CONFIG_UPDATEPERIOD
            注释 = "HSTREAM和HMUSIC通道播放缓冲区的更新周期." 注释 = "参数: 更新周期(单位为毫秒)...0=禁用自动更新,最小周期为5ms,最大周期为100ms. 默认为100ms."
            注释 = "更新周期是正在播放的HSTREAM/HMUSIC频道的播放缓冲器之间的更新时间.没有播放任何内容时,不会产生更新周期."
            注释 = "较短的更新周期允许使用BASS_CONFIG_BUFFER选项设置较小的缓冲区,但随着更新速率的增加,将占用更多的CPU."
            注释 = "更新周期仅影响HSTREAM和HMUSIC通道,它不影响样本,它对解码通道也没有任何影响."
            注释 = "BASS专门创建一个或多个线程(由BASS_CONFIG_UPDATETHREADS确定)来执行更新,除非禁用自动更新(周期=0),在这种情况下,应使用\"更新缓存/BASS_Update\"或\"更新通道缓存/BASS_ChannelUpdate\"."
            注释 = "这允许BASS的CPU使用率与软件的CPU使用率同步.例如在游戏循环中,你可以每帧调用一次\"更新缓存/BASS_Update\",以保持所有处理同步,从而使帧速率尽可能平滑."
            注释 = "更新周期可以随时更改,包括播放的时候.">
    常量 BASS_CONFIG_GVOL_SAMPLE <公开 类型 = 整数 值 = @BASS_CONFIG_GVOL_SAMPLE 注释 = "样本的全局音量级别."
            注释 = "参数: 0 (静音) 到 10000 (最大音量)." 注释 = "此配置选项允许你控制所有样本的音量级别,例如单独的音乐和效果音量控制."
            注释 = "通道的最终音量=通道音量x全局音量/10000. 例如,如果流的音量为0.5,全局音量为8000,则流的实际音量级别实际上为0.4 (0.5 x 8000/10000=0.4)">
    常量 BASS_CONFIG_GVOL_STREAM <公开 类型 = 整数 值 = @BASS_CONFIG_GVOL_STREAM 注释 = "流的全局音量级别."
            注释 = "参数: 0 (静音) 到 10000 (最大音量)." 注释 = "此配置选项允许你控制所有流的音量级别,例如单独的音乐和效果音量控制."
            注释 = "通道的最终音量=通道音量x全局音量/10000. 例如,如果流的音量为0.5,全局音量为8000,则流的实际音量级别实际上为0.4 (0.5 x 8000/10000=0.4)">
    常量 BASS_CONFIG_GVOL_MUSIC <公开 类型 = 整数 值 = @BASS_CONFIG_GVOL_MUSIC 注释 = "MOD音乐的全局音量级别."
            注释 = "参数: 0 (静音) 到 10000 (最大音量)." 注释 = "此配置选项允许你控制所有MOD音乐的音量级别,例如单独的音乐和效果音量控制."
            注释 = "通道的最终音量=通道音量x全局音量/10000. 例如,如果流的音量为0.5,全局音量为8000,则流的实际音量级别实际上为0.4 (0.5 x 8000/10000=0.4)">
    常量 BASS_CONFIG_CURVE_VOL <公开 类型 = 整数 值 = @BASS_CONFIG_CURVE_VOL 注释 = "音量值的平移曲线."
            注释 = "参数: 0(假)=线性, 1(真)=对数. 默认为线性曲线."
            注释 = "使用线性曲线时,音量范围为0%(静音)到100%(最高音量);使用对数曲线时,音量范围为-100 dB(有效静音)到0 dB(最高音量)."
            注释 = "例如,0.5的音量水平为50%线性或-50 dB对数">
    常量 BASS_CONFIG_CURVE_PAN <公开 类型 = 整数 值 = @BASS_CONFIG_CURVE_PAN 注释 = "声像值的平移曲线."
            注释 = "参数: 0(假)=线性, 1(真)=对数. 默认为线性曲线."
            注释 = "使用线性曲线时,声像值范围为0%(左声道)到100%(右声道);使用对数曲线时,声像值范围为-100 dB(左声道)到0 dB(右声道).">
    常量 BASS_CONFIG_FLOATDSP <公开 类型 = 整数 值 = @BASS_CONFIG_FLOATDSP 注释 = "是否将32位浮点样本数据传递给所有DSP回调函数？"
            注释 = "参数: 0(假)=不传递, 1(真)=将32位浮点样本数据传递给所有DSPPROC回调函数."
            注释 = "通常,DSP功能以通道使用的格式接收样本数据,即8、16或32位. 但当启用此配置选项时,BASS会将8/16位样本数据转换为32位浮点,再将其传递给DSP功能,然后在完成所有DSP功能后将其转换回.">
    常量 BASS_CONFIG_3DALGORITHM <公开 类型 = 整数 值 = @BASS_CONFIG_3DALGORITHM 注释 = "3D空间通道的定位算法."
            注释 = "参数: 以下选项之一,默认为0."
            注释 = "0 BASS_3DALG_DEFAULT 如果至少有4个扬声器可用(请参阅BASS_GetInfo),则声音在其中平移,否则等同于BASS_3DALG_OFF"
            注释 = "1 BASS_3DALG_OFF 仅在两个扬声器上使用左右平移" 注释 = "2 BASS_3DALG_FULL" 注释 = "3 BASS_3DALG_LIGHT">
    常量 BASS_CONFIG_NET_TIMEOUT <公开 类型 = 整数 值 = @BASS_CONFIG_NET_TIMEOUT 注释 = "等待服务器响应连接请求的时间."
            注释 = "参数: 参数: 等待时间(单位为毫秒),默认为5000ms(5秒)."
            注释 = "位或BASS_CONFIG_THREAD标志可使设置限定在当前线程生效. 当该值非零时,它将覆盖当前线程的全局设置."
            注释 = "当通过BASS_CONFIG_NET_PLAYLIST选项启用播放列表处理时,超时将应用于每个播放列表项目,而不是整个播放列表.">
    常量 BASS_CONFIG_NET_BUFFER <公开 类型 = 整数 值 = @BASS_CONFIG_NET_BUFFER 注释 = "网络下载缓冲区长度."
            注释 = "参数: 缓冲区长度(单位为毫秒),默认为5000ms.">
    常量 BASS_CONFIG_PAUSE_NOPLAY <公开 类型 = 整数 值 = @BASS_CONFIG_PAUSE_NOPLAY 注释 = "是否在暂停输出时阻止播放通道?"
            注释 = "参数: 0(假)=不阻止,1(真)=不在暂停输出时播放通道,默认为真."
            注释 = "当使用\"暂停输出(BASS_Pause)\"暂停输出且启用此配置选项时,在使用\"开始输出(BASS_Start)\"恢复输出之前,无法播放通道."
            注释 = "任何播放通道的尝试都将导致BASS错误.">
    常量 BASS_CONFIG_NET_PREBUF <公开 类型 = 整数 值 = @BASS_CONFIG_NET_PREBUF 注释 = "播放网络流之前的预缓冲区数量."
            注释 = "参数: 预缓冲区的数量(百分比)." 注释 = "此设置确定开始播放前应填充缓冲区长度的百分比(BASS_CONFIG_NET_BUFFER),默认值为75%,该参数为最小值."
            注释 = "BASS总是预先下载一定量的数据,以检测流的格式并初始化解码器.">
    常量 BASS_CONFIG_NET_PASSIVE <公开 类型 = 整数 值 = @BASS_CONFIG_NET_PASSIVE 注释 = "是否在FTP连接中使用被动模式?"
            注释 = "参数: 0(假)=不使用,1(真)=使用被动模式. 默认为真." 注释 = "更改将从下一个网络流开始生效.">
    常量 BASS_CONFIG_REC_BUFFER <公开 类型 = 整数 值 = @BASS_CONFIG_REC_BUFFER 注释 = "录制通道的缓冲区长度."
            注释 = "参数: 缓冲区长度(单位为毫秒)...10(最小)-5000(最大),如果指定的长度超出此范围,会自动将其封顶." 注释 = "默认录制缓冲区长度是2000毫秒."
            注释 = "与播放缓冲区不同,播放缓冲区的目的是使缓冲区保持满载,录制缓冲区则尽可能保持空,因此此设置对延迟没有影响."
            注释 = "除非你对录制数据的处理可能会导致明显的延迟,或者您希望在\"开始录制(BASS_RecordStart)\"中使用较长的记录时间,否则不需要增加该时间."
            注释 = "此配置选项仅影响之后创建的录制通道,而不影响现有的通道.">
    常量 BASS_CONFIG_NET_PLAYLIST <公开 类型 = 整数 值 = @BASS_CONFIG_NET_PLAYLIST 注释 = "何时处理PLS和M3U播放列表中的URL？"
            注释 = "参数: 0=从不, 1=仅在\"打开网络文件(BASS_StreamCreateURL)\"时, 2=在\"打开流文件(BASS_StreamCreateFile)\"和\"创建用户流文件(BASS_StreamCreateFileUser)\"时."
            注释 = "默认为禁用. 启用后,BASS将处理PLS和M3U播放列表,尝试每个URL,直到找到一个可以播放的URL.BASS_ChannelGetInfo可用于查找成功打开的URL."
            注释 = "支持嵌套播放列表,即一个播放列表可以包含另一个播放列表的URL. BASS_CONFIG_NET_PLAYLIST_DEPTH选项可限制嵌套的播放列表深度.">
    常量 BASS_CONFIG_MUSIC_VIRTUAL <公开 类型 = 整数 值 = @BASS_CONFIG_MUSIC_VIRTUAL 注释 = "渲染IT文件时使用的最大虚拟通道数."
            注释 = "参数: 虚拟通道的数量,0(最小)到512(最大).如果指定的值超出此范围,则会自动封顶."
            注释 = "默认为64. 此设置仅影响IT文件,因为其他MOD音乐格式没有虚拟通道. 更改仅适用于之后加载的文件.">
    常量 BASS_CONFIG_VERIFY <公开 类型 = 整数 值 = @BASS_CONFIG_VERIFY 注释 = "为验证/检测文件格式而要检查的数据量."
            注释 = "参数: 检查的数据量,单位为字节...1000(最小)到1000000(最大). 如果指定的值超出此范围,则会自动封顶." 注释 = "默认长度为16000字节."
            注释 = "在标准支持的文件格式中,此设置仅影响MP3/MP2/MP1格式的检测,但也用于附加组件(请参阅文档). 验证长度不包括可能在文件头找到的任何标记."
            注释 = "对于网络(和\"缓冲\"用户文件)流,可以用BASS_CONFIG_VERIFY_NET设置检查的数据量.">
    常量 BASS_CONFIG_UPDATETHREADS <公开 类型 = 整数 值 = @BASS_CONFIG_UPDATETHREADS 注释 = "用于更新播放缓冲区的线程数."
            注释 = "参数: 使用的线程数, 0=禁用自动更新. 默认为1" 注释 = "更新线程的数量决定了可以并行更新多少HSTREAM/HMUSIC通道的播放缓冲区. 每个线程一次可以处理一个通道."
            注释 = "默认使用单个线程,但可以使用其他线程来利用多个CPU核心. 一般而言,创建更多的线程不会比多内核的CPU更好,但是使用多个线程(即使只有一个CPU内核)的一个好处是,更新缓慢的通道不或拖慢其他通道的更新."
            注释 = "当禁用自动更新(线程=0)时,应改用\"更新缓存/BASS_Update\"或\"更新通道缓存/BASS_ChannelUpdate\"手动更新."
            注释 = "更新线程的数量可以随时更改,包括播放的时候.">
    常量 BASS_CONFIG_DEV_BUFFER <公开 类型 = 整数 值 = @BASS_CONFIG_DEV_BUFFER 注释 = "输出设备的缓冲区长度."
            注释 = "参数: 缓冲区长度(单位为毫秒)">
    常量 BASS_CONFIG_REC_LOOPBACK <公开 类型 = 整数 值 = @BASS_CONFIG_REC_LOOPBACK 注释 = "【文档没写】">
    常量 BASS_CONFIG_VISTA_TRUEPOS <公开 类型 = 整数 值 = @BASS_CONFIG_VISTA_TRUEPOS 注释 = "【文档没写】">
    常量 BASS_CONFIG_IOS_SESSION <公开 类型 = 整数 值 = @BASS_CONFIG_IOS_SESSION 注释 = "iOS上的音频会话配置."
            注释 = "参数: 为以下的选项之一."
            注释 = "1 BASS_IOS_SESSION_MIX, 允许同时收听其他应用程序.启用 AVAudioSessionCategoryOptionMixWithOthers"
            注释 = "2 BASS_IOS_SESSION_DUCK, 允许同时收听其他应用程序,但降低其音量. 启用 AVAudioSessionCategoryOptionDuckOthers"
            注释 = "3 BASS_IOS_SESSION_AMBIENT, 使用\"环境\"类别."
            注释 = "4 BASS_IOS_SESSION_SPEAKER, 将输出路由到扬声器而不是接收器. 启用AVAudioSessionCategoryOptionDefaultToSpeaker"
            注释 = "5 BASS_IOS_SESSION_DISABLE, 禁用BASS的音频会话配置管理,以便应用程序自行处理.">
    常量 BASS_CONFIG_IOS_MIXAUDIO <公开 类型 = 整数 值 = @BASS_CONFIG_IOS_MIXAUDIO 注释 = "【文档没写】">
    常量 BASS_CONFIG_DEV_DEFAULT <公开 类型 = 整数 值 = @BASS_CONFIG_DEV_DEFAULT 注释 = "是否在输出设备列表中包含\"默认\"选项?"
            注释 = "参数: 0(假)=不包含, 1(真)=\"默认\"设备将包含在设备列表中,默认为真." 注释 = "\"默认设备\"将映射到系统的默认设备,当系统更改了默认设备,BASS的输出也随之更改."
            注释 = "启用时,初始化(ASS_Init)的默认设备(-1)即为此\"默认\"设备.">
    常量 BASS_CONFIG_NET_READTIMEOUT <公开 类型 = 整数 值 = @BASS_CONFIG_NET_READTIMEOUT 注释 = "等待服务器为网络流提供更多数据的时间."
            注释 = "参数: 等待时间(单位为毫秒),默认为0,即不等待." 注释 = "超时之后,将断开与服务器的连接. 默认设置为0,没有超时. 更改只影响之后创建的流,不影响现有的流."
            注释 = "位或BASS_CONFIG_THREAD标志可使设置限定在当前线程生效. 当该值非零时,它将覆盖当前线程中的全局设置.">
    常量 BASS_CONFIG_VISTA_SPEAKERS <公开 类型 = 整数 值 = @BASS_CONFIG_VISTA_SPEAKERS 注释 = "【文档没写】">
    常量 BASS_CONFIG_IOS_SPEAKER <公开 类型 = 整数 值 = @BASS_CONFIG_IOS_SPEAKER 注释 = "【文档没写】">
    常量 BASS_CONFIG_MF_DISABLE <公开 类型 = 整数 值 = @BASS_CONFIG_MF_DISABLE 注释 = "是否禁用媒体Media Foundation？"
            注释 = "参数: 0(假)=禁用, 1(真)=禁用."
            注释 = "此选项确定Media Foundation编解码器是否可用于解码文件和流. 默认情况下,当系统为支持Media Foundation解码器的Windows 7及以上版本时,默认设置为加.否则,它将为真且为只读.">
    常量 BASS_CONFIG_HANDLES <公开 类型 = 整数 值 = @BASS_CONFIG_HANDLES
            注释 = "现有HMUSIC/HRECORD/HSAMPLE/HSTREAM句柄的数量."
            注释 = "参数: 只读选项,提供当前存在的HMUSIC/HRECORD/HSAMPLE/HSTREAM句柄总数."
            注释 = "可用于检测泄漏,即未缩放的句柄.一些附加功能可能会创建自己的句柄供内部使用,因此单个流可以将句柄总数增加(释放时减少)一个以上.">
    常量 BASS_CONFIG_UNICODE <公开 类型 = 整数 值 = @BASS_CONFIG_UNICODE 注释 = "是否在设备信息中使用Unicode字符集？"
            注释 = "参数: 0(假)=ANSI字符集, 1(真)=UTF-8字符集."
            注释 = "此配置选项确定\"BASS_设备信息/BASS_DEVICEINFO\"结构体和\"取录制设备名/BASS_RecordGetInputName\"函数使用的字符集."
            注释 = "默认设置为ANSI,只能在调用\"取设备信息/BASS_GetDeviceInfo\"、\"初始化/BASS_Init\"或\"取录制设备信息/BASS_RecordGetDeviceInfo\"或\"初始化录制设备/BASS_RecordInit\"之前更改.">
    常量 BASS_CONFIG_SRC <公开 类型 = 整数 值 = @BASS_CONFIG_SRC 注释 = "默认采样率转换品质."
            注释 = "参数: 0=线性插值, 1=8点sinc插值, 2=16点sinc插值, 3=32点sinc插值, 4=64点sinc插值. 也接受其他数值."
            注释 = "此配置选项确定新通道最初的采样率转换品质,但使用BASS_CONFIG_SRC_SAMPLE设置的样本通道(HCHANNEL)除外."
            注释 = "通道的采样率转换品质也可以在之后通过BASS_ATTRIB_SRC属性进行更改.">
    常量 BASS_CONFIG_SRC_SAMPLE <公开 类型 = 整数 值 = @BASS_CONFIG_SRC_SAMPLE 注释 = "样本通道的默认采样率转换品质."
            注释 = "参数: 0=线性插值, 1=8点sinc插值, 2=16点sinc插值, 3=32点sinc插值, 4=64点sinc插值. 也接受其他数值."
            注释 = "此配置选项确定在调用\"取样本通道/BASS_SampleGetChannel\"之后,新通道(HCHANNEL)最初的采样率转换品质."
            注释 = "通道的采样率转换品质也可以在之后通过BASS_ATTRIB_SRC属性进行更改">
    常量 BASS_CONFIG_ASYNCFILE_BUFFER <公开 类型 = 整数 值 = @BASS_CONFIG_ASYNCFILE_BUFFER 注释 = "读取异步文件的缓冲区长度."
            注释 = "参数: 缓冲区长度(单位为字节),自动四舍五入到最接近的4096字节(4KB)的值."
            注释 = "默认为64KB,更改后只影响以后创建的流,不影响现有的,因此在创建每个缓冲区之前使用此配置选项,可以使流具有不同的缓冲区长度.">
    常量 BASS_CONFIG_OGG_PRESCAN <公开 类型 = 整数 值 = @BASS_CONFIG_OGG_PRESCAN 注释 = "是否预扫描链接OGG文件?"
            注释 = "参数:  0(假)=不预扫描, 1(真)=预扫描链接OGG文件."
            注释 = "默认启用此选项,相当于在调用BASS_StreamCreateFile打开OGG文件时使用包含BASS_STREAM_PRESCAN标志."
            注释 = "如果禁用,链接OGG文件的扫描将延迟到第一次调用\"取通道长度/BASS_ChannelGetLength\"或\"置播放位置/BASS_ChannelSetPosition\"的时候,以便更快地创建流.">
    常量 BASS_CONFIG_MF_VIDEO <公开 类型 = 整数 值 = @BASS_CONFIG_MF_VIDEO 注释 = "是否使用Media Foundation播放视频文件里的音频?"
            注释 = "参数:  0(假)=不支持, 1(真)=支持播放视频文件. 默认为假.">
    常量 BASS_CONFIG_AIRPLAY <公开 类型 = 整数 值 = @BASS_CONFIG_AIRPLAY 注释 = "【文档没写】">
    常量 BASS_CONFIG_DEV_NONSTOP <公开 类型 = 整数 值 = @BASS_CONFIG_DEV_NONSTOP 注释 = "当输出设备上没有播放任何内容时,是否停止输出设备?"
            注释 = "参数: 0(假)=停止, 1(真)=没有播放任何内容时,样本数据仍继续发送到输出设备. 默认为假.">
    常量 BASS_CONFIG_IOS_NOCATEGORY <公开 类型 = 整数 值 = @BASS_CONFIG_IOS_NOCATEGORY 注释 = "【文档没写】">
    常量 BASS_CONFIG_VERIFY_NET <公开 类型 = 整数 值 = @BASS_CONFIG_VERIFY_NET 注释 = "为验证/检测网络流的文件格式而要检查的数据量."
            注释 = "参数: 检查的数据量,单位为字节...1000(最小)到1000000(最大), 0=BASS_CONFIG_VERIFY设置的25%(最小值为1000字节). 如果指定的值超出此范围,则会自动封顶."
            注释 = "默认设置为0,这代表需要BASS_CONFIG_VERIFY设置值的25%."
            注释 = "在标准支持的文件格式中,此设置仅影响MP3/MP2/MP1格式的检测,但也用于附加组件(请参阅文档). 验证长度不包括可能在文件头找到的任何标记."
            注释 = "与网络流一样,此配置设置也适用于使用\"创建用户流文件/BASS_StreamCreateFileUser\"创建的\"缓冲\"用户文件流.">
    常量 BASS_CONFIG_DEV_PERIOD <公开 类型 = 整数 值 = @BASS_CONFIG_DEV_PERIOD 注释 = "输出设备的更新周期."
            注释 = "参数: 更新周期(单位为毫秒),如果为负数,则以样本为单位." 注释 = "默认为10ms,更改后只影响之后创建的流."
            注释 = "设备的更新周期确定数据生成和放置在输出设备缓冲区中的频率. 较短的周期允许较小的缓冲区和较低的延迟,但可能占用更多的CPU.">
    常量 BASS_CONFIG_FLOAT <公开 类型 = 整数 值 = @BASS_CONFIG_FLOAT 注释 = "是否支持浮点样本数据?"
            注释 = "参数: 只读选项,只能取参数,获取的值为0(假)=不支持, 1(真)=支持."
            注释 = "不支持浮点数据时,BASS_CONFIG_FLOATDSP选项仍可用,但它将导致DSPPROC函数接收8.24定点数据而不是浮点数据">
    常量 BASS_CONFIG_NET_SEEK <公开 类型 = 整数 值 = @BASS_CONFIG_NET_SEEK 注释 = "【文档没写】">
    常量 BASS_CONFIG_AM_DISABLE <公开 类型 = 整数 值 = @BASS_CONFIG_AM_DISABLE 注释 = "是否禁用Android媒体编解码?"
            注释 = "参数: 0(假)=不禁用, 1(真)=禁用. 安卓4.1及以上版本默认为假,其他版本默认为真且不能修改.">
    常量 BASS_CONFIG_NET_PLAYLIST_DEPTH <公开 类型 = 整数 值 = @BASS_CONFIG_NET_PLAYLIST_DEPTH 注释 = "最大嵌套播放列表处理深度."
            注释 = "参数: 0=不处理嵌套的播放列表."
            注释 = "当通过BASS_CONFIG_NET_PLAYLIST选项启用播放列表处理时,此选项限制\"打开网络文件(BASS_StreamCreateURL)\"嵌套播放列表的深度."
            注释 = "默认深度为1，这意味着将处理根播放列表中的播放列表.">
    常量 BASS_CONFIG_NET_PREBUF_WAIT <公开 类型 = 整数 值 = @BASS_CONFIG_NET_PREBUF_WAIT 注释 = "打开网络流时是否等待预缓冲?"
            注释 = "参数: 0(假)=不等待, 1(真)=等待预缓冲, 默认设置为假."
            注释 = "此设置确定\"打开网络文件(BASS_StreamCreateURL)\"是否在返回新流的句柄之前等待下载一定量的数据."
            注释 = "该数据量由BASS_CONFIG_NET_BUFFER和BASS_FILEPOS_BUFFERING设置确定. 默认不等待,这意味着预缓冲将异步进行,并且在进行预缓冲时,播放将以暂停状态开始."
            注释 = "可以使用\"取流文件位置/BASS_StreamGetFilePosition(BASS_FILEPOS_BUFFERING)\"监控进度.">
    常量 BASS_CONFIG_ANDROID_SESSIONID <公开 类型 = 整数 值 = @BASS_CONFIG_ANDROID_SESSIONID
            注释 = "设置安卓用于输出的音频的会话ID." 注释 = "参数: 会话ID">
    常量 BASS_CONFIG_WASAPI_PERSIST <公开 类型 = 整数 值 = @BASS_CONFIG_WASAPI_PERSIST 注释 = "是否跨会话保留Windows的合成器设置?"
            注释 = "参数: 0=假,1=真,Windows合成器设置将在会话间保持. 默认为真."
            注释 = "使用WASAPI输出时,此选项确定Windows合成器中的音量和静音设置是否会在会话间保持,即下次应用程序运行时."
            注释 = "在Windows Vista及更高版本上使用DirectSound输出时,这些设置始终保持不变.">
    常量 BASS_CONFIG_REC_WASAPI <公开 类型 = 整数 值 = @BASS_CONFIG_REC_WASAPI 注释 = "是否使用WASAPI进行录制?"
            注释 = "参数: 0(假)=不启用, 1(真)=启用WASAPI."
            注释 = "从回放设备录制时将始终使用WASAPI,此配置选项确定从其他设备录制时是使用WASAPI还是使用DirectSound."
            注释 = "当WASAPI可用时默认启用(在Windows Vista及更高版本上)."
            注释 = "更改从下一次调用\"初始化录制(BASS_RecordInit)\"开始生效,现在已初始化的设备不受影响.">
    常量 BASS_CONFIG_ANDROID_AAUDIO <公开 类型 = 整数 值 = @BASS_CONFIG_ANDROID_AAUDIO 注释 = "是否在安卓上启用AAudio输出?"
            注释 = "参数: 0(假)=不启用, 1(真)=启用. 安卓4.1及以上版本默认为假,其他版本默认为真且不能修改."
            注释 = "AAudio仅在在Android 8.1及以上版本可用,且默认设置为真,而在早期Android版本上为假.">
    常量 BASS_CONFIG_SAMPLE_ONEHANDLE <公开 类型 = 整数 值 = @BASS_CONFIG_SAMPLE_ONEHANDLE
            注释 = "是否对样本及其单个播放通道使用相同的句柄?" 注释 = "参数: 0(假)=使用不同的句柄,1(真)=使用一样的句柄."
            注释 = "当样本限制为只有一个通道(\"打开样本xx/BASS_SampleLoad\"或\"创建样本/BASS_SampleCreate\"的最大回放为1)时,样本(HSAMPLE)及其播放通道(HCHANNEL)将使用相同的句柄."
            注释 = "使用相同的句柄时,仍需要调用\"取样本通道/BASS_SampleGetChannel\"来创建播放通道."
            注释 = "默认启用此配置选项,更改从下一次调用\"取样本通道/BASS_SampleGetChannel\"开始生效.">
    常量 BASS_CONFIG_NET_META <公开 类型 = 整数 值 = @BASS_CONFIG_NET_META 注释 = "是否从网络服务器请求Shoutcast的元数据?"
            注释 = "参数: 0(假)=不请求,1(真)=请求. 默认为真."
            注释 = "默认情况下，BASS将在打开URL时从服务器请求Shoutcast元数据,该URL可从\"取通道标签/BASS_ChannelGetTags(BASS_TAG_META)\"获取."
            注释 = "如果不需要Shoutcast元数据,可以禁用该选项以节省一点带宽.">
    常量 BASS_CONFIG_NET_RESTRATE <公开 类型 = 整数 值 = @BASS_CONFIG_NET_RESTRATE 注释 = "限制网络文件流的下载速率."
            注释 = "参数: 下载速度(bytes/s),默认设置为20000" 注释 = "此设置确定通过BASS_STREAM_RESTRATE标志启用网络文件流下载速度限制的的最大下载速度."
            注释 = "只有当流的缓冲数据超过其BASS_CONFIG_NET_BUFFER设置时,速度限制才会生效,否则下载速度将不受限."
            注释 = "请注意,设置过低可能会导致服务器在下载完成之前关闭(超时)连接."
            注释 = "更改只影响以后创建的流,而不影响现有的流. 与网络流一样,此配置设置也适用于使用\"创建用户流文件/BASS_StreamCreateFileUser\"创建的\"缓冲\"用户文件流.">
    常量 BASS_CONFIG_REC_DEFAULT <公开 类型 = 整数 值 = @BASS_CONFIG_REC_DEFAULT 注释 = "是否在录制设备列表中包含\"默认\"条目?"
            注释 = "参数: 0=假, 1=真(默认值) 将在录制设备列表中添加一个\"默认\"条目.">
    常量 BASS_CONFIG_NORAMP <公开 类型 = 整数 值 = @BASS_CONFIG_NORAMP 注释 = "默认的淡入淡出播放设置."
            注释 = "参数: 0=启用淡入淡出(默认值), 1=禁用淡入淡出, 2=仅禁用淡入, 3=仅禁用淡出" 注释 = "此配置选项仅影响新通道的属性设置,现有的通道不受更改的影响.">
    常量 BASS_CONFIG_THREAD <公开 类型 = 整数 值 = @BASS_CONFIG_THREAD 注释 = "标志: 将设置限定在当前线程中">
    常量 ""
    常量 BASS_CONFIG_MIXER_BUFFER <公开 类型 = 整数 值 = 0x10601 注释 = "【BASS混合器类】源通道的缓冲区长度."
            注释 = "参数: 缓冲区长度,其中1到5是BASS_CONFIG_BUFFER设置(在\"创建混合流\"时)的倍数,其他则是以毫秒为单位的绝对长度.">
    常量 BASS_CONFIG_MIXER_POSEX <公开 类型 = 整数 值 = 0x10602
            注释 = "【BASS混合器类】保持源位置记录的时间间隔，以便为BASS_Mixer_ChannelGetPositionEx提供可用的时间间隔." 注释 = "参数: 返回时间的长度(单位为毫秒)">
    常量 BASS_CONFIG_SPLIT_BUFFER <公开 类型 = 整数 值 = 0x10610 注释 = "【BASS混合器类】分离器的缓冲区长度." 注释 = "参数: 缓冲区长度(单位为毫秒)">
}

类 BASS_配置选项_指针 <公开 注释 = "请改用常量\"BASS_文本配置项\",本常量类将在2025年删除." 注释 = "\"置配置选项_指针/BASS_SetConfigPtr\"的选项"
        折叠 @文档 = "category = \"常量\"" @废弃 = 警告>
{
    常量 BASS_CONFIG_NET_AGENT <公开 类型 = 整数 值 = @BASS_CONFIG_NET_AGENT 注释 = "发送到服务器的\"User-Agent\"请求头."
            注释 = "参数: User-Agent的文本指针">
    常量 BASS_CONFIG_NET_PROXY <公开 类型 = 整数 值 = @BASS_CONFIG_NET_PROXY 注释 = "代理服务器设置."
            注释 = "参数: 设置的文本指针,以\"user:pass@server:port\"为格式, NULL=不使用代理, \"\"(空文本)=使用操作系统的默认代理设置."
            注释 = "如果只指定了\"user:pass@\"部分,则这些授权凭据将用于默认代理服务器. 如果只指定了\"server:port\"部分,则在没有任何授权凭据的情况下使用该代理服务器.">
    常量 BASS_CONFIG_LIBSSL <公开 类型 = 整数 值 = @BASS_CONFIG_LIBSSL 注释 = "用于处理HTTPS连接的OpenSSL库."
            注释 = "参数: OpenSSL库的文件名指针,NULL=使用默认值">
    常量 BASS_CONFIG_FILENAME <公开 类型 = 整数 值 = @BASS_CONFIG_FILENAME 注释 = "这是一个只读配置选项,用于获取加载的BASS库的完整路径.">
    常量 BASS_CONFIG_THREAD <公开 类型 = 整数 值 = @BASS_CONFIG_THREAD 注释 = "标志: 将设置限定在当前线程中">
    常量 BASS_UNICODE <类型 = 整数 值 = @BASS_UNICODE 注释 = "使用UTF-16编码的文本">
}

类 BASS_文本配置项 <公开 注释 = "\"置文本配置项/BASS_SetConfigPtr\"的选项" 折叠 @文档 = "category = \"常量\"">
{
    常量 BASS_CONFIG_NET_AGENT <公开 类型 = 整数 值 = @BASS_CONFIG_NET_AGENT 注释 = "发送到服务器的\"User-Agent\"请求头."
            注释 = "参数: User-Agent文本">
    常量 BASS_CONFIG_NET_PROXY <公开 类型 = 整数 值 = @BASS_CONFIG_NET_PROXY 注释 = "代理服务器设置."
            注释 = "参数: 以\"user:pass@server:port\"为格式, 空对象(NULL)=不使用代理, \"\"(空文本)=使用操作系统的默认代理设置."
            注释 = "如果只指定了\"user:pass@\"部分,则这些授权凭据将用于默认代理服务器. 如果只指定了\"server:port\"部分,则在没有任何授权凭据的情况下使用该代理服务器.">
    常量 BASS_CONFIG_LIBSSL <公开 类型 = 整数 值 = @BASS_CONFIG_LIBSSL 注释 = "用于处理HTTPS连接的OpenSSL库."
            注释 = "参数: OpenSSL库的文件名,空对象(NULL)=使用默认值">
    常量 BASS_CONFIG_FILENAME <公开 类型 = 整数 值 = @BASS_CONFIG_FILENAME 注释 = "这是一个只读配置选项,用于获取加载的BASS库的完整路径.">
    常量 BASS_CONFIG_THREAD <公开 类型 = 整数 值 = @BASS_CONFIG_THREAD 注释 = "标志: 将设置限定在当前线程中">
    常量 BASS_UNICODE <类型 = 整数 值 = @BASS_UNICODE 注释 = "使用UTF-16编码的文本">
}

类 BASS_设备标志 <公开 注释 = "\"初始化/BASS_Init\"时使用的标志" 折叠 @文档 = "category = \"常量\"">
{
    常量 BASS_DEVICE_8BITS <公开 类型 = 整数 值 = @BASS_DEVICE_8BITS 注释 = "【未使用】8位输出">
    常量 BASS_DEVICE_MONO <公开 类型 = 整数 值 = @BASS_DEVICE_MONO 注释 = "单声道输出">
    常量 BASS_DEVICE_3D <公开 类型 = 整数 值 = @BASS_DEVICE_3D 注释 = "【未使用】3D空间音效">
    常量 BASS_DEVICE_16BITS <公开 类型 = 整数 值 = @BASS_DEVICE_16BITS 注释 = "限制输出位深为16位">
    常量 BASS_DEVICE_REINIT <公开 类型 = 整数 值 = @BASS_DEVICE_REINIT
            注释 = "重新初始化设备,同时保留设备现有的BASS声道和3D设置. 此标志不能与设备-1一起使用">
    常量 BASS_DEVICE_LATENCY <公开 类型 = 整数 值 = @BASS_DEVICE_LATENCY 注释 = "【未使用】时延">
    常量 BASS_DEVICE_CPSPEAKERS <公开 类型 = 整数 值 = @BASS_DEVICE_CPSPEAKERS 注释 = "【未使用】CP扬声器">
    常量 BASS_DEVICE_SPEAKERS <公开 类型 = 整数 值 = @BASS_DEVICE_SPEAKERS 注释 = "强制启用扬声器分配">
    常量 BASS_DEVICE_NOSPEAKER <公开 类型 = 整数 值 = @BASS_DEVICE_NOSPEAKER
            注释 = "忽略扬声器分配. 使BASS不特别考虑扬声器的分配,例如: 在 5/7.1 扬声器中更换了中央扬声器和后扬声器,此选项将使用普通多声道(而不是5/7.1)">
    常量 BASS_DEVICE_DMIX <公开 类型 = 整数 值 = @BASS_DEVICE_DMIX
            注释 = "使用ALSA\"dmix\"插件初始化设备,否则设备将初始化为独占访问. 如果没有此项时设备无法完成初始化,则自动应用此选项">
    常量 BASS_DEVICE_FREQ <公开 类型 = 整数 值 = @BASS_DEVICE_FREQ 注释 = "将设备的输出频率设置为初始化的采样率参数,否则保持原样">
    常量 BASS_DEVICE_STEREO <公开 类型 = 整数 值 = @BASS_DEVICE_STEREO 注释 = "限制输出立体声,有超过2个扬声器时使用此项可降低CPU使用率">
    常量 BASS_DEVICE_HOG <公开 类型 = 整数 值 = @BASS_DEVICE_HOG 注释 = "切换HGO和独占模式">
    常量 BASS_DEVICE_AUDIOTRACK <公开 类型 = 整数 值 = @BASS_DEVICE_AUDIOTRACK
            注释 = "初始化设备以使用AudioTrack输出,而不是OpenSL ES或AAudio. 如果OpenSL ES和AAudio不可用(Android 2.3之前版本),则自动应用此选项">
    常量 BASS_DEVICE_DSOUND <公开 类型 = 整数 值 = @BASS_DEVICE_DSOUND
            注释 = "初始化设备以使用DirectSound输出而不是WASAPI. 如果WASAPI不可用(Vista之前的Windows),则自动应用此选项">
    常量 BASS_DEVICE_SOFTWARE <公开 类型 = 整数 值 = @BASS_DEVICE_SOFTWARE 注释 = "禁用硬件/fastpath 输出">
}

类 BASS_标签类型 <公开 注释 = "\"取通道标签/BASS_ChannelGetTags\"的标签类型,这决定了返回什么数据." 折叠 @文档 = "category = \"常量\"">
{
    常量 BASS_TAG_ID3 <公开 类型 = 整数 值 = @BASS_TAG_ID3 注释 = "ID3v1 标签 : TAG_ID3 结构体">
    常量 BASS_TAG_ID3V2 <公开 类型 = 整数 值 = @BASS_TAG_ID3V2 注释 = "ID3v2 标签 : 可变长字块">
    常量 BASS_TAG_OGG <公开 类型 = 整数 值 = @BASS_TAG_OGG 注释 = "OGG 注释 : 带空白结尾符的UTF-8文本数组">
    常量 BASS_TAG_HTTP <公开 类型 = 整数 值 = @BASS_TAG_HTTP 注释 = "HTTP 头 : 带空白结尾符的ANSI文本数组">
    常量 BASS_TAG_ICY <公开 类型 = 整数 值 = @BASS_TAG_ICY 注释 = "ICY 头 : 带空白结尾符的ANSI文本数组">
    常量 BASS_TAG_META <公开 类型 = 整数 值 = @BASS_TAG_META 注释 = "ICY 元数据 : ANSI 文本">
    常量 BASS_TAG_APE <公开 类型 = 整数 值 = @BASS_TAG_APE 注释 = "APE 标签 : 带空白结尾符的UTF-8文本数组">
    常量 BASS_TAG_MP4 <公开 类型 = 整数 值 = @BASS_TAG_MP4 注释 = "MP4/iTunes 元数据 : 带空白结尾符的UTF-8文本数组">
    常量 BASS_TAG_WMA <公开 类型 = 整数 值 = @BASS_TAG_WMA 注释 = "WMA 标签 : 带空白结尾符的UTF-8文本数组">
    常量 BASS_TAG_VENDOR <公开 类型 = 整数 值 = @BASS_TAG_VENDOR 注释 = "OGG 编码 : UTF-8 文本">
    常量 BASS_TAG_LYRICS3 <公开 类型 = 整数 值 = @BASS_TAG_LYRICS3 注释 = "Lyric3v2 标签 : ASCII 文本">
    常量 BASS_TAG_CA_CODEC <公开 类型 = 整数 值 = @BASS_TAG_CA_CODEC 注释 = "CoreAudio codec 信息 : TAG_CA_CODEC 结构体">
    常量 BASS_TAG_MF <公开 类型 = 整数 值 = @BASS_TAG_MF 注释 = "Media Foundation 标签 : 带空白结尾符的UTF-8文本数组">
    常量 BASS_TAG_WAVEFORMAT <公开 类型 = 整数 值 = @BASS_TAG_WAVEFORMAT 注释 = "WAVE 格式 : WAVEFORMATEEX 结构体">
    常量 BASS_TAG_AM_NAME <公开 类型 = 整数 值 = @BASS_TAG_AM_NAME 注释 = "Android Media codec 名称 : ASCII 文本">
    常量 BASS_TAG_ID3V2_2 <公开 类型 = 整数 值 = @BASS_TAG_ID3V2_2
            注释 = "ID3v2 标签 (2nd block) : variable length block">
    常量 BASS_TAG_AM_MIME <公开 类型 = 整数 值 = @BASS_TAG_AM_MIME 注释 = "Android Media MIME 类型 : ASCII 文本">
    常量 BASS_TAG_LOCATION <公开 类型 = 整数 值 = @BASS_TAG_LOCATION 注释 = "重定向 URL : ASCII 文本">
    常量 BASS_TAG_RIFF_INFO <公开 类型 = 整数 值 = @BASS_TAG_RIFF_INFO 注释 = "RIFF \"INFO\" 标签 : 带空白结尾符的ANSI文本数组">
    常量 BASS_TAG_RIFF_BEXT <公开 类型 = 整数 值 = @BASS_TAG_RIFF_BEXT 注释 = "RIFF/BWF \"bext\" 标签 : TAG_BEXT 结构体">
    常量 BASS_TAG_RIFF_CART <公开 类型 = 整数 值 = @BASS_TAG_RIFF_CART 注释 = "RIFF/BWF \"cart\" 标签 : TAG_CART 结构体">
    常量 BASS_TAG_RIFF_DISP <公开 类型 = 整数 值 = @BASS_TAG_RIFF_DISP 注释 = "RIFF \"DISP\" text 标签 : ANSI string">
    常量 BASS_TAG_RIFF_CUE <公开 类型 = 整数 值 = @BASS_TAG_RIFF_CUE 注释 = "RIFF \"cue\" 数据块 : TAG_CUE 结构体">
    常量 BASS_TAG_RIFF_SMPL <公开 类型 = 整数 值 = @BASS_TAG_RIFF_SMPL 注释 = "RIFF \"smpl\" 数据块 : TAG_SMPL 结构体">
    常量 BASS_TAG_APE_BINARY <公开 类型 = 整数 值 = @BASS_TAG_APE_BINARY
            注释 = "需要 + 索引编号(从0开始),binary APE 标签 : TAG_APE_BINARY 结构体">
    常量 BASS_TAG_MUSIC_NAME <公开 类型 = 整数 值 = @BASS_TAG_MUSIC_NAME 注释 = "MOD 音乐名称 : ANSI 文本">
    常量 BASS_TAG_MUSIC_MESSAGE <公开 类型 = 整数 值 = @BASS_TAG_MUSIC_MESSAGE 注释 = "MOD 信息 : ANSI 文本">
    常量 BASS_TAG_MUSIC_ORDERS <公开 类型 = 整数 值 = @BASS_TAG_MUSIC_ORDERS
            注释 = "MOD 顺序表 : BYTE array of pattern numbers">
    常量 BASS_TAG_MUSIC_AUTH <公开 类型 = 整数 值 = @BASS_TAG_MUSIC_AUTH 注释 = "MOD 作者 : UTF-8 文本">
    常量 BASS_TAG_MUSIC_INST <公开 类型 = 整数 值 = @BASS_TAG_MUSIC_INST 注释 = "MOD 乐器名(ANSI),需要 + 乐器编号(从0开始)">
    常量 BASS_TAG_MUSIC_CHAN <公开 类型 = 整数 值 = @BASS_TAG_MUSIC_CHAN 注释 = "MOD 通道名称(ANSI),需要 + 通道编号(从0开始)">
    常量 BASS_TAG_MUSIC_SAMPLE <公开 类型 = 整数 值 = @BASS_TAG_MUSIC_SAMPLE 注释 = "MOD 样本名称(ANSI),需要 + 样本编号(从0开始)">
}

类 BASS_音频标志 <公开 注释 = "在打开/创建流、样本、MOD音乐、录制中使用的标志." 折叠 @文档 = "category = \"常量\"">
{
    常量 BASS_SAMPLE_8BITS <公开 类型 = 整数 值 = @BASS_SAMPLE_8BITS
            注释 = "使用8位解析度. 如果未指定此标志或BASS_SAMPLE_FLOAT标志，样本数据将为16位.">
    常量 BASS_SAMPLE_FLOAT <公开 类型 = 整数 值 = @BASS_SAMPLE_FLOAT 注释 = "使用32位浮点数样本数据">
    常量 BASS_SAMPLE_MONO <公开 类型 = 整数 值 = @BASS_SAMPLE_MONO
            注释 = "以单声道解码/播放文件(仅限OGG/MP3/MP2/MP1),如果在初始化(BASS_Init)时指定了BASS_DEVICE_MONO,则会自动应用此标志.">
    常量 BASS_SAMPLE_LOOP <公开 类型 = 整数 值 = @BASS_SAMPLE_LOOP
            注释 = "循环播放文件,可以随时使用\"置取通道标志/BASS_ChannelFlags\"切换此标志.">
    常量 BASS_SAMPLE_3D <公开 类型 = 整数 值 = @BASS_SAMPLE_3D 注释 = "启用3D空间音效功能. 流必须是单声道,且SPEAKER标志不能与此标志一起使用.">
    常量 BASS_SAMPLE_SOFTWARE <类型 = 整数 值 = @BASS_SAMPLE_SOFTWARE 注释 = "【未使用】">
    常量 BASS_SAMPLE_MUTEMAX <公开 类型 = 整数 值 = @BASS_SAMPLE_MUTEMAX 注释 = "最大距离时静音(仅3D空间音效).">
    常量 BASS_SAMPLE_VAM <类型 = 整数 值 = @BASS_SAMPLE_VAM 注释 = "【未使用】">
    常量 BASS_SAMPLE_FX <类型 = 整数 值 = @BASS_SAMPLE_FX 注释 = "【未使用】">
    常量 BASS_SAMPLE_OVER_VOL <公开 类型 = 整数 值 = @BASS_SAMPLE_OVER_VOL 注释 = "超越最低音量">
    常量 BASS_SAMPLE_OVER_POS <公开 类型 = 整数 值 = @BASS_SAMPLE_OVER_POS 注释 = "超越最长播放">
    常量 BASS_SAMPLE_OVER_DIST <公开 类型 = 整数 值 = @BASS_SAMPLE_OVER_DIST 注释 = "超越与听众的最远距离(仅3D空间音效).">
    常量 ""
    常量 BASS_STREAM_PRESCAN <公开 类型 = 整数 值 = @BASS_STREAM_PRESCAN
            注释 = "在读取MP3/MP2/MP1文件和链接OGG文件(对正常OGG文件没有影响)时预扫描文件,以获得准确的寻道点和长度."
            注释 = "这会显著增加创建流所需的时间,尤其是大文件和速度较慢的存储介质.">
    常量 BASS_STREAM_AUTOFREE <公开 类型 = 整数 值 = @BASS_STREAM_AUTOFREE 注释 = "播放结束后自动释放流">
    常量 BASS_STREAM_RESTRATE <公开 类型 = 整数 值 = @BASS_STREAM_RESTRATE 注释 = "限制网络文件流的下载速率">
    常量 BASS_STREAM_BLOCK <公开 类型 = 整数 值 = @BASS_STREAM_BLOCK 注释 = "以小块方式下载网络文件流">
    常量 BASS_STREAM_DECODE <公开 类型 = 整数 值 = @BASS_STREAM_DECODE
            注释 = "解码样本数据,而不播放它. 使用\"取通道数据/BASS_ChannelGetData\"获取解码的样本数据."
            注释 = "BASS_SAMPLE_3D、BASS_STREAM_AUTOFREE和SPEAKER标志不能与此标志一起使用.">
    常量 BASS_STREAM_STATUS <公开 类型 = 整数 值 = @BASS_STREAM_STATUS 注释 = "在下载过程中提供服务器状态信息(HTTP/ICY标签)">
    常量 ""
    常量 BASS_MP3_IGNOREDELAY <公开 类型 = 整数 值 = @BASS_MP3_IGNOREDELAY 注释 = "忽略 LAME/Xing/VBRI/iTunes 的延迟和填充信息">
    常量 BASS_MP3_SETPOS <公开 类型 = 整数 值 = @BASS_MP3_SETPOS
            注释 = "在读取MP3/MP2/MP1文件和链接OGG文件(对正常OGG文件没有影响)时预扫描文件,以获得准确的寻道点和长度." "">
    常量 ""
    常量 BASS_MUSIC_FLOAT <公开 类型 = 整数 值 = @BASS_MUSIC_FLOAT 注释 = "使用32位浮点数样本数据">
    常量 BASS_MUSIC_MONO <公开 类型 = 整数 值 = @BASS_MUSIC_MONO
            注释 = "以单声道解码/播放文件(仅限OGG/MP3/MP2/MP1). 如果在初始化(BASS_Init)时指定了BASS_DEVICE_MONO,则会自动应用此标志.">
    常量 BASS_MUSIC_LOOP <公开 类型 = 整数 值 = @BASS_MUSIC_LOOP
            注释 = "循环播放文件,可以随时使用\"置取通道标志/BASS_ChannelFlags\"切换此标志.">
    常量 BASS_MUSIC_3D <公开 类型 = 整数 值 = @BASS_MUSIC_3D 注释 = "启用3D空间音效功能. 流必须是单声道,且SPEAKER标志不能与此标志一起使用.">
    常量 BASS_MUSIC_FX <公开 类型 = 整数 值 = @BASS_MUSIC_FX 注释 = "【文档没写】">
    常量 BASS_MUSIC_AUTOFREE <公开 类型 = 整数 值 = @BASS_MUSIC_AUTOFREE 注释 = "播放结束时自动释放音乐. 请注意有些音乐会无限循环,因此不会自己结束.">
    常量 BASS_MUSIC_DECODE <公开 类型 = 整数 值 = @BASS_MUSIC_DECODE 注释 = "解码/渲染样本数据,而不播放它."
            注释 = "可使用\"取通道数据/BASS_ChannelGetData\"获取解码的样本数据. BASS_SAMPLE_3D、BASS_STREAM_AUTOFREE和SPEAKER的标志不能与此标志一起使用.">
    常量 BASS_MUSIC_PRESCAN <公开 类型 = 整数 值 = @BASS_MUSIC_PRESCAN
            注释 = "计算音乐的播放长度,并启用搜索(单位为字节). 这会略微增加打开音乐所需的时间,具体取决于音乐的长度."
            注释 = "对于循环的音乐,计算发生循环之前的长度. 使用\"取通道长度/BASS_ChannelGetLength\"可获取该长度.">
    常量 BASS_MUSIC_CALCLEN <公开 类型 = 整数 值 = @BASS_MUSIC_CALCLEN 注释 = "【文档没写】">
    常量 BASS_MUSIC_RAMP <公开 类型 = 整数 值 = @BASS_MUSIC_RAMP 注释 = "使用\"normal\"淡入淡出(如FastTracker 2).">
    常量 BASS_MUSIC_RAMPS <公开 类型 = 整数 值 = @BASS_MUSIC_RAMPS 注释 = "使用\"sensitive\"淡入淡出.">
    常量 BASS_MUSIC_SURROUND <公开 类型 = 整数 值 = @BASS_MUSIC_SURROUND
            注释 = "将XMPlay的环绕声应用于音乐. 如果还指定了BASS_SAMPLE_MONO标志,则忽略此选项.">
    常量 BASS_MUSIC_SURROUND2 <公开 类型 = 整数 值 = @BASS_MUSIC_SURROUND2
            注释 = "将XMPlay的环绕声(模式2)应用于音乐. 如果还指定了BASS_SAMPLE_MONO标志,则忽略此选项.">
    常量 BASS_MUSIC_FT2PAN <公开 类型 = 整数 值 = @BASS_MUSIC_FT2PAN 注释 = "将FastTracker 2声像应用于XM文件.">
    常量 BASS_MUSIC_FT2MOD <公开 类型 = 整数 值 = @BASS_MUSIC_FT2MOD
            注释 = "像FastTracker 2一样播放.MOD文件,包括应用FastTracker 2声像.">
    常量 BASS_MUSIC_PT1MOD <公开 类型 = 整数 值 = @BASS_MUSIC_PT1MOD 注释 = "像ProTracker 1一样播放.MOD文件.">
    常量 BASS_MUSIC_NONINTER <公开 类型 = 整数 值 = @BASS_MUSIC_NONINTER
            注释 = "使用非插值样本混合. 通常会降低音质,但也有利于芯片音乐(8Bit音乐).">
    常量 BASS_MUSIC_SINCINTER <公开 类型 = 整数 值 = @BASS_MUSIC_SINCINTER
            注释 = "使用sinc插值样本混合. 增加了音质,但需要使用更多的CPU.如果未指定此标志或BASS_MUSIC_NONINTER标志,则使用线性插值.">
    常量 BASS_MUSIC_POSRESET <公开 类型 = 整数 值 = @BASS_MUSIC_POSRESET
            注释 = "移动位置时停止所有音符(\"置播放位置/BASS_ChannelSetPosition\")">
    常量 BASS_MUSIC_POSRESETEX <公开 类型 = 整数 值 = @BASS_MUSIC_POSRESETEX 注释 = "移动位置时停止所有音符并将bpm/etc重置为默认值">
    常量 BASS_MUSIC_STOPBACK <公开 类型 = 整数 值 = @BASS_MUSIC_STOPBACK 注释 = "播放向后跳跃效果时停止音乐."
            注释 = "这阻止了永不结束的音乐进入无休止的循环.一些MOD音乐被设计成到处跳跃,所以这个标志会导致这些音乐过早停止.如果此标志与BASS_SAMPLE_LOOP标志一起使用,则不会停止音乐,但会触发任意BASS_SYNC_END.">
    常量 BASS_MUSIC_NOSAMPLE <公开 类型 = 整数 值 = @BASS_MUSIC_NOSAMPLE 注释 = "不要加载样本. 这减少了打开音乐所需的时间和内存,尤其是MO3文件."
            注释 = "如果你只想在不播放音乐的情况下获取音乐的文本和长度,这将非常有用.">
    常量 BASS_ASYNCFILE <公开 类型 = 整数 值 = @BASS_ASYNCFILE 注释 = "异步读取文件."
            注释 = "启用时,文件将与解码并行读取和缓冲,以减少解码器受到I/O延迟的影响.">
    常量 BASS_RECORD_PAUSE <公开 类型 = 整数 值 = @BASS_RECORD_PAUSE 注释 = "在暂停状态下启动录制,这允许在任何数据到达回调函数之前对其设置DSP/FX.">
}

类 BASS_扬声器分配标志 <公开 注释 = "如今大多数声卡的输出能力不仅仅是普通的立体声. 为了利用这一点,可以将HSTREAM和HMUSIC通道分配给特定的扬声器."
        注释 = "例如,可以在前置或后置扬声器上播放通道,从而有效地从一个设备获得两个独立的立体声输出." 注释 = "5.1声卡上有第三个立体声输出，7.1声卡上有四个立体声输出."
        注释 = "\"BASS_信息\"类的\"扬声器数量\"成员可用于检查有多少扬声器可用." 折叠 @文档 = "category = \"常量\"">
{
    常量 BASS_SPEAKER_FRONT <公开 类型 = 整数 值 = @BASS_SPEAKER_FRONT 注释 = "立体声标志: 前置扬声器">
    常量 BASS_SPEAKER_REAR <公开 类型 = 整数 值 = @BASS_SPEAKER_REAR 注释 = "立体声标志: 后/侧扬声器">
    常量 BASS_SPEAKER_CENLFE <公开 类型 = 整数 值 = @BASS_SPEAKER_CENLFE 注释 = "立体声标志: 5.1声道的中央扬声器和LFE(低音炮)扬声器">
    常量 BASS_SPEAKER_SIDE <公开 类型 = 整数 值 = @BASS_SPEAKER_SIDE 注释 = "立体声标志: 7.1声道的侧扬声器">
    常量 ""
    常量 BASS_SPEAKER_N <公开 类型 = 整数 值 = @BASS_SPEAKER_N 注释 = "第n对扬声器(最多15对)">
    常量 BASS_SPEAKER_LEFT <公开 类型 = 整数 值 = @BASS_SPEAKER_LEFT 注释 = "左扬声器,用于在单声道中使用扬声器">
    常量 BASS_SPEAKER_RIGHT <公开 类型 = 整数 值 = @BASS_SPEAKER_RIGHT 注释 = "右扬声器,用于在单声道中使用扬声器">
    常量 ""
    常量 BASS_SPEAKER_FRONTLEFT <公开 类型 = 整数 值 = @BASS_SPEAKER_FRONTLEFT 注释 = "单声道标志: 左前扬声器">
    常量 BASS_SPEAKER_FRONTRIGHT <公开 类型 = 整数 值 = @BASS_SPEAKER_FRONTRIGHT 注释 = "单声道标志: 右前扬声器">
    常量 BASS_SPEAKER_REARLEFT <公开 类型 = 整数 值 = @BASS_SPEAKER_REARLEFT 注释 = "单声道标志: 左后/侧扬声器">
    常量 BASS_SPEAKER_REARRIGHT <公开 类型 = 整数 值 = @BASS_SPEAKER_REARRIGHT 注释 = "单声道标志: 右后/侧扬声器">
    常量 BASS_SPEAKER_CENTER <公开 类型 = 整数 值 = @BASS_SPEAKER_CENTER 注释 = "单声道标志: 5.1声中的中央扬声器">
    常量 BASS_SPEAKER_LFE <公开 类型 = 整数 值 = @BASS_SPEAKER_LFE 注释 = "单声道标志: 5.1声道的LFE(低音炮)扬声器">
    常量 BASS_SPEAKER_SIDELEFT <公开 类型 = 整数 值 = @BASS_SPEAKER_SIDELEFT 注释 = "单声道标志: 7.1声道的左侧扬声器">
    常量 BASS_SPEAKER_SIDERIGHT <公开 类型 = 整数 值 = @BASS_SPEAKER_SIDERIGHT 注释 = "单声道标志: 7.1声道的右侧扬声器">
    常量 BASS_SPEAKER_REAR2 <公开 类型 = 整数 值 = @BASS_SPEAKER_REAR2 注释 = "立体声标志: 7.1声道的后中央扬声器">
    常量 BASS_SPEAKER_REAR2LEFT <公开 类型 = 整数 值 = @BASS_SPEAKER_REAR2LEFT 注释 = "单声道标志: 7.1声道的左后中央扬声器">
    常量 BASS_SPEAKER_REAR2RIGHT <公开 类型 = 整数 值 = @BASS_SPEAKER_REAR2RIGHT 注释 = "单声道标志: 7.1声道的右后中央扬声器">
}

类 BASS_文件位置模式 <公开 注释 = "\"取流文件位置/BASS_StreamGetFilePosition\"的模式" 折叠 @文档 = "category = \"常量\"">
{
    常量 BASS_FILEPOS_CURRENT <公开 类型 = 整数 值 = @BASS_FILEPOS_CURRENT
            注释 = "为下次播放准备的解码位置. 由于缓冲的作用,这将比实际听到的位置提前一点.">
    常量 BASS_FILEPOS_DECODE <公开 类型 = 整数 值 = @BASS_FILEPOS_DECODE 注释 = "同BASS_FILEPOS_CURRENT">
    常量 BASS_FILEPOS_DOWNLOAD <公开 类型 = 整数 值 = @BASS_FILEPOS_DOWNLOAD 注释 = "网络文件流或\"缓冲\"用户文件流的下载进度.">
    常量 BASS_FILEPOS_END <公开 类型 = 整数 值 = @BASS_FILEPOS_END
            注释 = "音频数据的结尾. 在块中进行流式传输时(BASS_STREAM_BLOCK标志生效),会给出下载缓冲区长度.">
    常量 BASS_FILEPOS_START <公开 类型 = 整数 值 = @BASS_FILEPOS_START 注释 = "音频数据的开头.">
    常量 BASS_FILEPOS_CONNECTED <公开 类型 = 整数 值 = @BASS_FILEPOS_CONNECTED 注释 = "网络文件流或\"缓冲\"用户文件流是否仍处于连接状态？"
            注释 = "0=否，1=是">
    常量 BASS_FILEPOS_BUFFER <公开 类型 = 整数 值 = @BASS_FILEPOS_BUFFER
            注释 = "网络文件流或\"缓冲\"用户文件流的缓冲区数据量. 除非在块中进行流式传输，否则这与BASS_FILEPOS_DOWNLOAD相同.">
    常量 BASS_FILEPOS_SOCKET <公开 类型 = 整数 值 = @BASS_FILEPOS_SOCKET 注释 = "【文档没写】">
    常量 BASS_FILEPOS_ASYNCBUF <公开 类型 = 整数 值 = @BASS_FILEPOS_ASYNCBUF
            注释 = "异步文件读取缓冲区的数据量. 这要求在创建流时使用BASS_ASYNCFILE标志.">
    常量 BASS_FILEPOS_SIZE <公开 类型 = 整数 值 = @BASS_FILEPOS_SIZE 注释 = "文件的总大小.">
    常量 BASS_FILEPOS_BUFFERING <公开 类型 = 整数 值 = @BASS_FILEPOS_BUFFERING
            注释 = "网络文件流或\"缓冲\"用户文件流可以恢复播放之前剩余的缓冲百分比.">
    常量 BASS_FILEPOS_AVAILABLE <公开 类型 = 整数 值 = @BASS_FILEPOS_AVAILABLE 注释 = "当前位置能读取到的数据量.">
}

类 BASS_录制标志 <公开 注释 = "\"置录制设备设置/BASS_RecordSetInput\"的标志" 折叠 @文档 = "category = \"常量\"">
{
    常量 BASS_INPUT_OFF <公开 类型 = 整数 值 = @BASS_INPUT_OFF 注释 = "输入设备已关闭" 编辑时信息 = "32AA7, 0, 0, 0">
    常量 BASS_INPUT_ON <公开 类型 = 整数 值 = @BASS_INPUT_ON 注释 = "输入设备已开启" 编辑时信息 = "32AA7, 0, 0, 0">
    常量 BASS_INPUT_TYPE_MASK <公开 类型 = 整数 值 = @BASS_INPUT_TYPE_MASK
            注释 = "掩码. 用来检查录制设备的类型,将标志的组合值与\"BASS_INPUT_TYPE_MASK\"位与,即可得到设备类型的标志" 编辑时信息 = "32AA7, 0, 0, 0">
    常量 BASS_INPUT_TYPE_UNDEF <公开 类型 = 整数 值 = @BASS_INPUT_TYPE_UNDEF 注释 = "其他或未知设备. 其他类型未涵盖的任何设备."
            编辑时信息 = "32AA7, 0, 0, 0">
    常量 BASS_INPUT_TYPE_DIGITAL <公开 类型 = 整数 值 = @BASS_INPUT_TYPE_DIGITAL 注释 = "数字音源,例如DAT或音频CD."
            编辑时信息 = "32AA7, 0, 0, 0">
    常量 BASS_INPUT_TYPE_LINE <公开 类型 = 整数 值 = @BASS_INPUT_TYPE_LINE
            注释 = "线路或模拟输入. 在某些设备上,\"线路输入\"可与其他模拟源组合成一个BASS_INPUT_TYPE_ANALOG输入设备." 编辑时信息 = "32AA7, 0, 0, 0">
    常量 BASS_INPUT_TYPE_MIC <公开 类型 = 整数 值 = @BASS_INPUT_TYPE_MIC 注释 = "麦克风." 编辑时信息 = "32AA7, 0, 0, 0">
    常量 BASS_INPUT_TYPE_SYNTH <公开 类型 = 整数 值 = @BASS_INPUT_TYPE_SYNTH 注释 = "内置MIDI合成器"
            编辑时信息 = "32AA7, 0, 0, 0">
    常量 BASS_INPUT_TYPE_CD <公开 类型 = 整数 值 = @BASS_INPUT_TYPE_CD 注释 = "模拟音频CD" 编辑时信息 = "32AA7, 0, 0, 0">
    常量 BASS_INPUT_TYPE_PHONE <公开 类型 = 整数 值 = @BASS_INPUT_TYPE_PHONE 注释 = "电话." 编辑时信息 = "32AA7, 0, 0, 0">
    常量 BASS_INPUT_TYPE_SPEAKER <公开 类型 = 整数 值 = @BASS_INPUT_TYPE_SPEAKER 注释 = "PC扬声器"
            编辑时信息 = "32AA7, 0, 0, 0">
    常量 BASS_INPUT_TYPE_WAVE <公开 类型 = 整数 值 = @BASS_INPUT_TYPE_WAVE 注释 = "设备的WAV/PCM输出"
            编辑时信息 = "32AA7, 0, 0, 0">
    常量 BASS_INPUT_TYPE_AUX <公开 类型 = 整数 值 = @BASS_INPUT_TYPE_AUX
            注释 = "AUX辅助. 与\"线路输入\"类似,\"Aux\"可以与其他模拟源组混合到一个BASS_INPUT_TYPE_ANALOG输入到设备" 编辑时信息 = "32AA7, 0, 0, 0">
    常量 BASS_INPUT_TYPE_ANALOG <公开 类型 = 整数 值 = @BASS_INPUT_TYPE_ANALOG 注释 = "模拟信号源,通常是所有模拟源的混合."
            编辑时信息 = "32AA7, 0, 0, 0">
}

类 BASS_同步类型 <公开 注释 = "\"置通道同步器/BASS_ChannelSetSync\"的同步类型." 折叠 @文档 = "category = \"常量\"">
{
    常量 BASS_SYNC_POS <公开 类型 = 整数 值 = @BASS_SYNC_POS 注释 = "当通道到达某个位置时进行同步."
            注释 = "参数: 字节位置(自动向下舍入到最近的样本). 数据: 未使用.">
    常量 BASS_SYNC_END <公开 类型 = 整数 值 = @BASS_SYNC_END 注释 = "当通道到达结尾时同步,包括循环播放."
            注释 = "请注意一些MOD音乐不会结束,他们可能会先跳到另一个位置."
            注释 = "如果BASS_MUSIC_STOPBACK标志与MOD音乐(通过BASS_MusicLoad或BASS_ChannelFlags)一起使用,则在播放向后跳跃效果时也会调用此同步."
            注释 = "参数: 未使用.  数据: 0=正常结束位置，1=MOD音乐中的向后跳跃，2=BASS_POS_END的位置，3=尾部的末端(BASS_ATTRIB_TAIL).">
    常量 BASS_SYNC_META <公开 类型 = 整数 值 = @BASS_SYNC_META
            注释 = "在Shoutcast流中接收元数据时进行同步. 更新的元数据可调用\"取通道标签/BASS_ChannelGetTags\"获取。" 注释 = "参数: 未使用.  数据: 未使用.">
    常量 BASS_SYNC_SLIDE <公开 类型 = 整数 值 = @BASS_SYNC_SLIDE 注释 = "属性滑动结束时同步." 注释 = "参数: 未使用.  数据: 已完成滑动的属性.">
    常量 BASS_SYNC_STALL <公开 类型 = 整数 值 = @BASS_SYNC_STALL 注释 = "停滞/恢复播放通道时同步."
            注释 = "参数: 未使用.  数据: 0 = 停滞, 1 = 恢复.">
    常量 BASS_SYNC_DOWNLOAD <公开 类型 = 整数 值 = @BASS_SYNC_DOWNLOAD 注释 = "网络或\"缓冲\"用户文件流的下载完成时同步."
            注释 = "参数: 未使用.  数据: 未使用.">
    常量 BASS_SYNC_FREE <公开 类型 = 整数 值 = @BASS_SYNC_FREE 注释 = "释放通道时同步. 当您需要释放一些与通道相关联的资源时,这可能非常有用."
            注释 = "请注意,你将无法对回调中的通道使用任何BASS函数，因为该通道将不再存在." 注释 = "参数: 未使用.  数据: 未使用.">
    常量 BASS_SYNC_SETPOS <公开 类型 = 整数 值 = @BASS_SYNC_SETPOS 注释 = "设置通道位置时同步,包括循环/重头播放."
            注释 = "参数: 未使用.  数据: 0 = 回复缓冲区未刷新, 1 = 回复缓冲区已刷新.">
    常量 BASS_SYNC_MUSICPOS <公开 类型 = 整数 值 = @BASS_SYNC_MUSICPOS 注释 = "当MOD音乐到达order.row位置时进行同步."
            注释 = "参数: 低位 = order (0=first, -1=all), 高位 = row (0=first, -1=all). 数据: 低位 = order, 高位 = row.">
    常量 BASS_SYNC_MUSICINST <公开 类型 = 整数 值 = @BASS_SYNC_MUSICINST
            注释 = "在MOD音乐中播放乐器(MOD/S3M/MTM格式的样本)时进行同步(不包括重发)."
            注释 = "参数: 低位 = 乐器 (1=first), 高位 = 音符 (0=c0...119=b9, -1=all). 数据: 低位 = 音符, 高位 = 音量 (0-64).">
    常量 BASS_SYNC_MUSICFX <公开 类型 = 整数 值 = @BASS_SYNC_MUSICFX
            注释 = "在MOD音乐中使用同步效果时同步. 对于XM/MTM/MOD格式,同步效果为E8x或Wxx,对于IT/S3M格式,同步效果为S2x(其中x=任何值)."
            注释 = "参数: 0 = 该位置将传递给回调函数 (数据: 低位 = order, 高位 = row), 1 = x值将被传递给回调函数 (数据: x 值).">
    常量 BASS_SYNC_OGG_CHANGE <公开 类型 = 整数 值 = @BASS_SYNC_OGG_CHANGE
            注释 = "当链接OGG流中的新逻辑位流开始时进行同步. 更新的标签可从\"取通道标签/BASS_ChannelGetTags\"获取." 注释 = "参数: 未使用.  数据: 未使用.">
    常量 BASS_SYNC_DEV_FAIL <公开 类型 = 整数 值 = @BASS_SYNC_DEV_FAIL 注释 = "当通道的设备意外停止时同步(例如设备被断开或禁用)."
            注释 = "发生这种情况时,将无法恢复录制,但一旦设备再次可用,可以通过\"开始输出/BASS_Start\"恢复播放." 注释 = "参数: 未使用.  数据: 未使用.">
    常量 BASS_SYNC_DEV_FORMAT <公开 类型 = 整数 值 = @BASS_SYNC_DEV_FORMAT
            注释 = "当通道设备的样本格式(采样率和/通道计数)更改时同步. 新格式可用\"取输出信息/BASS_GetInfo\"获取." 注释 = "参数: 未使用.  数据: 未使用.">
    常量 BASS_SYNC_THREAD <公开 类型 = 整数 值 = @BASS_SYNC_THREAD 注释 = "标志: 在专用同步线程中异步调用同步。"
            注释 = "这只影响混音时间同步(BASS_SYNC_FREE同步时除外),并允许回调函数在同一通道句柄上安全调用BASS_ChannelFree、BASS_StreamFree或BASS_MusicFree.">
    常量 BASS_SYNC_MIXTIME <公开 类型 = 整数 值 = @BASS_SYNC_MIXTIME 注释 = "标志：触发同步时立即调用同步函数,而不是延迟调用直到实际听到同步事件."
            注释 = "对于某些同步类型,自动设置该标志. 对于解码和录制通道,这也是自动设置的,因为它们无法播放/收听.">
    常量 BASS_SYNC_ONETIME <公开 类型 = 整数 值 = @BASS_SYNC_ONETIME 注释 = "标志：仅调用同步一次，然后将其从通道中删除.">
    常量 ""
    常量 BASS_SYNC_MIXER_ENVELOPE <公开 类型 = 整数 值 = 0x10200 注释 = "【BASS混合器类】包络线结束时同步,这不是由循环包络线触发的."
            注释 = "参数: 要同步的包络线类型,0=所有类型. 数据: 包络线类型.">
    常量 BASS_SYNC_MIXER_ENVELOPE_NODE <公开 类型 = 整数 值 = 0x10201 注释 = "【BASS混合器类】包络线到达新节点时进行同步."
            注释 = "参数: 要同步的包络线类型,0=所有类型. 数据: 低位=包络线类型, 高位=节点编号.">
    常量 BASS_SYNC_MIXER_QUEUE <公开 类型 = 整数 值 = 0x10202
            注释 = "【BASS混合器类】以与任何其他流完全相同的方式在混合器上设置同步。除了标准的流同步类型外，混合器还支持以下类型的同步。" 注释 = "参数: 未使用.  数据: 退出队列的通道句柄.">
}

类 BASS_通道类型 <公开 注释 = "\"取通道信息\"获取的通道类型" 折叠 @文档 = "category = \"常量\"">
{
    常量 BASS_CTYPE_SAMPLE <公开 类型 = 整数 值 = @BASS_CTYPE_SAMPLE 注释 = "样本通道(HCHANNEL).">
    常量 BASS_CTYPE_RECORD <公开 类型 = 整数 值 = @BASS_CTYPE_RECORD 注释 = "录制通道(HRECORD).">
    常量 BASS_CTYPE_STREAM <公开 类型 = 整数 值 = @BASS_CTYPE_STREAM 注释 = "用户样本流. 这标志也可用来测试通道是否为任意类型HSTREAM.">
    常量 BASS_CTYPE_STREAM_VORBIS <公开 类型 = 整数 值 = @BASS_CTYPE_STREAM_VORBIS 注释 = "Ogg Vorbis格式流.">
    常量 BASS_CTYPE_STREAM_OGG <公开 类型 = 整数 值 = @BASS_CTYPE_STREAM_OGG 注释 = "Ogg格式流.">
    常量 BASS_CTYPE_STREAM_MP1 <公开 类型 = 整数 值 = @BASS_CTYPE_STREAM_MP1 注释 = "MPEG layer 1 格式流.">
    常量 BASS_CTYPE_STREAM_MP2 <公开 类型 = 整数 值 = @BASS_CTYPE_STREAM_MP2 注释 = "MPEG layer 2 格式流.">
    常量 BASS_CTYPE_STREAM_MP3 <公开 类型 = 整数 值 = @BASS_CTYPE_STREAM_MP3 注释 = "MPEG layer 3 格式流.">
    常量 BASS_CTYPE_STREAM_AIFF <公开 类型 = 整数 值 = @BASS_CTYPE_STREAM_AIFF 注释 = "音频 IFF 格式流.">
    常量 BASS_CTYPE_STREAM_CA <公开 类型 = 整数 值 = @BASS_CTYPE_STREAM_CA
            注释 = "CoreAudio编解码流. 其他的格式信息可以用\"取通道标签/BASS_ChannelGetTags (BASS_TAG_CA_CODEC)\"获取.">
    常量 BASS_CTYPE_STREAM_MF <公开 类型 = 整数 值 = @BASS_CTYPE_STREAM_MF
            注释 = "Media Foundation编解码流. 其他的格式信息可以用\"取通道标签/BASS_ChannelGetTags (BASS_TAG_WAVEFORMAT)\"获取.">
    常量 BASS_CTYPE_STREAM_AM <公开 类型 = 整数 值 = @BASS_CTYPE_STREAM_AM
            注释 = "Android media编解码流. 其他的格式信息可以用\"取通道标签/BASS_ChannelGetTags (BASS_TAG_AM_MIME)\"获取.">
    常量 BASS_CTYPE_STREAM_SAMPLE <公开 类型 = 整数 值 = @BASS_CTYPE_STREAM_SAMPLE 注释 = "一段样本流(HSAMPLE).">
    常量 BASS_CTYPE_STREAM_DUMMY <公开 类型 = 整数 值 = @BASS_CTYPE_STREAM_DUMMY
            注释 = "\"dummy\"流(使用STREAMPROC_DUMMY).">
    常量 BASS_CTYPE_STREAM_DEVICE <公开 类型 = 整数 值 = @BASS_CTYPE_STREAM_DEVICE
            注释 = "设备最终输出混合的\"dummy\"流(使用STREAMPROC_DEVICE).">
    常量 BASS_CTYPE_STREAM_WAV <公开 类型 = 整数 值 = @BASS_CTYPE_STREAM_WAV
            注释 = "波形格式标志. 这标志可用于测试通道是否为任意类型的波形. 编解码(文件的\"wFormatTag\")在低位中指定."
            注释 = "其他的格式信息可以用\"取通道标签/BASS_ChannelGetTags (BASS_TAG_WAVEFORMAT)\"获取.">
    常量 BASS_CTYPE_STREAM_WAV_PCM <公开 类型 = 整数 值 = @BASS_CTYPE_STREAM_WAV_PCM 注释 = "整数PCM波形格式流.">
    常量 BASS_CTYPE_STREAM_WAV_FLOAT <公开 类型 = 整数 值 = @BASS_CTYPE_STREAM_WAV_FLOAT 注释 = "浮点数PCM波形格式流.">
    常量 BASS_CTYPE_MUSIC_MOD <公开 类型 = 整数 值 = @BASS_CTYPE_MUSIC_MOD
            注释 = "通用MOD格式音乐. 这标志也可用作测试通道是否为任意类型HMUSIC.">
    常量 BASS_CTYPE_MUSIC_MTM <公开 类型 = 整数 值 = @BASS_CTYPE_MUSIC_MTM 注释 = "多音轨格式音乐.">
    常量 BASS_CTYPE_MUSIC_S3M <公开 类型 = 整数 值 = @BASS_CTYPE_MUSIC_S3M 注释 = "ScreamTracker 3格式音乐.">
    常量 BASS_CTYPE_MUSIC_XM <公开 类型 = 整数 值 = @BASS_CTYPE_MUSIC_XM 注释 = "FastTracker 2格式音乐.">
    常量 BASS_CTYPE_MUSIC_IT <公开 类型 = 整数 值 = @BASS_CTYPE_MUSIC_IT 注释 = "Impulse Tracker格式音乐.">
    常量 BASS_CTYPE_MUSIC_MO3 <公开 类型 = 整数 值 = @BASS_CTYPE_MUSIC_MO3
            注释 = "MO3格式标志,与BASS_CTYPE_MUSIC开头的类型之一组合使用.">
}

类 BASS_位置类型 <公开 注释 = "\"取通道长度\"和\"置播放位置\"的模式" 折叠 @文档 = "category = \"常量\"">
{
    常量 BASS_POS_BYTE <公开 类型 = 整数 值 = @BASS_POS_BYTE 注释 = "此位置以字节为单位,向下舍入到最近的样本边界.">
    常量 BASS_POS_MUSIC_ORDER <公开 类型 = 整数 值 = @BASS_POS_MUSIC_ORDER
            注释 = "此位置按顺序和行排列. 使用MAKELONG(顺序、行).(仅限HMUSIC)">
    常量 BASS_POS_OGG <公开 类型 = 整数 值 = @BASS_POS_OGG 注释 = "此位置是OGG文件的位流编号,0=第一个.">
    常量 BASS_POS_END <公开 类型 = 整数 值 = @BASS_POS_END 注释 = "此位置以字节为单位,是通道的结尾位置."
            注释 = "0=正常结尾位置.如果超出通道的正常结尾位置,不会产生任何影响. 如果通道已经位于或超出该位置,则它将在其当前位置结束.">
    常量 BASS_POS_LOOP <公开 类型 = 整数 值 = @BASS_POS_LOOP 注释 = "此位置以字节为单位,是循环开始的位置(启用循环时)."
            注释 = "如果该值位于或超出结尾,则使用默认循环位置0.">
    常量 BASS_POS_FLUSH <公开 类型 = 整数 值 = @BASS_POS_FLUSH 注释 = "标志: 刷新所有输出缓冲区(包括FX),以便在移动位置后不会听到旧位置的余音."
            注释 = "在\"混音时间\"SYNCPROC之外的正常播放通道(非解码通道)自动设置.">
    常量 BASS_POS_RESET <公开 类型 = 整数 值 = @BASS_POS_RESET 注释 = "标志: 重置用户文件缓冲区."
            注释 = "这允许重置设置了BASS_STREAM_BLOCK标志的用户文件流,以便它准备好处理新数据." 注释 = "此标志只能用于BASS_POS_BYTE模式,且POS必须为0.">
    常量 BASS_POS_RELATIVE <公开 类型 = 整数 值 = @BASS_POS_RELATIVE 注释 = "标志: 请求的位置为当前位置的相对位置."
            注释 = "这种情况下,pos的值是有符号,可以是负数.">
    常量 BASS_POS_INEXACT <公开 类型 = 整数 值 = @BASS_POS_INEXACT 注释 = "标志: 允许不精确的搜索."
            注释 = "基于速度优先,搜索可能会停止在块的开始处，而非部分处理以到达请求的为准。" 注释 = "对于速度，搜索可能会在块的开始处停止，而不是特意地处理块以达到请求的位置.">
    常量 BASS_POS_DECODE <公开 类型 = 整数 值 = @BASS_POS_DECODE 注释 = "标志: 获取解码(不播放)的位置">
    常量 BASS_POS_DECODETO <公开 类型 = 整数 值 = @BASS_POS_DECODETO 注释 = "标志: 解码/渲染到该位置,而不是搜索到该位置."
            注释 = "这对于不可搜索或具有不精确搜索的流是有用的,是它通常比正常的搜索慢,并且请求的位置不能在当前解码位置后面." 注释 = "此标志只能与BASS_POS_BYTE模式一起使用.">
    常量 BASS_POS_SCAN <公开 类型 = 整数 值 = @BASS_POS_SCAN 注释 = "标志: 如果尚未扫描该文件,则扫描该文件以建立一个搜索表,直至该位置."
            注释 = "扫描将从之前停止的位置继续,而不是每次从文件的开头重新开始." 注释 = "此标志仅适用于MP3/MP2/MP1文件,其他文件格式将忽略此标志.">
}

类 BASS_通道数据类型 <公开 注释 = "\"取通道数据/BASS_ChannelGetData\"的标志" 折叠 编辑时信息 = "D2A9D, 0, 0, 0"
        @文档 = "category = \"常量\"">
{
    常量 BASS_DATA_AVAILABLE <公开 类型 = 整数 值 = @BASS_DATA_AVAILABLE 注释 = "查询通道为播放或录制缓冲的数据量."
            注释 = "此标志不能用于解码通道,因为它们没有播放缓冲区. 使用此标志时忽略\"缓冲区\"参数.">
    常量 BASS_DATA_NOREMOVE <公开 类型 = 整数 值 = @BASS_DATA_NOREMOVE 注释 = "标志: 不删除录制通道的缓冲区数据."
            注释 = "如果录制通道使用了\"录制回调\"事件,会自动附带该标志.其他通道类型忽略此标志.">
    常量 BASS_DATA_FIXED <公开 类型 = 整数 值 = @BASS_DATA_FIXED 注释 = "不再使用">
    常量 BASS_DATA_FLOAT <公开 类型 = 整数 值 = @BASS_DATA_FLOAT 注释 = "标志: 返回单精度浮点数样本数据">
    常量 BASS_DATA_FFT256 <公开 类型 = 整数 值 = @BASS_DATA_FFT256 注释 = "256 样本 FFT (返回 128 个值)">
    常量 BASS_DATA_FFT512 <公开 类型 = 整数 值 = @BASS_DATA_FFT512 注释 = "512 样本 FFT (返回 256 个值)">
    常量 BASS_DATA_FFT1024 <公开 类型 = 整数 值 = @BASS_DATA_FFT1024 注释 = "1024 样本 FFT (返回 512 个值)">
    常量 BASS_DATA_FFT2048 <公开 类型 = 整数 值 = @BASS_DATA_FFT2048 注释 = "2048 样本 FFT (返回 1024 个值)">
    常量 BASS_DATA_FFT4096 <公开 类型 = 整数 值 = @BASS_DATA_FFT4096 注释 = "4096 样本 FFT (返回 2048 个值)">
    常量 BASS_DATA_FFT8192 <公开 类型 = 整数 值 = @BASS_DATA_FFT8192 注释 = "8192 样本 FFT (返回 4096 个值)">
    常量 BASS_DATA_FFT16384 <公开 类型 = 整数 值 = @BASS_DATA_FFT16384 注释 = "16384 样本 FFT (返回 8192 个值)">
    常量 BASS_DATA_FFT32768 <公开 类型 = 整数 值 = @BASS_DATA_FFT32768 注释 = "32768 样本 FFT (返回 16384 个值)">
    常量 BASS_DATA_FFT_INDIVIDUAL <公开 类型 = 整数 值 = @BASS_DATA_FFT_INDIVIDUAL
            注释 = "FFT标志: 对每个通道执行单独的FFT,而不是单一的组合FFT." 注释 = "返回数据的大小为(如上所列的值)乘以通道数.">
    常量 BASS_DATA_FFT_NOWINDOW <公开 类型 = 整数 值 = @BASS_DATA_FFT_NOWINDOW 注释 = "FFT标志: 防止在执行FFT时对样本数据应用Hann窗口.">
    常量 BASS_DATA_FFT_REMOVEDC <公开 类型 = 整数 值 = @BASS_DATA_FFT_REMOVEDC 注释 = "FFT标志: 执行FFT时,从样本数据中移除所有直流偏置.">
    常量 BASS_DATA_FFT_COMPLEX <公开 类型 = 整数 值 = @BASS_DATA_FFT_COMPLEX 注释 = "FFT标志: 返回复合FFT的结果,而不是magnitude."
            注释 = "返回的数据量(如上所列的值)将增加了四倍,因为它返回实部和虚部以及完整的FFT结果(不仅仅是前半部分).">
    常量 BASS_DATA_FFT_NYQUIST <公开 类型 = 整数 值 = @BASS_DATA_FFT_NYQUIST
            注释 = "FFT标志: 返回奈奎斯特频率幅值的额外值.奈奎斯特频率始终包含在复合FFT结果中.">
}

类 BASS_通道属性 <公开 注释 = "通道属性" 折叠 @文档 = "category = \"常量\"">
{
    常量 BASS_ATTRIB_FREQ <公开 类型 = 整数 值 = @BASS_ATTRIB_FREQ 注释 = "通道的采样率." 注释 = "参数: 采样率,0=原始采样率(通道创建时的设置值)"
            注释 = "此属性仅应用于通道的播放,不会影响通道的样本数据,对解码通道也没有实际影响." 注释 = "此属性可以用来修改播放速度.">
    常量 BASS_ATTRIB_VOL <公开 类型 = 整数 值 = @BASS_ATTRIB_VOL 注释 = "通道的音量级别."
            注释 = "参数: 音量级别,0=静音,1.0=正常,大于1.0=放大." 注释 = "此属性仅适用于通道的播放,不会影响通道的样本数据,对解码通道也没有直接影响.">
    常量 BASS_ATTRIB_PAN <公开 类型 = 整数 值 = @BASS_ATTRIB_PAN 注释 = "通道的声像/平衡位置."
            注释 = "参数: 声像位置,-1(最左侧)到+1(最右侧),0=中置." 注释 = "此属性仅用于通道的播放,并不会影响通道的样本数据,对解码通道也没有实际影响."
            注释 = "无法设置3D空间音效通道的声像位置.">
    常量 BASS_ATTRIB_EAXMIX <公开 类型 = 整数 值 = @BASS_ATTRIB_EAXMIX 注释 = "【文档没写】">
    常量 BASS_ATTRIB_NOBUFFER <公开 类型 = 整数 值 = @BASS_ATTRIB_NOBUFFER 注释 = "是否禁用播放缓冲区. (HMUSIC/HSTREAM)"
            注释 = "参数: 0=不禁用,其他任意数字为禁用播放缓冲区." 注释 = "此属性将BASS_ATTRIB_BUFFER的属性设置为0(禁用播放缓冲)或完整播放缓冲长度(启用播放缓冲).">
    常量 BASS_ATTRIB_VBR <公开 类型 = 整数 值 = @BASS_ATTRIB_VBR 注释 = "【文档没写】">
    常量 BASS_ATTRIB_CPU <公开 类型 = 整数 值 = @BASS_ATTRIB_CPU 注释 = "CPU的使用率. (HMUSIC/HSTREAM)"
            注释 = "参数: CPU使用率的百分百" 注释 = "只读属性,只能获取不能设置. 此属性给出通道的CPU使用率,包括解码和DSP/FX处理所花费的时间."
            注释 = "但不包括播放期间将通道数据添加到最终输出混音所需的时间.">
    常量 BASS_ATTRIB_SRC <公开 类型 = 整数 值 = @BASS_ATTRIB_SRC 注释 = "通道的采样率转换质量."
            注释 = "参数: 采样率转换质量,0=线性插值,1=8点sinc插值,2=16点sinc插值,3=32点sinc插值,4=64点sinc插值."
            注释 = "也可以接受其他值,但将被解释为0或4,这取决于它们是更低还是更高." 注释 = "当通道的采样率与输出设备使用的采样率不同时,需要转换通道的采样数据,以便在播放时与输出设备的速率相匹配."
            注释 = "此属性确定如何转换采样率,线性插值选项使用更少的CPU,但sinc插值提供更好的音质,音质和CPU使用率随着sinc点数递增."
            注释 = "对于配置较低的系统,较好的折衷方案是使用sinc插值进行音乐播放,使用线性插值进行声音效果."
            注释 = "通道的采样率应与输出设备的速率相匹配,以避免任何采样率转换. 例如,可以在调用\"BASS_StreamCreate\"、\"BASS_MusicLoad\"或创建MIDI流时使用设备的采样率."
            注释 = "采样率转换会在原本数据离开通道的播放缓冲区后的播放过程中发生,因此不会影响\"取通道数据/BASS_ChannelGetData\"提供的数据,对解码通道也没有直接影响."
            注释 = "可以随时设置此属性,并且更改会立即生效. 初始设置由BASS_CONFIG_SRC配置选项或BASS_CONFIG_SRC_SAMPLE(样本通道)决定.">
    常量 BASS_ATTRIB_NET_RESUME <公开 类型 = 整数 值 = @BASS_ATTRIB_NET_RESUME 注释 = "恢复暂停播放所需的下载缓冲区级别. (HSTREAM)"
            注释 = "参数: 以百分比表示的恢复级别,0-100." 注释 = "此属性确定在恢复播放暂停的网络流之前,需要填充多少百分比的下载缓冲区(BASS_CONFIG_NET_BUFFER)."
            注释 = "它还适用于使用\"创建用户流文件/BASS_StreamCreateFileUser\"创建的\"缓冲\"用户文件流."
            注释 = "缓冲进度可通过\"取流文件位置/BASS_StreamGetFilePosition(BASS_FILEPOS_BUFFERING)\"进行监控.">
    常量 BASS_ATTRIB_SCANINFO <公开 类型 = 整数 值 = @BASS_ATTRIB_SCANINFO 注释 = "通道的扫描信息." 注释 = "参数1: 扫描信息指针."
            注释 = "参数2: 扫描信息的大小."
            注释 = "此属性是在调用\"打开流文件\"中使用BASS_STREAM_PRESCAN标志或BASS_POS_SCAN标志与\"置通道位置\"一起使用时从文件扫描的信息."
            注释 = "它在MP3/MP2/MP1文件和链接OGG文件上受支持,它也可能由附加组件增加支持.">
    常量 BASS_ATTRIB_NORAMP <公开 类型 = 整数 值 = @BASS_ATTRIB_NORAMP 注释 = "禁用淡入淡出播放？" 注释 = "参数: 0=不禁用,其他值为禁用."
            注释 = "默认情况下,在开始播放时音量从小到大,在停止/暂停时将音量从大到小变化,以避免突然的音量变化,从而可能导致的咔嗒声."
            注释 = "通过启用此选项可以禁用淡入淡出.无论此选项如何,音量(BASS_ATTRIB_VOL)和声像(BASS_ATTRIB_PAN)的变化始终是渐变的."
            注释 = "淡入淡出仅适用于正常播放,不影响解码通道,它也不会出现在\"取通道数据/BASS_ChannelGetData\"提供的数据中."
            注释 = "当通道的样本数据是从低电平开始时(因此不会产生咔嗒声),将跳过淡入.淡出需要通道播放缓冲区中的数据."
            注释 = "因此当通过BASS_ATTRIB_BUFFER选项禁用缓冲时,通常会禁用淡出,除非通道是\"推送\"流或使用了\"更新播放缓冲/BASS_ChannelUpdate\"预缓冲了数据.">
    常量 BASS_ATTRIB_BITRATE <公开 类型 = 整数 值 = @BASS_ATTRIB_BITRATE 注释 = "文件流的平均比特率."
            注释 = "参数: 比特率,单位为 kb/s. 只读属性,只能获取不能设置." 注释 = "如果文件含有视频,获取的比特率不会包含视频的.">
    常量 BASS_ATTRIB_BUFFER <公开 类型 = 整数 值 = @BASS_ATTRIB_BUFFER 注释 = "播放缓冲区长度. (仅限HMUSIC/HSTREAM)"
            注释 = "参数: 单位为秒的缓冲长度, 0=无缓冲. 上限值自动限制到通道播放缓冲区的全长." 注释 = "默认值是通道的完整播放缓冲区长度,由创建时的BASS_CONFIG_BUFFER设置确定."
            注释 = "此属性允许在不重新创建通道的情况下更改,即可以在播放时更改.">
    常量 BASS_ATTRIB_GRANULE <公开 类型 = 整数 值 = @BASS_ATTRIB_GRANULE 注释 = "通道的处理粒度. (HMUSIC/HSTREAM/HRECORD)"
            注释 = "参数: 样本帧的处理单元大小,0=无. 更改将立即生效." 注释 = "此属性允许以一定大小的单位进行通道的处理,这对某些DSP处理很有帮助."
            注释 = "它不适用于解码通道和没有录制回调的录制通道,它们的处理由\"取通道数据/BASS_ChannelGetData\"控制.">
    常量 BASS_ATTRIB_USER <公开 类型 = 整数 值 = @BASS_ATTRIB_USER 注释 = "用户定义的信息." 注释 = "参数1: 信息."
            注释 = "参数2: 信息的大小,1(最小)到8(最大)." 注释 = "此属性可用于将任何信息与通道关联,可以将其设置为指针以获取更大的信息.">
    常量 BASS_ATTRIB_TAIL <公开 类型 = 整数 值 = @BASS_ATTRIB_TAIL 注释 = "增加通道长度的时间量. (HMUSIC/HSTREAM)"
            注释 = "参数: 增加的时间量(以秒为单位). 默认值为0. 变化立即生效."
            注释 = "此属性允许在通道结尾添加一段静音,这有助于在通道上听到DSP/FX处理的尾部,例如混响或回声效果.启用循环时不会添加静音."
            注释 = "在通道上设置的任何BASS_SYNC_END同步(通过BASS_ChannelSetSync)将触发两次: 一次在正常结束位置,另一次在尾部结束位置."
            注释 = "同步回调事件的\"数据\"参数将指示发生了什么.">
    常量 BASS_ATTRIB_PUSH_LIMIT <公开 类型 = 整数 值 = @BASS_ATTRIB_PUSH_LIMIT 注释 = "推送流的最大数据量."
            注释 = "参数: 以字节为单位的最大数据量,0=无限制." 注释 = "默认情况下,推送流可以保存的数据量仅受内存的限制. 此属性可用于设置下限,以防止流的缓冲区爆掉内存."
            注释 = "此限制不包括流的播放缓冲区." 注释 = "此限制可以随时更改,如果新的限制低于当前值,现有的流允许保留现有的数据,但在剩余数据低于新限制值之前,不会接受新的数据.">
    常量 BASS_ATTRIB_DOWNLOADPROC <公开 类型 = 整数 值 = @BASS_ATTRIB_DOWNLOADPROC
            注释 = "The download callback function on an internet stream." 注释 = "参数:"
            注释 = "info A pointer to a DOWNLOADPROC callback function and user parameter. The user parameter is optional; if it is not included then the existing value will be kept."
            注释 = "size The size of the info. This should be the size of one or two pointers, depending on whether a user parameter is included.">
    常量 BASS_ATTRIB_VOLDSP <公开 类型 = 整数 值 = @BASS_ATTRIB_VOLDSP
            注释 = "The volume level applied in the DSP chain of a channel."
            注释 = "参数: 音量级别... 0 = silent, 1.0 = normal, above 1.0 = amplification.">
    常量 BASS_ATTRIB_VOLDSP_PRIORITY <公开 类型 = 整数 值 = @BASS_ATTRIB_VOLDSP_PRIORITY
            注释 = "The priority of the volume DSP."
            注释 = "参数: priority The priority... -2147483648 (min) to 2147483647 (max). The value will be automatically capped to this range, and rounded down to a whole number."
            注释 = "Remarks"
            注释 = "This attribute determines where in the DSP chain the BASS_ATTRIB_VOLDSP attribute is applied; its effect will not be present in the data received by DSP functions with a higher priority. This attribute is write-only, so its value is not available via BASS_ChannelGetAttribute."
            注释 = "The default value is 2147483647 (max). Changes take immediate effect.">
    常量 BASS_ATTRIB_MUSIC_AMPLIFY <公开 类型 = 整数 值 = @BASS_ATTRIB_MUSIC_AMPLIFY 注释 = "MOD音乐的功放级别. (仅限HMUSIC)"
            注释 = "参数: 功放级别,0(最小)到100(最大). 将四舍五入为整数. 默认值为50.">
    常量 BASS_ATTRIB_MUSIC_PANSEP <公开 类型 = 整数 值 = @BASS_ATTRIB_MUSIC_PANSEP 注释 = "MOD音乐的声像分离级别. (HMUSIC)"
            注释 = "参数: 0(最小)到100(最大),50=线性. 将四舍五入为整数." 注释 = "默认情况下,低音使用线性声像\"曲线\". 如果要使用FT2的声像,请使用大约35的声像分离设置."
            注释 = "要使用Amiga声像(即完全偏左和偏右),请将其设置为100.">
    常量 BASS_ATTRIB_MUSIC_PSCALER <公开 类型 = 整数 值 = @BASS_ATTRIB_MUSIC_PSCALER 注释 = "MOD音乐的位置刻度. (HMUSIC)"
            注释 = "参数: 刻度,1(最小)到256(最大). 将四舍五入为整数. 默认值为1."
            注释 = "通过\"取通道位置/BASS_ChannelGetPosition\"获取顺序位置时,行将按此值缩放." 注释 = "通过使用更高的刻度,你可以获得更精确的位置指示.">
    常量 BASS_ATTRIB_MUSIC_BPM <公开 类型 = 整数 值 = @BASS_ATTRIB_MUSIC_BPM 注释 = "MOD音乐的BPM(每分钟节拍数). (HMUSIC)"
            注释 = "参数:  1(最小)到255(最大). 将四舍五入为整数." 注释 = "该属性是MOD音乐BPM的直接映射,因此可以通过MOD本身中的效果更改该值."
            注释 = "请注意更改此属性可以更改播放长度.">
    常量 BASS_ATTRIB_MUSIC_SPEED <公开 类型 = 整数 值 = @BASS_ATTRIB_MUSIC_SPEED 注释 = "MOD音乐的速度. (HMUSIC)"
            注释 = "参数: 速度,0(最小)到255(最大). 将四舍五入为整数." 注释 = "该属性是MOD速度的直接映射,因此可以通过MOD本身的效果更改该值."
            注释 = "\"速度\"是每行的滴答声数.将其设置为0,停止并结束音乐. 请注意更改此属性会改变播放长度.">
    常量 BASS_ATTRIB_MUSIC_VOL_GLOBAL <公开 类型 = 整数 值 = @BASS_ATTRIB_MUSIC_VOL_GLOBAL
            注释 = "MOD音乐的全局音量级别. (HMUSIC)" 注释 = "参数: 0(静音)到64(最大音量,IT格式音乐的最大值为128). 将四舍五入到整数."
            注释 = "该属性是MOD全局全局的直接映射,因此可以通过MOD本身的效果更改该值."
            注释 = "播放时因为缓冲,不会立即听到此属性更改后的效果.此延迟可以通过调整BASS_ATTRIB_BUFFER属性来降低.">
    常量 BASS_ATTRIB_MUSIC_ACTIVE <公开 类型 = 整数 值 = @BASS_ATTRIB_MUSIC_ACTIVE 注释 = "MOD音乐中的活动通道数量."
            注释 = "参数: 通道数量. 只读属性,只能获取不能设置." 注释 = "此属性提供解码器中当前活动的通道数(包括虚拟通道),由于缓冲,这些通道数可能与播放期间听到的声音不匹配.">
    常量 BASS_ATTRIB_MUSIC_VOL_CHAN <公开 类型 = 整数 值 = @BASS_ATTRIB_MUSIC_VOL_CHAN
            注释 = "MOD音乐其中一条通道音量级别. 使用时需要在后面+通道编号(从0开始)." 注释 = "参数: 0(静音)到1(最大音量)."
            注释 = "此属性使用的音量曲线始终是线性的,例如0.5=50%.BASS_CONFIG_CURVE_VOL配置选项的设置对此没有影响."
            注释 = "所有通道的音量级别默认为1(最大音量). 播放时因为缓冲,不会立即听到此属性更改后的效果.此延迟可以通过调整BASS_ATTRIB_BUFFER属性来降低."
            注释 = "此属性还可用于计算MOD音乐的通道数.">
    常量 BASS_ATTRIB_MUSIC_VOL_INST <公开 类型 = 整数 值 = @BASS_ATTRIB_MUSIC_VOL_INST
            注释 = "MOD音乐其中一个乐器音量级别. 使用时需要在后面+乐器编号(从0开始)." 注释 = "参数: 0(静音)到1(最大音量)."
            注释 = "此属性使用的音量曲线始终是线性的,例如0.5=50%.BASS_CONFIG_CURVE_VOL配置选项的设置对此没有影响."
            注释 = "所有乐器的音量级别默认为1(最大音量). 播放时因为缓冲,不会立即听到此属性更改后的效果.此延迟可以通过调整BASS_ATTRIB_BUFFER属性来降低."
            注释 = "此属性还可用于计算MOD乐器的数量数.">
    常量 ""
    常量 BASS_ATTRIB_SPLIT_ASYNCBUFFER <公开 类型 = 整数 值 = 0x15010 注释 = "【BASS混合器类】从分离器源异步缓冲的数据量."
            注释 = "参数: 缓冲的数据量(单位为秒). 0=禁用异步缓冲." 注释 = "异步缓冲将被限制为分离器的缓冲区长度,由BASS_CONFIG_SPLIT_BUFFER确定.">
    常量 BASS_ATTRIB_SPLIT_ASYNCPERIOD <公开 类型 = 整数 值 = 0x15011 注释 = "【BASS混合器类】一次从分离器源异步缓冲的最大数据量."
            注释 = "参数: 周期,一次从源异步缓冲的最大数据量(单位为秒). 0=尽可能多.">
}

类 BASS_音效类型 <公开 注释 = "\"置通道音效/BASS_ChannelSetFX\"的音效类型" 折叠 @文档 = "category = \"常量\"">
{
    常量 BASS_FX_DX8_CHORUS <公开 类型 = 整数 值 = @BASS_FX_DX8_CHORUS
            注释 = "DX8 和声. 使用\"BASS_DX8_CHORUS\"结构类来设置和获取参数.">
    常量 BASS_FX_DX8_COMPRESSOR <公开 类型 = 整数 值 = @BASS_FX_DX8_COMPRESSOR
            注释 = "DX8 压限. 使用\"BASS_DX8_COMPRESSOR\"结构类来设置和获取参数.">
    常量 BASS_FX_DX8_DISTORTION <公开 类型 = 整数 值 = @BASS_FX_DX8_DISTORTION
            注释 = "DX8 失真. 使用\"BASS_DX8_DISTORTION\"结构类来设置和获取参数.">
    常量 BASS_FX_DX8_ECHO <公开 类型 = 整数 值 = @BASS_FX_DX8_ECHO 注释 = "DX8 回声. 使用\"BASS_DX8_ECHO\"结构类来设置和获取参数.">
    常量 BASS_FX_DX8_FLANGER <公开 类型 = 整数 值 = @BASS_FX_DX8_FLANGER
            注释 = "DX8 镶边. 使用\"BASS_DX8_FLANGER\"结构类来设置和获取参数.">
    常量 BASS_FX_DX8_GARGLE <公开 类型 = 整数 值 = @BASS_FX_DX8_GARGLE
            注释 = "DX8 含漱. 使用\"BASS_DX8_GARGLE\"结构类来设置和获取参数.">
    常量 BASS_FX_DX8_I3DL2REVERB <公开 类型 = 整数 值 = @BASS_FX_DX8_I3DL2REVERB
            注释 = "DX8 I3DL2(交互式3D音效 Level 2)混响. 使用\"BASS_DX8_I3DL2REVERB\"结构类来设置和获取参数.">
    常量 BASS_FX_DX8_PARAMEQ <公开 类型 = 整数 值 = @BASS_FX_DX8_PARAMEQ
            注释 = "DX8 频段均衡器. 使用\"BASS_DX8_PARAMEQ\"结构类来设置和获取参数.">
    常量 BASS_FX_DX8_REVERB <公开 类型 = 整数 值 = @BASS_FX_DX8_REVERB
            注释 = "DX8 混响. 使用\"BASS_DX8_REVERB\"结构类来设置和获取参数.">
    常量 BASS_FX_VOLUME <公开 类型 = 整数 值 = @BASS_FX_VOLUME 注释 = "音量级别调节. 使用\"BASS_FX_VOLUME_PARAM\"结构类来设置和获取参数.">
}

类 BASS_通道状态 <公开 折叠 @文档 = "category = \"常量\"">
{
    常量 已停止 <公开 类型 = 整数 值 = 0 注释 = "0 BASS_ACTIVE_STOPPED  通道已被停止,或者句柄无效.">
    常量 播放中 <公开 类型 = 整数 值 = 1 注释 = "1 BASS_ACTIVE_PLAYING  通道正在播放或正在录制.">
    常量 停滞中 <公开 类型 = 整数 值 = 2 注释 = "2 BASS_ACTIVE_STALLED  由于缺少采样数据,通道已停滞.当有更多数据可用时,它将自动恢复.">
    常量 已暂停 <公开 类型 = 整数 值 = 3 注释 = "3 BASS_ACTIVE_PAUSED   通道处于暂停状态.">
    常量 设备暂停 <公开 类型 = 整数 值 = 4 注释 = "4 BASS_ACTIVE_PAUSED_DEVICE 通道的设备已被暂停.">
    常量 等待中 <公开 类型 = 整数 值 = 5
            注释 = "5 BASS_ACTIVE_WAITING  通道正在等待启动,因为它被BBASS_Mixer_StreamAddChannelEx延迟启动了.">
    常量 已队列 <公开 类型 = 整数 值 = 6 注释 = "6 BASS_ACTIVE_QUEUED   通道正在队列中等待.">
}

类 BASS_DX8_CHORUS <公开 基础类 = PIV结构模板 注释 = "BASS_FX_DX8_CHORUS 和声音效的结构类" 折叠 @文档 = "category = \"辅助类\""
        @别名 = "BASS_DX8_CHORUS" @别名类型 = 本地结构 @模板实现类 = "BASS_DX8_CHORUS">
{
    变量 干湿比 <公开 类型 = 单精度小数 注释 = "湿(已处理)信号与干(未处理)信号的比率. 必须在0到100之间(全湿). 默认值为50." @输出名 = "fWetDryMix">
    变量 深度 <公开 类型 = 单精度小数 注释 = "低频振荡器(LFO)调制延迟时间的百分比. 必须在0到100之间. 默认值为10." @输出名 = "fDepth">
    变量 反馈 <公开 类型 = 单精度小数 注释 = "输出信号反馈到效果输入的百分比, 范围为-99到99. 默认值为25." @输出名 = "fFeedback">
    变量 频率 <公开 类型 = 单精度小数 注释 = "LFO的频率,在0到10之间. 默认值为1.1" @输出名 = "fFrequency">
    变量 波形 <公开 类型 = 整数 注释 = "LFO的波形. 0 = 三角, 1 = 正弦. 默认的波形为正弦." @输出名 = "lWaveform">
    变量 延迟 <公开 类型 = 单精度小数 注释 = "在播放输入之前延迟的毫秒数,范围为0到20. 默认值为16毫秒." @输出名 = "fDelay">
    变量 相位差 <公开 类型 = 整数 注释 = "左右LFO之间的相位差,为以下选项的其中之一,默认值为 BASS_DX8_PHASE_90."
            注释 = " 0 = BASS_DX8_PHASE_NEG_180" 注释 = " 1 = BASS_DX8_PHASE_NEG_90" 注释 = " 2 = BASS_DX8_PHASE_ZERO"
            注释 = " 3 = BASS_DX8_PHASE_90" 注释 = " 4 = BASS_DX8_PHASE_180" @输出名 = "lPhase">

    方法 取展示内容 <公开 静态 类型 = 文本型 注释 = "将本对象中的所有数据用文本方式返回,用作调试或其它场合展示时使用." 折叠>
    参数 欲操作本对象 <类型 = BASS_DX8_CHORUS>
    {
        变量 格式文本 <类型 = 文本型
                值 = "<BASS_DX8_CHORUS> 总共 7 个成员:\r\n1. 干湿比: %f\r\n2. 深度: %f\r\n3. 反馈: %f\r\n4. 频率: %f\r\n5. 波形: %u\r\n6. 延迟: %f\r\n7. 相位差: %u">
        返回 (取格式文本 (格式文本, 欲操作本对象.干湿比, 欲操作本对象.深度, 欲操作本对象.反馈, 欲操作本对象.频率, 欲操作本对象.波形, 欲操作本对象.延迟, 欲操作本对象.相位差))
    }
}

类 BASS_DX8_COMPRESSOR <公开 基础类 = PIV结构模板 注释 = "BASS_FX_DX8_COMPRESSOR 压限音效的结构类" 折叠
        @文档 = "category = \"辅助类\"" @别名 = "BASS_DX8_COMPRESSOR" @别名类型 = 本地结构 @模板实现类 = "BASS_DX8_COMPRESSOR">
{
    变量 增益 <公开 类型 = 单精度小数 注释 = "信号压限后的输出增益,范围为-60到60. 默认值为0 dB." @输出名 = "fGain">
    变量 起奏 <公开 类型 = 单精度小数 注释 = "压限达到其完整值之前的时间,范围为0.01到500. 默认值为10毫秒." @输出名 = "fAttack">
    变量 释放 <公开 类型 = 单精度小数 注释 = "输入下降到fThreshold以下后停止压限的速度,范围为50到3000. 默认值为200毫秒." @输出名 = "fRelease">
    变量 阈值 <公开 类型 = 单精度小数 注释 = "开始压限的地点,单位为分贝, 范围为-60到0. 默认值为-20 dB." @输出名 = "fThreshold">
    变量 压限比 <公开 类型 = 单精度小数 注释 = "压限比,在1到100之间. 默认值为3,表示压限比为3:1." @输出名 = "fRatio">
    变量 预延迟 <公开 类型 = 单精度小数 注释 = "起奏阶段开始至达到fThreshold后的时间(毫秒),范围为0到4. 默认值为4毫秒." @输出名 = "fPredelay">

    方法 取展示内容 <公开 静态 类型 = 文本型 注释 = "将本对象中的所有数据用文本方式返回,用作调试或其它场合展示时使用." 折叠>
    参数 欲操作本对象 <类型 = BASS_DX8_COMPRESSOR>
    {
        变量 格式文本 <类型 = 文本型
                值 = "<BASS_DX8_COMPRESSOR> 总共 6 个成员:\r\n1. 增益: %f\r\n2. 起奏: %f\r\n3. 释放: %f\r\n4. 阈值: %f\r\n5. 压限比: %f\r\n6. 预延迟: %f">
        返回 (取格式文本 (格式文本, 欲操作本对象.增益, 欲操作本对象.起奏, 欲操作本对象.释放, 欲操作本对象.阈值, 欲操作本对象.压限比, 欲操作本对象.预延迟))
    }
}

类 BASS_DX8_DISTORTION <公开 基础类 = PIV结构模板 注释 = "BASS_FX_DX8_DISTORTION 失真音效的结构类" 折叠
        @文档 = "category = \"辅助类\"" @别名 = "BASS_DX8_DISTORTION" @别名类型 = 本地结构 @模板实现类 = "BASS_DX8_COMPRESSOR">
{
    变量 增益 <公开 类型 = 单精度小数 注释 = "失真后的信号变化量,范围为-60到0. 默认值为-18 dB." @输出名 = "fGain">
    变量 边缘 <公开 类型 = 单精度小数 注释 = "失真强度的百分比,范围为0到100. 默认值为15%." @输出名 = "fEdge">
    变量 后置EQ中置频率 <公开 类型 = 单精度小数 注释 = "谐波含量增加的中置频率,范围为100到8000. 默认值为2400 Hz." @输出名 = "fPostEQCenterFrequency">
    变量 后置EQ带宽 <公开 类型 = 单精度小数 注释 = "确定谐波含量增加范围的频段宽度,范围为100到8000. 默认值为2400 Hz." @输出名 = "fPostEQBandwidth">
    变量 预低通切断 <公开 类型 = 单精度小数 注释 = "用于高频谐波衰减的滤波器切断,范围为100到8000。 默认值为8000 Hz." @输出名 = "fPreLowpassCutoff">

    方法 取展示内容 <公开 静态 类型 = 文本型 注释 = "将本对象中的所有数据用文本方式返回,用作调试或其它场合展示时使用." 折叠>
    参数 欲操作本对象 <类型 = BASS_DX8_DISTORTION>
    {
        变量 格式文本 <类型 = 文本型
                值 = "<BASS_DX8_DISTORTION> 总共 5 个成员:\r\n1. 增益: %f\r\n2. 边缘: %f\r\n3. 后置EQ中置频率: %f\r\n4. 后置EQ带宽: %f\r\n5. 预低通切断: %f">
        返回 (取格式文本 (格式文本, 欲操作本对象.增益, 欲操作本对象.边缘, 欲操作本对象.后置EQ中置频率, 欲操作本对象.后置EQ带宽, 欲操作本对象.预低通切断))
    }
}

类 BASS_DX8_ECHO <公开 基础类 = PIV结构模板 注释 = "BASS_FX_DX8_ECHO 回声音效的结构类" 折叠 @文档 = "category = \"辅助类\""
        @别名 = "BASS_DX8_ECHO" @别名类型 = 本地结构 @模板实现类 = "BASS_DX8_ECHO">
{
    变量 干湿比 <公开 类型 = 单精度小数 注释 = "湿(已处理)信号与干(未处理)信号的比率. 必须在0到100之间(全湿). 默认值为50." @输出名 = "fWetDryMix">
    变量 反馈 <公开 类型 = 单精度小数 注释 = "输出信号反馈到效果输入的百分比, 范围为0到100. 默认值为50." @输出名 = "fFeedback">
    变量 左延迟 <公开 类型 = 单精度小数 注释 = "左声道的延迟(毫秒),范围为1到2000. 默认值为500毫秒." @输出名 = "fLeftDelay">
    变量 右延迟 <公开 类型 = 单精度小数 注释 = "右声道的延迟(毫秒),范围为1到2000. 默认值为500毫秒." @输出名 = "fRightDelay">
    变量 交替延迟 <公开 类型 = 逻辑型 注释 = "该值指定是否交替每个连续回声的左右延迟. 默认值为假,表示没有交替." @输出名 = "lPanDelay">

    方法 取展示内容 <公开 静态 类型 = 文本型 注释 = "将本对象中的所有数据用文本方式返回,用作调试或其它场合展示时使用." 折叠>
    参数 欲操作本对象 <类型 = BASS_DX8_ECHO>
    {
        变量 格式文本 <类型 = 文本型
                值 = "<BASS_DX8_ECHO> 总共 5 个成员:\r\n1. 干湿比: %f\r\n2. 反馈: %f\r\n3. 左延迟: %f\r\n4. 右延迟: %f\r\n5. 交替延迟: %s\r\n">
        返回 (取格式文本 (格式文本, 欲操作本对象.干湿比, 欲操作本对象.反馈, 欲操作本对象.左延迟, 欲操作本对象.右延迟, 选择 (欲操作本对象.交替延迟, "真", "假")))
    }
}

类 BASS_DX8_FLANGER <公开 基础类 = PIV结构模板 注释 = "BASS_FX_DX8_FLANGER 镶边音效的结构类" 折叠 @文档 = "category = \"辅助类\""
        @别名 = "BASS_DX8_FLANGER" @别名类型 = 本地结构 @模板实现类 = "BASS_DX8_FLANGER">
{
    变量 干湿比 <公开 类型 = 单精度小数 注释 = "湿(已处理)信号与干(未处理)信号的比率. 必须在0到100之间(全湿). 默认值为50." @输出名 = "fWetDryMix">
    变量 深度 <公开 类型 = 单精度小数 注释 = "低频振荡器(LFO)调制延迟时间的百分比. 必须在0到100之间. 默认值为100." @输出名 = "fDepth">
    变量 反馈 <公开 类型 = 单精度小数 注释 = "输出信号反馈到效果输入的百分比, 范围为-99到99. 默认值为-50." @输出名 = "fFeedback">
    变量 频率 <公开 类型 = 单精度小数 注释 = "LFO的频率,在0到10之间. 默认值为0.25" @输出名 = "fFrequency">
    变量 波形 <公开 类型 = 整数 注释 = "LFO的波形. 0 = 三角, 1 = 正弦. 默认的波形为正弦." @输出名 = "lWaveform">
    变量 延迟 <公开 类型 = 单精度小数 注释 = "在播放输入之前延迟的毫秒数,范围为0到4. 默认值为2毫秒." @输出名 = "fDelay">
    变量 相位差 <公开 类型 = 整数 注释 = "左右LFO之间的相位差,为以下选项的其中之一,默认值为 BASS_DX8_PHASE_90."
            注释 = " 0 = BASS_DX8_PHASE_NEG_180" 注释 = " 1 = BASS_DX8_PHASE_NEG_90" 注释 = " 2 = BASS_DX8_PHASE_ZERO"
            注释 = " 3 = BASS_DX8_PHASE_90" 注释 = " 4 = BASS_DX8_PHASE_180" @输出名 = "lPhase">

    方法 取展示内容 <公开 静态 类型 = 文本型 注释 = "将本对象中的所有数据用文本方式返回,用作调试或其它场合展示时使用." 折叠>
    参数 欲操作本对象 <类型 = BASS_DX8_FLANGER>
    {
        变量 格式文本 <类型 = 文本型
                值 = "<BASS_DX8_CHORUS> 总共 7 个成员:\r\n1. 干湿比: %f\r\n2. 深度: %f\r\n3. 反馈: %f\r\n4. 频率: %f\r\n5. 波形: %u\r\n6. 延迟: %f\r\n7. 相位差: %u">
        返回 (取格式文本 (格式文本, 欲操作本对象.干湿比, 欲操作本对象.深度, 欲操作本对象.反馈, 欲操作本对象.频率, 欲操作本对象.波形, 欲操作本对象.延迟, 欲操作本对象.相位差))
    }
}

类 BASS_DX8_GARGLE <公开 基础类 = PIV结构模板 注释 = "BASS_FX_DX8_GARGLE 含漱音效的结构类" 折叠 @文档 = "category = \"辅助类\""
        @别名 = "BASS_DX8_GARGLE" @别名类型 = 本地结构 @模板实现类 = "BASS_DX8_GARGLE">
{
    变量 调制速率 <公开 类型 = 整数 注释 = "调制速率,单位为赫兹. 必须在1到1000之间. 默认值为20." @输出名 = "dwRateHz">
    变量 波形形状 <公开 类型 = 整数 注释 = "调制波形的形状. 0=三角形, 1=正方形. 默认为三角波形." @输出名 = "dwWaveShape">

    方法 取展示内容 <公开 静态 类型 = 文本型 注释 = "将本对象中的所有数据用文本方式返回,用作调试或其它场合展示时使用." 折叠>
    参数 欲操作本对象 <类型 = BASS_DX8_GARGLE>
    {
        变量 格式文本 <类型 = 文本型 值 = "<BASS_DX8_GARGLE> 总共 2 个成员:\r\n1. 调制速率: %u\r\n2. 波形形状: %u">
        返回 (取格式文本 (格式文本, 欲操作本对象.调制速率, 欲操作本对象.波形形状))
    }
}

类 BASS_DX8_I3DL2REVERB <公开 基础类 = PIV结构模板 注释 = "BASS_FX_DX8_I3DL2REVERB I3DL2(交互式3D音效 Level 2)混响音效的结构类"
        折叠 @文档 = "category = \"辅助类\"" @别名 = "BASS_DX8_I3DL2REVERB" @别名类型 = 本地结构
        @模板实现类 = "BASS_DX8_I3DL2REVERB">
{
    变量 房间 <公开 类型 = 整数 注释 = "房间效果的衰减,单位为毫贝(mB),范围为-10000到0 mB. 默认值为-1000 mB." @输出名 = "lRoom">
    变量 房间高频 <公开 类型 = 整数 注释 = "房间高频效果的衰减,单位为mB,范围为-10000到0 mB. 默认值为-100 mB." @输出名 = "lRoomHF">
    变量 房间滚降系数 <公开 类型 = 单精度小数 注释 = "反射信号的滚降系数,范围为0到10. 默认值为0.0" @输出名 = "flRoomRolloffFactor">
    变量 衰减时间 <公开 类型 = 单精度小数 注释 = "衰减时间,单位为秒,范围为0.1到20. 默认值为1.49秒." @输出名 = "flDecayTime">
    变量 衰减高频比率 <公开 类型 = 单精度小数 注释 = "高频衰减时间与低频衰减时间的比率,范围为0.1至2. 默认值为0.83" @输出名 = "flDecayHFRatio">
    变量 反射 <公开 类型 = 整数 注释 = "相对于lRoom的早期反射衰减,单位为mB,范围为-10000到1000. 默认值为-2602 mB." @输出名 = "lReflections">
    变量 反射延迟 <公开 类型 = 单精度小数 注释 = "第一次反射相对于直接路径的延迟时间(秒),范围为0到0.3秒. 默认值为0.007秒." @输出名 = "flReflectionsDelay">
    变量 混响 <公开 类型 = 整数 注释 = "相对于lRoom的后期混响衰减,单位为mB,范围为-10000到2000 mB. 默认值为200 mB." @输出名 = "lReverb">
    变量 混响延迟 <公开 类型 = 单精度小数 注释 = "相对于第一次反射时间,早期反射和后期混响之间的时间限制(单位为秒),范围为0到0.1秒. 默认值为0.011秒."
            @输出名 = "flReverbDelay">
    变量 扩散 <公开 类型 = 单精度小数 注释 = "后期混响衰减中的回声密度,以百分比表示,范围为0到100. 默认值为100.0%." @输出名 = "flDiffusion">
    变量 密度 <公开 类型 = 单精度小数 注释 = "后期混响衰减中的模态密度,以百分比表示,范围为0到100. 默认值为100.0%." @输出名 = "flDensity">
    变量 参考高频 <公开 类型 = 单精度小数 注释 = "参考高频,单位为赫兹,范围为20到20000. 默认值为5000.0 Hz." @输出名 = "flHFReference">

    方法 取展示内容 <公开 静态 类型 = 文本型 注释 = "将本对象中的所有数据用文本方式返回,用作调试或其它场合展示时使用." 折叠>
    参数 欲操作本对象 <类型 = BASS_DX8_I3DL2REVERB>
    {
        变量 格式文本 <类型 = 文本型
                值 = "<BASS_DX8_I3DL2REVERB> 总共 12 个成员:\r\n1. 房间: %d\r\n2. 房间高频: %d\r\n3. 房间滚降系数: %f\r\n4. 衰减时间: %f\r\n5. 衰减高频比率: %f\r\n6. 反射: %d\r\n7. 反射延迟: %f\r\n8. 混响: %d\r\n9. 混响延迟: %f\r\n10. 扩散: %f\r\n11. 密度: %f\r\n12. 参考高频: %f">
        返回 (取格式文本 (格式文本, 欲操作本对象.房间, 欲操作本对象.房间高频, 欲操作本对象.房间滚降系数, 欲操作本对象.衰减时间, 欲操作本对象.衰减高频比率, 欲操作本对象.反射, 欲操作本对象.反射延迟, 欲操作本对象.混响, 欲操作本对象.混响延迟, 欲操作本对象.扩散, 欲操作本对象.密度, 欲操作本对象.参考高频))
    }
}

类 BASS_DX8_PARAMEQ <公开 基础类 = PIV结构模板 注释 = "BASS_FX_DX8_PARAMEQ 频段均衡器音效的结构类" 折叠
        @文档 = "category = \"辅助类\"" @别名 = "BASS_DX8_PARAMEQ" @别名类型 = 本地结构 @模板实现类 = "BASS_DX8_PARAMEQ">
{
    变量 中置频率 <公开 类型 = 单精度小数 注释 = "中置频率,单位为赫兹." @输出名 = "fCenter">
    变量 带宽 <公开 类型 = 单精度小数 注释 = "带宽,以半音阶表示,范围从1到36. 默认值为12." @输出名 = "fBandwidth">
    变量 增益 <公开 类型 = 单精度小数 注释 = "增益,范围从-15到15. 默认值为0 dB." @输出名 = "fGain">

    方法 取展示内容 <公开 静态 类型 = 文本型 注释 = "将本对象中的所有数据用文本方式返回,用作调试或其它场合展示时使用." 折叠>
    参数 欲操作本对象 <类型 = BASS_DX8_PARAMEQ>
    {
        变量 格式文本 <类型 = 文本型 值 = "<BASS_DX8_I3DL2REVERB> 总共 3 个成员:\r\n1. 中置频率: %f\r\n2. 带宽: %f\r\n3. 增益: %f">
        返回 (取格式文本 (格式文本, 欲操作本对象.中置频率, 欲操作本对象.带宽, 欲操作本对象.增益))
    }
}

类 BASS_DX8_REVERB <公开 基础类 = PIV结构模板 注释 = "BASS_FX_DX8_REVERB 混响音效的结构类" 折叠 @文档 = "category = \"辅助类\""
        @别名 = "BASS_DX8_REVERB" @别名类型 = 本地结构 @模板实现类 = "BASS_DX8_REVERB">
{
    变量 输入增益 <公开 类型 = 单精度小数 注释 = "信号的输入增益,单位为分贝(dB),范围为-96到0. 默认值为0 dB." @输出名 = "fInGain">
    变量 混响混合 <公开 类型 = 单精度小数 注释 = "混响混合,单位为分贝,范围为-96到0. 默认值为0 dB." @输出名 = "fReverbMix">
    变量 混响时间 <公开 类型 = 单精度小数 注释 = "混响时间,单位为毫秒,范围为0.001到3000. 默认值为1000." @输出名 = "fReverbTime">
    变量 高频混响时间比 <公开 类型 = 单精度小数 注释 = "高频混响时间比,范围为0.001到0.999. 默认值为0.001." @输出名 = "fHighFreqRTRatio">

    方法 取展示内容 <公开 静态 类型 = 文本型 注释 = "将本对象中的所有数据用文本方式返回,用作调试或其它场合展示时使用." 折叠>
    参数 欲操作本对象 <类型 = BASS_DX8_REVERB>
    {
        变量 格式文本 <类型 = 文本型
                值 = "<BASS_DX8_REVERB> 总共 4个成员:\r\n1. 输入增益: %f\r\n2. 混响混合: %f\r\n3. 混响时间: %f\r\n4. 高频混响时间比: %f">
        返回 (取格式文本 (格式文本, 欲操作本对象.输入增益, 欲操作本对象.混响混合, 欲操作本对象.混响时间, 欲操作本对象.高频混响时间比))
    }
}

类 BASS_FX_VOLUME_PARAM <公开 基础类 = PIV结构模板 注释 = "BASS_FX_VOLUME_PARAM 音量级别调节音效的结构类" 注释 = "" 折叠
        @文档 = "category = \"辅助类\"" @别名 = "BASS_FX_VOLUME_PARAM" @别名类型 = 本地结构 @模板实现类 = "BASS_FX_VOLUME_PARAM">
{
    变量 目标音量 <公开 类型 = 单精度小数 注释 = "新的音量级别. 0=静音,1.0=正常,大于1.0=放大. 默认值为1." @输出名 = "fTarget">
    变量 当前音量 <公开 类型 = 单精度小数 注释 = "当前音量级别. -1=设置参数时保持当前的级别. 默认值为1." @输出名 = "fCurrent">
    变量 过渡时间 <公开 类型 = 单精度小数 注释 = "从当前音量级别过渡到新级别所需的时间,以秒为单位. 默认值为0." @输出名 = "fTime">
    变量 曲线模式 <公开 类型 = 整数 注释 = "在过渡时使用的曲线. 0=线性, 1=对数. 默认值为0." @输出名 = "lCurve">

    方法 取展示内容 <公开 静态 类型 = 文本型 注释 = "将本对象中的所有数据用文本方式返回,用作调试或其它场合展示时使用." 折叠>
    参数 欲操作本对象 <类型 = BASS_FX_VOLUME_PARAM>
    {
        变量 格式文本 <类型 = 文本型
                值 = "<BASS_FX_VOLUME_PARAM> 总共 4 个成员:\r\n1. 目标音量: %f\r\n2. 当前音量: %f\r\n3. 过渡时间: %f\r\n4. 曲线模式: %u">
        返回 (取格式文本 (格式文本, 欲操作本对象.目标音量, 欲操作本对象.当前音量, 欲操作本对象.过渡时间, 欲操作本对象.曲线模式))
    }
}

类 TAG_ID3 <公开 基础类 = 扩展对象类 注释 = "ID3v1 标签的结构体" 折叠 @文档 = "category = \"辅助类\"">
{
    变量 ID <公开 类型 = 文本型 注释 = "ID3v1 标签标识符,为\"TAG\"">
    变量 标题 <公开 类型 = 文本型 注释 = "歌曲标题">
    变量 艺术家 <公开 类型 = 文本型 注释 = "艺术家姓名">
    变量 专辑 <公开 类型 = 文本型 注释 = "专辑标题">
    变量 年份 <公开 类型 = 文本型 注释 = "出版年份">
    变量 注释 <公开 类型 = 文本型 注释 = "注释">
    变量 流派 <公开 类型 = 字节 注释 = "流派编号">

    方法 取展示内容 <公开 注释 = "将本对象中的所有数据用文本方式填入到所提供的文本参数中,用作调试或其它场合展示时使用." 折叠 @虚拟方法 = 可覆盖>
    参数 展示内容 <类型 = 文本型 注释 = "用作填入本对象中所有数据的展示文本">
    参数 最大展示数据尺寸 <类型 = 整数 注释 = "提供用户所指定的最大允许展示数据尺寸,小于0表示全部展示,等于0表示展示默认尺寸数据.">
    {
        展示内容 = "<TAG_ID3> 总共 6 个成员:\r\n"
        加入文本 (展示内容, "1. ID: " + 取调试文本2 (最大展示数据尺寸, ID) + "\r\n")
        加入文本 (展示内容, "2. 标题: " + 取调试文本2 (最大展示数据尺寸, 标题) + "\r\n")
        加入文本 (展示内容, "3. 艺术家: " + 取调试文本2 (最大展示数据尺寸, 艺术家) + "\r\n")
        加入文本 (展示内容, "4. 年份: " + 取调试文本2 (最大展示数据尺寸, 年份) + "\r\n")
        加入文本 (展示内容, "5. 注释: " + 取调试文本2 (最大展示数据尺寸, 注释) + "\r\n")
        加入文本 (展示内容, "6. 流派: " + 取调试文本2 (最大展示数据尺寸, 流派))
    }
}

类 BASS_位深度 <公开 折叠 @文档 = "category = \"常量\"" @常量类 = 整数>
{
    常量 位深_8位 <公开 值 = 8 注释 = "8位整数">
    常量 位深_16位 <公开 值 = 16 注释 = "16位整数">
    常量 位深_24位 <公开 值 = 24 注释 = "24位整数">
    常量 位深_32位 <公开 值 = 32 注释 = "32位浮点数">

    #
}
