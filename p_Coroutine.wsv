<火山程序 类型 = "通常" 版本 = 1 />

包 火山.PIV基础类 <注释 = "https://github.com/SaierMe/piv">

类 Go协程 <公开 基础类 = PIV对象类 注释 = "Golang风格的C++11协程库" 注释 = "https://github.com/yyzybb537/libgo" 折叠
        @文档 = "category = \"协程\"" @视窗.头文件搜寻目录 = "src\\libgo\\netio\\windows"
        @视窗.外部头文件 = "src\\libgo\\libgo.h\r\nsrc\\libgo\\netio\\windows\\win_vc_hook.h"
        @视窗.外部源文件 = "src\\libgo\\libgo.cpp\r\nsrc\\libgo\\netio\\windows\\win_vc_hook.cpp">
{
    变量 配置选项 <公开 静态 类型 = 协程配置选项 注释 = "协程的全局配置选项">
    变量 调度器 <公开 静态 类型 = 协程调度器 注释 = "默认的协程调度器">

    方法 创建协程任务 <公开 静态 注释 = "在当前协程处理器或默认协程调度器中创建一个绑定函数对象的协程任务." 注释 = "  1. 协程创建以后不会立即执行,而是暂存至可执行列表中,等待调度器调度;"
            折叠 @嵌入式方法 = "">
    参数 函数对象 <类型 = 通用函数对象 注释 = "所欲协程执行的函数对象,可以调用下列方法创建:" 注释 = "- 绑定静态方法   绑定无参数静态方法"
            注释 = "- 绑定动态方法   绑定无参数动态方法" 注释 = "- 绑定函数指针   绑定无参数函数指针" 注释 = "- 绑定函数指针2  绑定无参数函数指针2">
    {
        @ @sn<current_class_def>::CreateTask(@<函数对象>, __FILE__, __LINE__)
    }

    方法 创建静态协程 <公开 静态 注释 = "在当前协程处理器或默认协程调度器中创建一个绑定静态方法的协程任务." 注释 = "  1. 协程创建以后不会立即执行,而是暂存至可执行列表中,等待调度器调度;"
            注释 = "  2. 可以绑定任意参数和返回值格式的静态方法,同时应提供格式一致的参数列表;" 折叠 @嵌入式方法 = "">
    参数 静态方法 <注释 = "提供所欲协程执行的静态方法" @匹配方法 = "">
    参数 参数列表 <注释 = "参数表的格式务必和\"静态方法\"的参数表一致;" 注释 = "默认将提交的参数按值复制.如果想引用传递,请用\"引用\"方法将参数包装." @可扩展 = ""
            @匹配类型 = 通用型>
    {
        @ co::__go(__FILE__, __LINE__) - std::bind(&@<静态方法>, @<参数列表>)
    }

    方法 创建动态协程 <公开 静态 注释 = "在当前协程处理器或默认协程调度器中创建一个绑定类动态方法的协程任务."
            注释 = "  1. 协程创建以后不会立即执行,而是暂存至可执行列表中,等待调度器调度;" 注释 = "  2. 可以绑定任意参数和返回值格式的类动态方法,同时应提供格式一致的参数列表;"
            注释 = "  3. 动态方法可以直接调用类实例的其他动态成员变量和方法;" 折叠 @嵌入式方法 = "">
    参数 对象实例 <类型 = 对象类 注释 = "提供协程函数所属的对象实例(即类变量),也可以填\"本对象\"、\"读指针处对象()\"." "">
    参数 方法输出名 <类型 = 文本型 注释 = "提供所欲协程执行的动态方法输出名." 注释 = "注意: 方法必须设置属性\"@输出名\",并设置\"@强制输出\"以确保被编译."
            @需求类型 = 立即数或常量>
    参数 参数列表 <注释 = "参数列表的格式务必和所提供动态方法的参数表一致;" 注释 = "默认将提交的参数按值复制.如果想引用传递,请用\"引用\"方法将参数包装." @可扩展 = ""
            @匹配类型 = 通用型>
    {
        @ co::__go(__FILE__, __LINE__) - std::bind(&@pdt<对象实例>::@pvpt<方法输出名>, &@<对象实例>, @<参数列表>)
    }

    方法 创建无参数静态协程 <公开 静态 注释 = "在当前协程处理器或默认协程调度器中创建一个绑定无参数静态方法的协程任务."
            注释 = "  1. 协程创建以后不会立即执行,而是暂存至可执行列表中,等待调度器调度;" 折叠 @嵌入式方法 = "">
    参数 静态方法 <注释 = "提供所欲协程执行的静态方法" @匹配方法 = "">
    {
        @ co::__go(__FILE__, __LINE__) - std::bind(&@<静态方法>)
    }

    方法 创建无参数动态协程 <公开 静态 注释 = "在当前协程处理器或默认协程调度器中创建一个绑定无参数类动态方法的协程任务."
            注释 = "  1. 协程创建以后不会立即执行,而是暂存至可执行列表中,等待调度器调度;" 注释 = "  2. 动态方法可以直接调用类实例的其他动态成员变量和方法;" 折叠 @嵌入式方法 = "">
    参数 对象实例 <类型 = 对象类 注释 = "提供协程函数所属的对象实例(即类变量),也可以填\"本对象\"、\"读指针处对象()\"." "">
    参数 方法输出名 <类型 = 文本型 注释 = "提供所欲协程执行的动态方法输出名." 注释 = "注意: 方法必须设置属性\"@输出名\",并设置\"@强制输出\"以确保被编译."
            @需求类型 = 立即数或常量>
    {
        @ co::__go(__FILE__, __LINE__) - std::bind(&@pdt<对象实例>::@pvpt<方法输出名>, &@<对象实例>)
    }

    方法 创建无参数无返回值动态协程 <公开 静态 注释 = "在当前协程处理器或默认协程调度器中创建一个绑定无参数类动态方法的协程任务."
            注释 = "  1. 协程创建以后不会立即执行,而是暂存至可执行列表中,等待调度器调度;" 注释 = "  2. 动态方法可以直接调用类实例的其他动态成员变量和方法;" 折叠 @嵌入式方法 = "">
    参数 对象实例 <类型 = 对象类 注释 = "提供协程函数所属的对象实例(即类变量),也可以填\"本对象\"、\"读指针处对象()\"." "">
    参数 动态方法 <注释 = "提供所欲协程执行的类动态方法." 注释 = "注意: 方法不需要设置输出名,但必须是无参数和无返回值." @匹配方法 = "无参数无返回值方法">
    {
        @ co::__go(__FILE__, __LINE__) - std::bind(&@pdt<对象实例>::@<动态方法>, &@<对象实例>)
    }

    方法 无参数无返回值方法

    方法 启动调度器 <公开 静态 注释 = "在新线程中启动默认协程调度器,开始执行协程." 注释 = "  1. 本方法全局只能执行一次,第二次执行会导致程序退出;" 折叠>
    参数 最小线程数 <类型 = 整数 注释 = "最小调度线程数,为0时设置为cpu核心数." @默认值 = 0>
    参数 最大线程数 <类型 = 整数 注释 = "最大调度线程数,为0时与\"最小线程数\"相同;" 注释 = "如果大于\"最小线程数\",则当协程产生长时间阻塞时,可以自动扩展调度线程数."
            @默认值 = 0>
    {
        @ static bool started;
        @ if (started) return;
        @ started = true;
        @ std::thread(
        @     [=] { co::Scheduler::getInstance().Start(@<最小线程数>, @<最大线程数>); }
        @ ).detach();
    }

    方法 停止调度器 <公开 静态 注释 = "停止默认协程调度器." 注释 = "  1. 停止后无法恢复,仅用于安全退出入口函数,不保证终止所有线程;"
            注释 = "  2. 如果某个调度线程被协程阻塞,必须等待阻塞结束才能退出;" 注释 = "  3. 除非是进程退出的时候,否则你不应该使用它;" 折叠 @嵌入式方法 = "">
    {
        @ co::Scheduler::getInstance().Stop()
    }

    方法 让出调度 <公开 静态 注释 = "主动让出调度器的执行权限,让调度器有机会去执行其他协程." 注释 = "  1. 当前协程会被移动到可执行协程列表的尾部;"
            注释 = "  2. 在协程外使用不会有任何效果,也不会出错;" 折叠 @嵌入式方法 = "">
    {
        @ do { co::Processer::StaticCoYield(); } while (0)
    }

    方法 协程延时 <公开 静态 注释 = "在协程中使用的延时功能,不会阻塞其他协程的执行."
            注释 = "注: libgo默认HOOK了\"延时\"命令,让它跟本方法一样,但如果你禁止HOOK,则需要使用本方法." 折叠>
    参数 欲等待的时间 <类型 = 长整数 注释 = "指定欲暂停程序执行的时间,单位为毫秒.">
    {
        @ if (@<欲等待的时间> <= 0) return;
        @ co::Task* tk = co::Processer::GetCurrentTask();
        @ if (!tk) {
        @     std::this_thread::sleep_for(std::chrono::milliseconds(@<欲等待的时间>));
        @     return;
        @ }
        @ co::Processer::Suspend(std::chrono::milliseconds(@<欲等待的时间>));
        @ co::Processer::StaticCoYield();
    }

    方法 启用调试器 <公开 静态 注释 = "启用libgo内部的调试器" @视窗.预定义宏 = "LIBGO_ENABLE_DEBUGGER=1">

    方法 启用HOOK <公开 静态 注释 = "禁用libgo的HOOK功能." 注释 = "libgo默认HOOK了部分系统API,使一些第三方库不用修改也可以异步并发."
            @视窗.预定义宏 = "LIBGO_ENABLE_HOOK=1">

    # @begin
    # <> <include>
    # static void CreateTask(const std::function<void()>& fn, const char* file, int lineno) {
    #     co::Scheduler* scheduler_ = co::Processer::GetCurrentScheduler();
    #     if (!scheduler_) scheduler_ = &co::Scheduler::getInstance();
    #     scheduler_->CreateTask(fn, co::TaskOpt{false, lineno, 0, file});
    # }
    # <> </include>
    # @end
}

类 协程调度器 <公开 注释 = "负责管理1到N个调度线程,以调度从属协程." 注释 = "请定义变量使用,默认指向同一个全局的默认调度器(也可以直接调用\"Go协程.调度器\")."
        注释 = "你也可以使用\"协程调度器.创建调度器()\"创建额外的调度器." 折叠 @文档 = "category = \"协程\"" @强制依赖 = "Go协程">
{
    方法 创建调度器 <公开 静态 类型 = 协程调度器 注释 = "创建并返回一个新的协程调度器." 注释 = "  1. 协程只会在所属的调度器中被调度,创建额外的调度器可以实现业务间的隔离;"
            注释 = "  2. 如果不接收本方法的返回值,定义的协程调度器变量均指向默认的全局调度器;" 注释 = "  3. 所创建的调度器将在退出程序时销毁" 折叠 @嵌入式方法 = "">
    {
        @ @dt<协程调度器>{co::Scheduler::Create()}
    }

    方法 是否正在退出 <公开 静态 类型 = 逻辑型 注释 = "返回是否正在退出协程调度器" 折叠 @嵌入式方法 = "">
    {
        @ co::Scheduler::IsExiting()
    }

    # 动态成员

    方法 启动 <公开 注释 = "在新线程中启动协程调度器,开始执行协程." 注释 = "  1. 请勿重复启动,否则会导致程序异常退出;" 折叠>
    参数 最小线程数 <类型 = 整数 注释 = "最小调度线程数,为0时设置为cpu核心数." @默认值 = 0>
    参数 最大线程数 <类型 = 整数 注释 = "最大调度线程数,为0时与\"最小线程数\"相同;" 注释 = "如果大于\"最小线程数\",则当协程产生长时间阻塞时,可以自动扩展调度线程数."
            @默认值 = 0>
    {
        @ std::thread(
        @     [=] { pdata()->Start(@<最小线程数>, @<最大线程数>); }
        @ ).detach();
    }

    方法 停止 <公开 注释 = "停止协程调度器." 注释 = "  1. 停止后无法恢复,仅用于安全退出入口函数,不保证终止所有线程;"
            注释 = "  2. 如果某个调度线程被协程阻塞,必须等待阻塞结束才能退出;" 注释 = "  3. 除非是进程退出的时候,否则你不应该使用它;" 折叠 @嵌入式方法 = "">
    {
        @ @sn<this>.pdata()->Stop()
    }

    方法 创建协程任务 <公开 注释 = "在当前调度器中创建一个绑定函数对象的协程任务." 注释 = "  1. 协程创建以后不会立即执行,而是暂存至可执行列表中,等待调度器调度;" 折叠
            @嵌入式方法 = "">
    参数 协程栈上限 <类型 = 变整数 注释 = "指定协程栈大小的上限(单位为字节),为0表示使用默认上限(1MB);" 注释 = "协程初始栈大小为4KB,按需动态增长,直到上限值." @默认值 = 0>
    参数 函数对象 <类型 = 通用函数对象 注释 = "所欲协程执行的函数对象,可以调用下列方法创建:" 注释 = "- 绑定静态方法   绑定无参数静态方法"
            注释 = "- 绑定动态方法   绑定无参数动态方法" 注释 = "- 绑定函数指针   绑定无参数函数指针" 注释 = "- 绑定函数指针2  绑定无参数函数指针2">
    {
        @ @sn<this>.pdata()->CreateTask(@<函数对象>, co::TaskOpt{false, __LINE__, static_cast<size_t>(@<协程栈上限>), __FILE__})
    }

    方法 创建静态协程 <公开 注释 = "在当前调度器中创建一个绑定静态方法的协程任务." 注释 = "  1. 协程创建以后不会立即执行,而是暂存至可执行列表中,等待调度器调度;"
            注释 = "  2. 可以绑定任意参数和返回值格式的静态方法,同时应提供格式一致的参数列表;" 折叠 @嵌入式方法 = "">
    参数 协程栈上限 <类型 = 变整数 注释 = "指定协程栈大小的上限(单位为字节),为0表示使用默认上限(1MB);" 注释 = "协程初始栈大小为4KB,按需动态增长,直到上限值." @默认值 = 0>
    参数 静态方法 <注释 = "提供所欲协程执行的静态方法" @匹配方法 = "">
    参数 参数列表 <注释 = "参数表的格式务必和\"静态方法\"的参数表一致;" 注释 = "默认将提交的参数按值复制.如果想引用传递,请用\"引用\"方法将参数包装." @可扩展 = ""
            @匹配类型 = 通用型>
    {
        @ co::__go(__FILE__, __LINE__) - co::__go_option<co::opt_scheduler>{@sn<this>.pdata()} -
        @     co::__go_option<co::opt_stack_size>{static_cast<size_t>(@<协程栈上限>)} - std::bind(&@<静态方法>, @<参数列表>)
    }

    方法 创建动态协程 <公开 注释 = "在当前调度器中创建一个绑定类动态方法的协程任务." 注释 = "  1. 协程创建以后不会立即执行,而是暂存至可执行列表中,等待调度器调度;"
            注释 = "  2. 可以绑定任意参数和返回值格式的类动态方法,同时应提供格式一致的参数列表;" 注释 = "  3. 动态方法可以直接调用类实例的其他动态成员变量和方法;" 折叠
            @嵌入式方法 = "">
    参数 协程栈上限 <类型 = 变整数 注释 = "指定协程栈大小的上限(单位为字节),为0表示使用默认上限(1MB);" 注释 = "协程初始栈大小为4KB,按需动态增长,直到上限值." @默认值 = 0>
    参数 对象实例 <类型 = 对象类 注释 = "提供协程函数所属的对象实例(即类变量),也可以填\"本对象\"、\"读指针处对象()\"." "">
    参数 方法输出名 <类型 = 文本型 注释 = "提供所欲协程执行的动态方法输出名." 注释 = "注意: 方法必须设置属性\"@输出名\",并设置\"@强制输出\"以确保被编译."
            @需求类型 = 立即数或常量>
    参数 参数列表 <注释 = "参数列表的格式务必和所提供动态方法的参数表一致;" 注释 = "默认将提交的参数按值复制.如果想引用传递,请用\"引用\"方法将参数包装." @可扩展 = ""
            @匹配类型 = 通用型>
    {
        @ co::__go(__FILE__, __LINE__) - co::__go_option<co::opt_scheduler>{@sn<this>.pdata()} -
        @     co::__go_option<co::opt_stack_size>{static_cast<size_t>(@<协程栈上限>)} - std::bind(&@pdt<对象实例>::@pvpt<方法输出名>, &@<对象实例>, @<参数列表>)
    }

    方法 创建无参数静态协程 <公开 注释 = "在当前调度器中创建一个绑定无参数静态方法的协程任务." 注释 = "  1. 协程创建以后不会立即执行,而是暂存至可执行列表中,等待调度器调度;" 折叠
            @嵌入式方法 = "">
    参数 协程栈上限 <类型 = 变整数 注释 = "指定协程栈大小的上限(单位为字节),为0表示使用默认上限(1MB);" 注释 = "协程初始栈大小为4KB,按需动态增长,直到上限值." @默认值 = 0>
    参数 静态方法 <注释 = "提供所欲协程执行的静态方法" @匹配方法 = "">
    {
        @ co::__go(__FILE__, __LINE__) - co::__go_option<co::opt_scheduler>{@sn<this>.pdata()} -
        @     co::__go_option<co::opt_stack_size>{static_cast<size_t>(@<协程栈上限>)} - std::bind(&@<静态方法>)
    }

    方法 创建无参数动态协程 <公开 注释 = "在当前调度器中创建一个绑定无参数类动态方法的协程任务." 注释 = "  1. 协程创建以后不会立即执行,而是暂存至可执行列表中,等待调度器调度;"
            注释 = "  2. 动态方法可以直接调用类实例的其他动态成员变量和方法;" 折叠 @嵌入式方法 = "">
    参数 协程栈上限 <类型 = 变整数 注释 = "指定协程栈大小的上限(单位为字节),为0表示使用默认上限(1MB);" 注释 = "协程初始栈大小为4KB,按需动态增长,直到上限值." @默认值 = 0>
    参数 对象实例 <类型 = 对象类 注释 = "提供协程函数所属的对象实例(即类变量),也可以填\"本对象\"、\"读指针处对象()\"." "">
    参数 方法输出名 <类型 = 文本型 注释 = "提供所欲协程执行的动态方法输出名." 注释 = "注意: 方法必须设置属性\"@输出名\",并设置\"@强制输出\"以确保被编译."
            @需求类型 = 立即数或常量>
    {
        @ co::__go(__FILE__, __LINE__) - co::__go_option<co::opt_scheduler>{@sn<this>.pdata()} -
        @     co::__go_option<co::opt_stack_size>{static_cast<size_t>(@<协程栈上限>)} - std::bind(&@pdt<对象实例>::@pvpt<方法输出名>, &@<对象实例>)
    }

    方法 创建无参数无返回值动态协程 <公开 注释 = "在当前调度器中创建一个绑定无参数类动态方法的协程任务." 注释 = "  1. 协程创建以后不会立即执行,而是暂存至可执行列表中,等待调度器调度;"
            注释 = "  2. 动态方法可以直接调用类实例的其他动态成员变量和方法;" 折叠 @嵌入式方法 = "">
    参数 协程栈上限 <类型 = 变整数 注释 = "指定协程栈大小的上限(单位为字节),为0表示使用默认上限(1MB);" 注释 = "协程初始栈大小为4KB,按需动态增长,直到上限值." @默认值 = 0>
    参数 对象实例 <类型 = 对象类 注释 = "提供协程函数所属的对象实例(即类变量),也可以填\"本对象\"、\"读指针处对象()\"." "">
    参数 动态方法 <注释 = "提供所欲协程执行的类动态方法." 注释 = "注意: 方法不需要设置输出名,但必须是无参数和无返回值." @匹配方法 = "无参数无返回值方法">
    {
        @ co::__go(__FILE__, __LINE__) - co::__go_option<co::opt_scheduler>{@sn<this>.pdata()} -
        @     co::__go_option<co::opt_stack_size>{static_cast<size_t>(@<协程栈上限>)} - std::bind(&@pdt<对象实例>::@<动态方法>, &@<对象实例>)
    }

    方法 无参数无返回值方法

    方法 是否处于协程中 <公开 类型 = 逻辑型 注释 = "返回当前是否处于协程中" 折叠 @嵌入式方法 = "">
    {
        @ @sn<this>.pdata()->IsCoroutine()
    }

    方法 是否为空 <公开 类型 = 逻辑型 注释 = "返回真表示没有可执行的协程,否则为假." 折叠 @嵌入式方法 = "">
    {
        @ @sn<this>.pdata()->IsEmpty()
    }

    方法 是否停止 <公开 类型 = 逻辑型 注释 = "返回调度器是否处于停止状态" 折叠 @嵌入式方法 = "">
    {
        @ @sn<this>.pdata()->IsStop()
    }

    方法 使用独立的定时器线程 <公开 折叠 @嵌入式方法 = "">
    {
        @ @sn<this>.pdata()->UseAloneTimerThread()
    }

    方法 取协程数 <公开 类型 = 整数 注释 = "返回当前调度器中的协程数量" 折叠 @嵌入式方法 = "">
    {
        @ (INT)@sn<this>.pdata()->TaskCount()
    }

    方法 取当前协程ID <公开 类型 = 长整数 注释 = "返回当前的协程ID" 折叠 @嵌入式方法 = "">
    {
        @ (INT64)@sn<this>.pdata()->GetCurrentTaskID()
    }

    方法 取当前协程切换次数 <公开 类型 = 长整数 注释 = "返回当前的协程切换的次数" 折叠 @嵌入式方法 = "">
    {
        @ (INT64)@sn<this>.pdata()->GetCurrentTaskYieldCount()
    }

    方法 置当前协程调试信息 <公开 注释 = "设置当前协程调试信息,打印调试信息时将回显" 折叠 @嵌入式方法 = "">
    参数 调试信息 <类型 = 文本型>
    {
        @ @sn<this>.pdata()->SetCurrentTaskDebugInfo(PivW2A{@<调试信息>}.str)
    }

    # @begin
    # <> <include>
    # co::Scheduler* m_sched = nullptr;
    # @sn<current_class> (co::Scheduler* rhs) { m_sched = rhs; }
    # inline co::Scheduler& data() { return (m_sched != nullptr) ? *m_sched : co::Scheduler::getInstance(); }
    # inline co::Scheduler* pdata() { return (m_sched != nullptr) ? m_sched : &co::Scheduler::getInstance(); }
    # inline BOOL @an<_IsSelfEqualExtra> (const @sn<current_class>& objCompare) const { return (m_sched == objCompare.m_sched); }
    # inline void @an<_CopySelfFromExtra> (const @sn<current_class>& objCopyFrom) { m_sched = objCopyFrom.m_sched; }
    # inline @sn<current_class>& operator= (@sn<current_class>&& rhs) { m_sched = std::move(rhs.m_sched); return *this; }
    # inline @sn<current_class>& operator= (co::Scheduler* rhs) { m_sched = rhs; return *this; }
    # inline operator co::Scheduler* () { return m_sched; }
    # <> </include>
    # @end
}

类 协程池类 <公开 注释 = "普通的协程本身就有任务池,本协程池主要是增加了回调任务," 注释 = "可以无缝与异步代码结合,处理异步框架中的阻塞事件."
        注释 = "  1. 协程池内部有一个额外的协程调度器;" 注释 = "  2. 可复制多个副本指向同一个协程池类;" 注释 = "  3. 本协程池无关闭功能,直到进程退出才会彻底释放;" 折叠
        @文档 = "category = \"协程\"" @强制依赖 = "Go协程">
{
    方法 创建 <公开 类型 = 协程池类 注释 = "创建协程池." 注释 = "本方法不是必须执行,调用本类其他方法也会自动创建," 注释 = "但首先调用本方法可以设置\"最大回调触发点\"." 折叠
            @视窗.返回参考 = 真 @嵌入式方法 = "">
    参数 最大回调触发点 <类型 = 变整数 注释 = "指定协程池的最大回调处理器数量" @默认值 = 128>
    {
        @ @sn<this>.Create(static_cast<size_t>(@<最大回调触发点>))
    }

    方法 最大协程数 <公开 属性写 注释 = "自定义协程池中的最大协程数,建议设置的多一些,不被执行的协程不会占用cpu资源."
            注释 = "  1. 默认值: MAX(最小调度线程数*128, 最大调度线程数);" 注释 = "  2. 64位下最大值建议为10240,32位下最大值1792;"
            注释 = "  3. 只能在\"启动\"之前设置,之后再设置无效果;" 折叠>
    参数 最大协程数 <类型 = 变整数>
    {
        @ data().InitCoroutinePool(static_cast<size_t>(@<最大协程数>));
    }

    方法 加入回调触发点 <公开 类型 = 逻辑型 注释 = "将指定的回调处理器绑定到协程池,返回是否加入成功." 注释 = "若已加入的处理器数量超过了\"最大回调触发点\",则返回假."
            注释 = "  1. 回调触发点用于控制回调函数的执行,若任务没有回调则不受回调处理器控制;" 注释 = "  2. 完成回调函数会均匀分派给回调处理器;" 折叠 @嵌入式方法 = "">
    参数 回调处理器 <类型 = 协程池回调处理器 注释 = "所欲加入的回调处理器;" 注释 = "回调处理器只能加入,不能删除;" 注释 = "需要自行维护处理器的生命周期,不能比协程池短;">
    {
        @ @sn<this>.data().AddCallbackPoint(&@<回调处理器>)
    }

    方法 启动 <公开 注释 = "启动协程池" 折叠 @嵌入式方法 = "">
    参数 最小线程数 <类型 = 整数 注释 = "最小调度线程数,为0时设置为cpu核心数,为1表示仅使用主线程调度协程." @默认值 = 0>
    参数 最大线程数 <类型 = 整数 注释 = "最大调度线程数,为0时与\"最小线程数\"相同;" 注释 = "如果大于\"最小线程数\",则当协程产生长时间阻塞时,可以自动扩展调度线程数."
            @默认值 = 0>
    {
        @ @sn<this>.data().Start(@<最小线程数>, @<最大线程数>)
    }

    方法 投递回调任务 <公开 注释 = "投递任务函数和回调函数到协程池中;" 注释 = "  1. 如果绑定了回调处理器,则需要在处理器中运行回调函数;"
            注释 = "  2. 未绑定回调处理器则在协程池中执行回调函数;" 注释 = "  3. 回调函数可空;" 折叠 @嵌入式方法 = "">
    参数 任务函数 <类型 = 通用函数对象 注释 = "所欲投递到协程池的任务函数,可以调用下列方法创建:" 注释 = "- 绑定静态方法   绑定无参数静态方法"
            注释 = "- 绑定动态方法   绑定无参数动态方法" 注释 = "- 绑定函数指针   绑定无参数函数指针" 注释 = "- 绑定函数指针2  绑定无参数函数指针2">
    参数 回调函数 <类型 = 通用函数对象 注释 = "任务执行完毕后会触发此回调函数,留空表示无回调函数;" 注释 = "参数要求同上;" @默认值 = 空对象>
    {
        @ @sn<this>.data().Post(@<任务函数>, @<回调函数>)
    }

    方法 投递回调任务2 <公开 注释 = "投递任务函数和回调函数到协程池中;" 注释 = "  1. 如果绑定了回调处理器,则需要在处理器中运行回调函数;"
            注释 = "  2. 未绑定回调处理器则在协程池中执行回调函数;" 注释 = "  3. 本方法的函数有返回值和参数格式的要求,具体看参数备注;" 折叠 @嵌入式方法 = "">
    参数 返回值类型 <注释 = "提供任务函数的返回值类型" @需求类型 = 数据类型 @匹配类型 = 所有类型>
    参数 任务函数 <类型 = 通用函数对象 注释 = "所欲投递到协程池的任务函数;" 注释 = "不能提供函数对象类变量,可以调用下列方法创建:" 注释 = "- 绑定静态方法   绑定无参数静态方法"
            注释 = "- 绑定动态方法   绑定无参数动态方法" 注释 = "- 绑定函数指针   绑定无参数函数指针" 注释 = "- 绑定函数指针2  绑定无参数函数指针2"
            注释 = "注意: 本函数必须有返回值,且返回值类型跟第一个参数一致;">
    参数 回调函数 <类型 = 通用函数对象 注释 = "任务执行完毕后会触发此回调函数;" 注释 = "不能提供函数对象类变量,可以调用下列方法创建:" 注释 = "- 绑定静态方法   绑定动态方法"
            注释 = "- 绑定函数指针   绑定函数指针2" 注释 = "注意: 本函数必须有一个占位参数\"占位符_1(返回值类型)\";">
    {
        @ @sn<this>.data().Post<@<返回值类型>>(@<任务函数>, @<回调函数>)
    }

    方法 投递信道任务 <公开 注释 = "以信道的方式投递任务到协程池中,可以通过信道等待任务完成;" 注释 = "因为没有回调,所以一定不会经过回调处理器;" 折叠 @嵌入式方法 = "">
    参数 返回值信道 <注释 = "必须提供\"信道模板类\"的模板实现类；" 注释 = "用于接受任务函数的返回值,信道的\"模板类型1\"必须跟任务函数的返回值一致;" @匹配类型 = 通用类>
    参数 任务函数 <类型 = 通用函数对象 注释 = "所欲投递到协程池的任务函数;" 注释 = "本方法不能接收变量,请调用下列方法创建:" 注释 = "- 绑定静态方法   绑定无参数静态方法"
            注释 = "- 绑定动态方法   绑定无参数动态方法" 注释 = "- 绑定函数指针   绑定无参数函数指针" 注释 = "- 绑定函数指针2  绑定无参数函数指针2"
            注释 = "注意: 任务函数的返回值必须跟\"返回值类型\"一致.">
    {
        @ @sn<this>.data().Post<@pdt<返回值信道>::ValueType>(@<返回值信道>, @<任务函数>)
    }

    # @begin
    # <> <include>
    # co::AsyncCoroutinePool* m_Pool = nullptr;
    # inline void @an<_CopySelfFromExtra> (const @sn<current_class>& objCopyFrom) { m_Pool = objCopyFrom.m_Pool; }
    # inline @sn<current_class>& operator= (@sn<current_class>&& rhs) { m_Pool = std::move(rhs.m_Pool); return *this; }
    # inline @sn<current_class>& Create(size_t maxCallbackPoints = 128) {
    #     if(!m_Pool) { m_Pool = co::AsyncCoroutinePool::Create(maxCallbackPoints); } return *this;
    # }
    # inline co::AsyncCoroutinePool& data() { Create(); return *m_Pool; }
    # inline co::AsyncCoroutinePool* pdata() { Create(); return m_Pool; }
    # <> </include>
    # @end
}

类 协程池回调处理器 <公开 基础类 = PIV本地类模板 注释 = "协程池回调处理器用于控制处理完成回调所用的线程(通常用于单线程程序),可以绑定一个或多个回调处理器."
        注释 = "如果不绑定回调处理器,完成回调就直接在协程池中被调用." 注释 = "请保证回调处理器实例的生命周期比协程池长." 折叠 @文档 = "category = \"协程\""
        @强制依赖 = "Go协程" @别名 = "co::AsyncCoroutinePool::CallbackPoint" @别名类型 = 本地类 @模板实现类 = "协程池回调处理器">
{
    方法 运行 <公开 静态 类型 = 整数 注释 = "执行已完成任务的回调函数,返回触发的回调数量,未触发任何回调则返回0." 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = 协程池回调处理器>
    参数 最大触发数量 <类型 = 整数 注释 = "所欲触发的回调函数数量,为0表示触发回调处理器内所有的回调." @默认值 = 0>
    {
        @ (INT)@<欲操作本对象>.Run(static_cast<size_t>(@<最大触发数量>))
    }

    方法 置通知函数 <公开 静态 注释 = "设置额外的通知函数,回调处理器每触发一次回调都将执行一次通知函数" 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = 协程池回调处理器>
    参数 通知函数 <类型 = 通用函数对象 注释 = "所欲设置的通知函数,可以调用下列方法创建:" 注释 = "- 绑定静态方法   绑定无参数静态方法"
            注释 = "- 绑定动态方法   绑定无参数动态方法" 注释 = "- 绑定函数指针   绑定无参数函数指针" 注释 = "- 绑定函数指针2  绑定无参数函数指针2" "">
    {
        @ @<欲操作本对象>.SetNotifyFunc(@<通知函数>)
    }
}

类 协程配置选项 <公开 注释 = "协程的全局配置选项,建议通过\"Go协程.配置选项\"调用." 折叠 @文档 = "category = \"协程\"" @强制依赖 = "Go协程">
{
    方法 调试选项 <公开 属性读 类型 = 长整数 注释 = "返回全局的调试选项" 折叠 @嵌入式方法 = "">
    {
        @ (INT64)@sn<this>.data().debug
    }

    方法 调试选项 <公开 属性写 注释 = "设置调试选项" 折叠>
    参数 选项 <类型 = 长整数>
    {
        @ data().debug = (uint64_t)@<选项>;
    }

    方法 调试输出位置 <公开 属性写 注释 = "调试信息输出位置,改写这个配置项可以重定向输出位置." 折叠>
    参数 文件名 <类型 = 文本型 注释 = "指定输出的文件名,空文本表示输出到stdout(默认值)">
    {
        @ FILE* f = _wfopen(@<文件名>.GetText(), L"ab");
        @ if (f) data().debug_output = f;
    }

    方法 协程栈大小上限 <公开 属性读 类型 = 整数 注释 = "返回全局的协程栈大小上限" 折叠 @嵌入式方法 = "">
    {
        @ (INT)@sn<this>.data().stack_size
    }

    方法 协程栈大小上限 <公开 属性写 注释 = "协程栈大小上限,只会影响在此值设置之后新创建的协程任务,建议在首次运行前设置." 折叠>
    参数 栈大小上限 <类型 = 整数 注释 = "单位为字节,建议设置不超过1MB">
    {
        @ data().stack_size = (uint32_t)@<栈大小上限>;
    }

    方法 协程统计功能 <公开 属性读 类型 = 逻辑型 注释 = "返回是否启用协程统计功能" 折叠 @嵌入式方法 = "">
    {
        @ @sn<this>.data().enable_coro_stat
    }

    方法 协程统计功能 <公开 属性写 注释 = "是否启用协程统计功能(会有一点性能损耗,默认不开启)." 折叠>
    参数 是否开启 <类型 = 逻辑型>
    {
        @ data().enable_coro_stat = (bool)@<是否开启>;
    }

    方法 协程超时时间 <公开 属性读 类型 = 整数 注释 = "返回全局的单协程执行超时时长(单位为微秒)." 折叠 @嵌入式方法 = "">
    {
        @ (INT)@sn<this>.data().cycle_timeout_us
    }

    方法 协程超时时间 <公开 属性写 注释 = "设置单协程执行超时时长(单位为微秒),超过时长会强制将剩余任务派发到其他线程."
            注释 = "编写cpu密集型程序时,可以延长协程执行的超时判断阈值,避免频繁的重新派发协程." 折叠>
    参数 超时时间 <类型 = 整数 注释 = "单位为微妙,默认为100*1000">
    {
        @ data().cycle_timeout_us = (uint32_t)@<超时时间>;
    }

    方法 调度线程周期时间 <公开 属性读 类型 = 整数 注释 = "返回全局的调度线程的触发频率(单位为微秒)." 折叠 @嵌入式方法 = "">
    {
        @ (INT)@sn<this>.data().dispatcher_thread_cycle_us
    }

    方法 调度线程周期时间 <公开 属性写 注释 = "设置调度线程的触发频率(单位为微秒)" 折叠>
    参数 周期时间 <类型 = 整数 注释 = "单位为微妙,默认为1000">
    {
        @ data().dispatcher_thread_cycle_us = (uint32_t)@<周期时间>;
    }

    方法 负载均衡比例 <公开 属性读 类型 = 单精度小数 注释 = "返回全局的负载均衡触发的比例." 折叠 @嵌入式方法 = "">
    {
        @ @sn<this>.data().load_balance_rate
    }

    方法 负载均衡比例 <公开 属性写 注释 = "设置负载均衡触发的比例." 注释 = "当某个执行器的协程数少于平均值的负载均衡比例,就会触发负载均衡;"
            注释 = "若执行的协程任务比较重时,此值建议设低一点,协程任务比较轻时,建议设高一点;" 折叠>
    参数 负载均衡 <类型 = 单精度小数 注释 = "取值范围0-1,默认为0.1f">
    {
        @ data().load_balance_rate = @<负载均衡>;
    }

    # @begin
    # <> <include>
    # co::CoroutineOptions& m_opt = co::CoroutineOptions::getInstance();
    # inline co::CoroutineOptions& data() { return m_opt; }
    # <> </include>
    # @end
}

类 协程定时器 <公开 注释 = "注意: 可能存在内存泄漏,请勿使用!!!!!!" 注释 = "本类可以在协程内执行一次性的定时任务;" 注释 = "注意: 定时器必须启动协程调度器后才会生效." 折叠
        @文档 = "category = \"协程.辅助类\"" @强制依赖 = "Go协程">
{
    方法 初始化 <公开 类型 = 逻辑型 注释 = "自定义初始化协程定时器,如果已经初始化则返回假." 注释 = "注: 若未调用本方法,在创建任务时会自动使用默认值进行初始化." 折叠
            @嵌入式方法 = "">
    参数 计时精度 <类型 = 长整数 注释 = "设置定时器的精度(单位为微秒),精度越高则计时越准确." @默认值 = 1000>
    参数 调度器 <类型 = 协程调度器 注释 = "设置定时器的协程调度器,留空为使用全局的默认调度器;" 注释 = "注意: 定时器必须启动协程调度器后才会生效." @默认值 = 空对象>
    {
        @ @sn<this>.init(@<计时精度>, @<调度器>)
    }

    方法 创建任务 <公开 类型 = 协程定时ID 注释 = "创建一个绑定了函数对象的定时任务,然后返回定时ID." 折叠 @嵌入式方法 = "">
    参数 延迟时间 <类型 = 长整数 注释 = "指定任务延迟多长时间执行,单位为毫秒.">
    参数 函数对象 <类型 = 通用函数对象 注释 = "所欲定时执行的函数对象,可以调用下列方法创建:" 注释 = "- 绑定静态方法   绑定无参数静态方法"
            注释 = "- 绑定动态方法   绑定无参数动态方法" 注释 = "- 绑定函数指针   绑定无参数函数指针" 注释 = "- 绑定函数指针2  绑定无参数函数指针2">
    {
        @ @sn<this>.data().ExpireAt(std::chrono::milliseconds(@<延迟时间>), @<函数对象>)
    }

    方法 创建静态任务 <公开 类型 = 协程定时ID 注释 = "创建一个绑定了任意格式静态方法的定时任务,然后返回定时ID." 折叠 @嵌入式方法 = "">
    参数 延迟时间 <类型 = 长整数 注释 = "指定任务延迟多长时间执行,单位为毫秒.">
    参数 静态方法 <注释 = "提供所欲协程执行的静态方法" @匹配方法 = "">
    参数 参数列表 <注释 = "参数表的格式务必和\"静态方法\"的参数表一致;" 注释 = "默认将提交的参数按值复制.如果想引用传递,请用\"引用\"方法将参数包装." @可扩展 = ""
            @匹配类型 = 通用型>
    {
        @ @dt<协程定时ID>{@sn<this>.data().ExpireAt(std::chrono::milliseconds(@<延迟时间>), std::bind(&@<静态方法>, @<参数列表>))}
    }

    方法 创建无参数静态任务 <公开 类型 = 协程定时ID 注释 = "创建一个绑定了无参数静态方法的定时任务,然后返回定时ID." 折叠 @嵌入式方法 = "">
    参数 延迟时间 <类型 = 长整数 注释 = "指定任务延迟多长时间执行,单位为毫秒.">
    参数 静态方法 <注释 = "提供所欲协程执行的静态方法" @匹配方法 = "">
    {
        @ @dt<协程定时ID>{@sn<this>.data().ExpireAt(std::chrono::milliseconds(@<延迟时间>), &@<静态方法>)}
    }

    方法 创建动态任务 <公开 类型 = 协程定时ID 注释 = "创建一个绑定了任意格式类动态方法的定时任务,然后返回定时ID." 折叠 @嵌入式方法 = "">
    参数 延迟时间 <类型 = 长整数 注释 = "指定任务延迟多长时间执行,单位为毫秒.">
    参数 对象实例 <类型 = 对象类 注释 = "提供协程函数所属的对象实例(即类变量),也可以填\"本对象\"、\"读指针处对象()\"." "">
    参数 方法输出名 <类型 = 文本型 注释 = "提供所欲协程执行的动态方法输出名." 注释 = "注意: 方法必须设置属性\"@输出名\",并设置\"@强制输出\"以确保被编译."
            @需求类型 = 立即数或常量>
    参数 参数列表 <注释 = "参数表的格式务必和\"静态方法\"的参数表一致;" 注释 = "默认将提交的参数按值复制.如果想引用传递,请用\"引用\"方法将参数包装." @可扩展 = ""
            @匹配类型 = 通用型>
    {
        @ @dt<协程定时ID>{@sn<this>.data().ExpireAt(std::chrono::milliseconds(@<延迟时间>), std::bind(&@pdt<对象实例>::@pvpt<方法输出名>, &@<对象实例>, @<参数列表>))}
    }

    方法 创建无参数动态任务 <公开 类型 = 协程定时ID 注释 = "创建一个绑定了无参数类动态方法的定时任务,然后返回定时ID." 折叠 @嵌入式方法 = "">
    参数 延迟时间 <类型 = 长整数 注释 = "指定任务延迟多长时间执行,单位为毫秒.">
    参数 对象实例 <类型 = 对象类 注释 = "提供协程函数所属的对象实例(即类变量),也可以填\"本对象\"、\"读指针处对象()\"." "">
    参数 方法输出名 <类型 = 文本型 注释 = "提供所欲协程执行的动态方法输出名." 注释 = "注意: 方法必须设置属性\"@输出名\",并设置\"@强制输出\"以确保被编译."
            @需求类型 = 立即数或常量>
    {
        @ @dt<协程定时ID>{@sn<this>.data().ExpireAt(std::chrono::milliseconds(@<延迟时间>), std::bind(&@pdt<对象实例>::@pvpt<方法输出名>, &@<对象实例>))}
    }

    方法 创建无参数无返回值动态任务 <公开 注释 = "在当前调度器中创建一个绑定无参数类动态方法的协程任务." 注释 = "  1. 协程创建以后不会立即执行,而是暂存至可执行列表中,等待调度器调度;"
            注释 = "  2. 动态方法可以直接调用类实例的其他动态成员变量和方法;" 折叠 @嵌入式方法 = "">
    参数 延迟时间 <类型 = 长整数 注释 = "指定任务延迟多长时间执行,单位为毫秒.">
    参数 对象实例 <类型 = 对象类 注释 = "提供协程函数所属的对象实例(即类变量),也可以填\"本对象\"、\"读指针处对象()\"." "">
    参数 动态方法 <注释 = "提供所欲协程执行的类动态方法." 注释 = "注意: 方法不需要设置输出名,但必须是无参数和无返回值." @匹配方法 = "无参数无返回值方法">
    {
        @ @dt<协程定时ID>{@sn<this>.data().ExpireAt(std::chrono::milliseconds(@<延迟时间>), std::bind(&@pdt<对象实例>::@<动态方法>, &@<对象实例>))}
    }

    方法 无参数无返回值方法

    # @begin
    # <> <include>
    # std::shared_ptr<co::CoTimer> m_Timer;
    # inline void @an<_CopySelfFromExtra> (const @sn<current_class>& objCopyFrom) { m_Timer = objCopyFrom.m_Timer; }
    # inline @sn<current_class>& operator= (@sn<current_class>&& rhs) { m_Timer = std::move(rhs.m_Timer); return *this; }
    # inline BOOL init(INT64 dur, co::Scheduler * scheduler) {
    #     if (m_Timer) return FALSE;
    #     m_Timer.reset(new co::CoTimer(std::chrono::microseconds(dur), scheduler)); return TRUE;
    # }
    # inline co::CoTimer& data() { if(!m_Timer) { m_Timer.reset(new co::CoTimer()); } return *m_Timer; }
    # <> </include>
    # @end
}

类 协程定时ID <公开 基础类 = PIV本地类模板 注释 = "用作保存协程定时器的定时任务ID,可以撤销未执行的定时任务." 注释 = "必须被赋值后才有效" 折叠
        @文档 = "category = \"协程.辅助类\"" @别名 = "co::CoTimer::TimerId" @模板实现类 = "协程定时ID" @别名类型 = 本地类
        @强制依赖 = "Go协程">
{
    方法 撤销任务 <公开 静态 类型 = 逻辑型 注释 = "可以撤销还未开始执行的定时任务,如果撤销成功返回真;" 注释 = "如果还没来得及撤销则返回假,此时不保证定时任务已执行完毕." 折叠
            @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = 协程定时ID>
    {
        @ @<欲操作本对象>.StopTimer()
    }
}

类 协程互斥锁类 <公开 基础类 = PIV本地类模板 注释 = "协程互斥锁对象的封装类." 注释 = "  1. 互斥对象不可复制赋值;"
        注释 = "  2. 提供方法\"协程互斥自动锁\",可自动加锁/解锁;" 折叠 @文档 = "category = \"协程.辅助类\"" @别名 = "libgo::Mutex"
        @模板实现类 = "协程互斥锁类" @别名类型 = 本地类 @强制依赖 = "Go协程">
{
    方法 协程互斥自动锁 <公开 静态 注释 = "创建一个互斥自动锁对象(std::lock_guard),它将接收指定互斥锁的所有权."
            注释 = "创建后会立即在当前协程加锁,直到离开作用域后自动销毁对象并解锁." 注释 = "注: 本方法可以避免死锁,推荐用来替代互斥锁对象的\"加锁/解锁\"操作." 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = 协程互斥锁类 注释 = "提供要在当前协程上锁的协程互斥锁类">
    {
        @ std::lock_guard<libgo::Mutex> @sn<rand_name0>(@<欲操作本对象>)
    }

    方法 加锁 <公开 静态 注释 = "将本互斥锁加锁,如果本锁当前已经被另一协程锁住,则进入等待状态." 注释 = "注: 建议使用\"协程互斥自动锁\"以避免死锁." 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = 协程互斥锁类 注释 = "提供要在当前协程上锁的协程互斥锁类">
    {
        @ @<欲操作本对象>.lock()
    }

    方法 解锁 <公开 静态 注释 = "如果先前加锁成功,解开此锁,以允许其它协程加锁成功." 注释 = "注: 建议使用\"协程互斥自动锁\"以避免死锁." 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = 协程互斥锁类 注释 = "提供要在当前协程上锁的协程互斥锁类">
    {
        @ @<欲操作本对象>.unlock()
    }

    方法 尝试加锁 <公开 静态 类型 = 逻辑型 注释 = "尝试将本互斥锁加锁,如果能够成功加锁,则加锁后返回真." 注释 = "如果不能(譬如已经被其它协程锁住)则立即返回假." 折叠
            @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = 协程互斥锁类 注释 = "提供要在当前协程上锁的协程互斥锁类">
    {
        @ @<欲操作本对象>.try_lock()
    }

    方法 限时尝试加锁 <公开 静态 类型 = 逻辑型 注释 = "尝试将本互斥锁加锁,若能在指定时间内成功加锁返回真,否则返回假." 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = 协程互斥锁类 注释 = "提供要在当前协程上锁的协程互斥锁类">
    参数 延迟时间 <类型 = 长整数 注释 = "单位为毫秒">
    {
        @ @<欲操作本对象>.try_lock_for(std::chrono::milliseconds(@<延迟时间>))
    }

    方法 是否已锁定 <公开 静态 注释 = "返回当前是否已加锁" 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = 协程互斥锁类 注释 = "提供要在当前协程上锁的协程互斥锁类">
    {
        @ @<欲操作本对象>.is_lock ()
    }
}

类 协程读写锁类 <公开 基础类 = PIV本地类模板 注释 = "协程读写锁的封装类." 注释 = "  1. 读写锁不可复制赋值;"
        注释 = "  2. 同一个协程只能单独使用读锁或写锁,不能同时使用两种锁," 注释 = "否则将导致死锁;" 折叠 @文档 = "category = \"协程.辅助类\""
        @别名 = "co::CoRWMutex" @模板实现类 = "协程读写锁类" @强制依赖 = "Go协程">
{
    方法 协程读锁自动锁 <公开 静态 注释 = "创建一个互斥自动锁对象(std::unique_lock),它将接收指定互斥锁的所有权."
            注释 = "创建后会立即在当前协程加锁,直到离开作用域后自动销毁对象并解锁." 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = 协程读写锁类 注释 = "提供要在当前读锁协程上锁的协程读写锁类">
    {
        @ std::unique_lock<co::CoRWMutex::ReadView> @sn<rand_name0>(@<欲操作本对象>.Reader())
    }

    方法 协程写锁自动锁 <公开 静态 注释 = "创建一个互斥自动锁对象(std::unique_lock),它将接收指定互斥锁的所有权."
            注释 = "创建后会立即在当前协程加锁,直到离开作用域后自动销毁对象并解锁." 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = 协程读写锁类 注释 = "提供要在当前写锁协程上锁的协程读写锁类">
    {
        @ std::unique_lock<co::CoRWMutex::WriteView> @sn<rand_name0>(@<欲操作本对象>.Writer())
    }

    方法 开始读 <公开 静态 注释 = "读协程调用本方法用作加锁以开始进行读操作,如果不能加锁,将一直等待."
            注释 = "注意: 本方法返回后即表示当前协程获得了读权力,读操作完毕后必须调用\"结束读\"方法释放锁." 注释 = "建议使用\"协程读锁自动锁\"以避免死锁." 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = 协程读写锁类 注释 = "提供要在当前写锁协程上锁的协程读写锁类">
    {
        @ @<欲操作本对象>.RLock()
    }

    方法 结束读 <公开 静态 注释 = "  先前调用\"开始读\"方法成功加锁的读协程必须调用" 注释 = "本方法结束读操作,以放行其它等待操作的协程." 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = 协程读写锁类 注释 = "提供要在当前写锁协程上锁的协程读写锁类">
    {
        @ @<欲操作本对象>.RUnlock()
    }

    方法 尝试开始读 <公开 静态 类型 = 逻辑型 注释 = "读协程调用本方法用作加锁以开始进行读操作,如果不能加锁将直接返回假,成功加锁返回真." 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = 协程读写锁类 注释 = "提供要在当前写锁协程上锁的协程读写锁类">
    {
        @ @<欲操作本对象>.RTryLock()
    }

    方法 开始写 <公开 静态 注释 = "写协程调用本方法用作加锁以开始进行写操作,如果不能加锁,将一直等待."
            注释 = "注意: 本方法返回后即表示当前协程获得了写权力,写操作完毕后必须调用\"结束写\"方法释放锁." 注释 = "建议使用\"协程写锁自动锁\"以避免死锁." 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = 协程读写锁类 注释 = "提供要在当前写锁协程上锁的协程读写锁类">
    {
        @ @<欲操作本对象>.WLoc()
    }

    方法 结束写 <公开 静态 注释 = "  先前调用\"开始写\"方法成功加锁的写协程必须调用" 注释 = "本方法结束写操作,以放行其它等待操作的协程." 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = 协程读写锁类 注释 = "提供要在当前写锁协程上锁的协程读写锁类">
    {
        @ @<欲操作本对象>.WUnlock()
    }

    方法 尝试开始写 <公开 静态 类型 = 逻辑型 注释 = "写协程调用本方法用作加锁以开始进行写操作,如果不能加锁将直接返回假,成功加锁返回真." 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = 协程读写锁类 注释 = "提供要在当前写锁协程上锁的协程读写锁类">
    {
        @ @<欲操作本对象>.WTryLock()
    }

    方法 是否已锁定 <公开 静态 注释 = "返回当前是否已加锁" 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = 协程读写锁类 注释 = "提供要在当前写锁协程上锁的协程读写锁类">
    {
        @ @<欲操作本对象>.IsLock()
    }
}

类 协程唯一互斥锁类 <公开 基础类 = PIV本地类模板 注释 = "std::unique_lock<libgo::mutex>的封装类"
        注释 = "跟\"协程互斥自动锁\"一样,本类比直接使用协程互斥锁类更安全," 注释 = "关联互斥对象后立即加锁,并在析构时自动解锁;"
        注释 = "跟\"协程互斥自动锁\"相比,本类还可以手动加锁和解锁;" 折叠 @文档 = "category = \"协程.辅助类\""
        @别名 = "std::unique_lock<libgo::mutex>" @模板实现类 = "协程唯一互斥锁类" @别名类型 = 本地类 @强制依赖 = "Go协程">
{
    方法 关联互斥 <公开 静态 注释 = "关联互斥对象,并锁定关联的互斥对象,如果关联互斥已经被另一线程锁住,则进入等待状态." 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = 协程唯一互斥锁类>
    参数 所欲关联的锁 <类型 = 协程互斥锁类>
    {
        @ @<欲操作本对象> = std::unique_lock<libgo::mutex>(@<所欲关联的锁>)
    }

    方法 加锁 <公开 静态 注释 = "锁定关联的互斥对象,如果关联互斥已经被另一线程锁住,则进入等待状态." 折叠>
    参数 欲操作本对象 <类型 = 协程唯一互斥锁类>
    参数 ""
    {
        @ if (@<欲操作本对象>) @<欲操作本对象>.lock();
    }

    方法 尝试加锁 <公开 静态 类型 = 逻辑型 注释 = "尝试锁定关联的互斥对象,如果能够成功加锁,则加锁后返回真." 注释 = "如果不能(譬如已经被其它线程锁住)则立即返回假." 折叠
            @禁止流程检查 = 真>
    参数 欲操作本对象 <类型 = 协程唯一互斥锁类>
    {
        @ return (@<欲操作本对象>.owns_lock()) ? @<欲操作本对象>.try_lock() : FALSE;
    }

    方法 限时尝试加锁 <公开 静态 类型 = 逻辑型 注释 = "尝试锁定关联的互斥对象,若能在指定时间内成功加锁返回真,否则返回假." 折叠 @禁止流程检查 = 真>
    参数 欲操作本对象 <类型 = 协程唯一互斥锁类>
    参数 延迟时间 <类型 = 长整数 注释 = "单位为毫秒">
    {
        @ return (@<欲操作本对象>.owns_lock()) ? @<欲操作本对象>.try_lock_for(std::chrono::milliseconds(@<延迟时间>)) : FALSE;
    }

    方法 解锁 <公开 静态 注释 = "解锁关联互斥对象并释放所有权,以允许其它线程加锁成功." 折叠>
    参数 欲操作本对象 <类型 = 协程唯一互斥锁类>
    {
        @ if (@<欲操作本对象>) @<欲操作本对象>.unlock();
    }

    方法 是否有效 <公开 静态 类型 = 逻辑型 注释 = "检查本类是否占有锁定的互斥对象(即是否调用了\"关联互斥\")" 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = 协程唯一互斥锁类>
    {
        @ @<欲操作本对象>.owns_lock()
    }

    方法 释放 <公开 静态 注释 = "解除与互斥对象的关联,本操作不会将互斥对象加锁或解锁." 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = 协程唯一互斥锁类>
    {
        @ @<欲操作本对象>.release()
    }
}

类 协程条件变量类 <公开 基础类 = PIV本地类模板 注释 = "能用于阻塞一个或多个协程,直至另一协程修改共享变量(条件)并通知." 折叠 @文档 = "category = \"协程.辅助类\""
        @别名 = "libgo::ConditionVariable" @模板实现类 = "协程条件变量类" @别名类型 = 本地类 @强制依赖 = "Go协程">
{
    方法 通知一个 <公开 静态 类型 = 整数 注释 = "通知一个等待中的协程解除阻塞,返回唤醒的协程数量下限," 注释 = "实际唤醒数量可能大于返回值." 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = 协程条件变量类>
    {
        @ @<欲操作本对象>.notify_one()
    }

    方法 通知所有 <公开 静态 类型 = 整数 注释 = "通知所有等待中的协程解除阻塞,返回唤醒的协程数量下限," 注释 = "实际唤醒数量可能大于返回值." 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = 协程条件变量类>
    {
        @ @<欲操作本对象>.notify_all()
    }

    方法 快速通知所有 <公开 静态 类型 = 整数 注释 = "通知所有等待中的协程解除阻塞,返回唤醒的协程数量下限," 注释 = "实际唤醒数量可能大于返回值." 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = 协程条件变量类>
    {
        @ @<欲操作本对象>.notify_all()
    }

    方法 等待 <公开 静态 注释 = "阻塞当前线程,直到条件变量通知线程解除阻塞;" 注释 = "注意: 本方法必须在\"协程唯一互斥锁类\"已加锁状态下使用;" 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = 协程条件变量类>
    参数 互斥锁 <类型 = 协程唯一互斥锁类 注释 = "提供的\"协程唯一互斥锁类\"必须已\"关联互斥\"并处于加锁状态">
    {
        @ @<欲操作本对象>.wait(@<互斥锁>)
    }

    方法 限时等待 <公开 静态 类型 = 逻辑型 注释 = "阻塞当前线程,直到条件变量被唤醒,或到达指定时长后解除阻塞." 注释 = "如果在延迟时间内条件变量被唤醒将返回真,否则返回假."
            注释 = "注意: 本方法必须在\"协程唯一互斥锁类\"已加锁状态下使用;" 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = 协程条件变量类>
    参数 互斥锁 <类型 = 协程唯一互斥锁类 注释 = "提供的\"协程唯一互斥锁类\"必须已\"关联互斥\"并处于加锁状态">
    参数 延迟时间 <类型 = 长整数 注释 = "单位为毫秒">
    {
        @ (@<欲操作本对象>.wait_for(@<互斥锁>, std::chrono::milliseconds(@<延迟时间>)) == std::cv_status::no_timeout)
    }
}

类 信道模板类 <公开 注释 = "信道是协程安全的,使用时不需要加锁" 折叠 @文档 = "category = \"协程.辅助类\"" @模板基础类 = 真
        @别名 = "co::Channel<模板类型1>" @别名类型 = 本地类 @强制依赖 = "Go协程">
{
    方法 缓冲区容量 <公开 静态 属性写 注释 = "设置信道的缓冲区容量;" 注释 = "  1. 信道默认没有缓冲区,因此写入数据时会阻塞当前协程,直到其他协程读取数据;"
            注释 = "  2. 拥有缓冲区后,可以直接写入对应容量的数据而不会阻塞当前协程;" 注释 = "  3. 缓冲区满了之后会阻塞当前协程,等待缓冲区出现空位;"
            注释 = "  4. 修改缓冲区容量会将信道初始化,因此建议在定义变量的表格中设置属性值;" 折叠>
    参数 欲操作本对象 <类型 = 信道模板类>
    参数 缓冲区 <类型 = 变整数 注释 = "默认为0,大于0后可以无阻塞写入对应数量的数据.">
    {
        @ @<欲操作本对象> = @dt<信道模板类>(static_cast<size_t>(@<缓冲区>));
    }

    方法 取成员数 <公开 静态 类型 = 整数 注释 = "返回本信道中已写入的数据数目" 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = 信道模板类>
    {
        @ static_cast<INT>(@<欲操作本对象>.size())
    }

    方法 读 <公开 静态 类型 = 模板类型1 注释 = "从信道中读取数据;" 注释 = "如果信道中没有数据,将会阻塞当前协程,直到其他协程写入数据." 折叠 @禁止流程检查 = 真>
    参数 欲操作本对象 <类型 = 信道模板类>
    {
        @ @dt<模板类型1> v;
        @ @<欲操作本对象> >> v;
        @ return v;
    }

    方法 读2 <公开 静态 注释 = "从信道中读取数据;" 注释 = "如果信道中没有数据,将会阻塞当前协程,直到其他协程写入数据." 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = 信道模板类>
    参数 值 <类型 = 模板类型1 注释 = "读取的值将保存到提供变量中" @需求类型 = 可写入变量>
    {
        @ @<欲操作本对象> >> @<值>
    }

    方法 写 <公开 静态 注释 = "将数据写入到信道中;" 注释 = "如果没有缓冲区空位,将会阻塞当前协程,直到其他协程从信道读取数据." 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = 信道模板类>
    参数 值 <类型 = 模板类型1 注释 = "所欲写入的值">
    {
        @ @<欲操作本对象> << @<值>
    }

    方法 尝试读 <公开 静态 类型 = 逻辑型 注释 = "尝试从信道中读取数据,如果信道中没有数据将直接返回假." 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = 信道模板类>
    参数 值 <类型 = 模板类型1 注释 = "读取的值将保存到提供变量中" @需求类型 = 可写入变量>
    {
        @ @<欲操作本对象>.TryPop(@<值>)
    }

    方法 尝试写 <公开 静态 类型 = 逻辑型 注释 = "尝试将数据写入到信道中,如果没有缓冲区空位将直接返回假." 注释 = "注: \"缓冲区容量\"大于0时,本方法才有可能返回真." 折叠
            @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = 信道模板类>
    参数 值 <类型 = 模板类型1 注释 = "所欲写入的值">
    {
        @ @<欲操作本对象>.TryPush(@<值>)
    }

    方法 限时读 <公开 静态 类型 = 逻辑型 注释 = "尝试从信道中读取数据,如果信道在指定的时限内没有数据,将返回假." 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = 信道模板类>
    参数 值 <类型 = 模板类型1 注释 = "读取的值将保存到提供变量中" @需求类型 = 可写入变量>
    参数 超时时间 <类型 = 长整数 注释 = "单位为毫秒">
    {
        @ @<欲操作本对象>.TimedPop(@<值>, std::chrono::milliseconds(@<超时时间>))
    }

    方法 限时写 <公开 静态 类型 = 逻辑型 注释 = "尝试将数据写入到信道中,如果在指定的时限内没有缓冲区空位," 注释 = "且没有其他协程在读数据,将返回假." 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = 信道模板类>
    参数 值 <类型 = 模板类型1 注释 = "所欲写入的值">
    参数 超时时间 <类型 = 长整数 注释 = "单位为毫秒">
    {
        @ @<欲操作本对象>.TimedPush(@<值>, std::chrono::milliseconds(@<超时时间>))
    }

    方法 关闭 <公开 静态 注释 = "关闭当前信道" 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = 信道模板类>
    {
        @ @<欲操作本对象>.Close()
    }

    # @begin
    # <> <include>
    # using ValueType = std::remove_pointer<@dt<模板类型1> *>::type;
    # <> </include>
    # @end
}

类 整数信道类 <公开 基础类 = 信道模板类 注释 = "信道是协程安全的,使用时不需要加锁" 折叠2 @文档 = "category = \"协程.辅助类.信道对象\"" @模板实现类 = "整数">

类 长整数信道类 <公开 基础类 = 信道模板类 注释 = "信道是协程安全的,使用时不需要加锁" 折叠2 @文档 = "category = \"协程.辅助类.信道对象\"" @模板实现类 = "长整数">

类 小数信道类 <公开 基础类 = 信道模板类 注释 = "信道是协程安全的,使用时不需要加锁" 折叠2 @文档 = "category = \"协程.辅助类.信道对象\"" @模板实现类 = "小数">

类 逻辑信道类 <公开 基础类 = 信道模板类 注释 = "信道是协程安全的,使用时不需要加锁" 折叠2 @文档 = "category = \"协程.辅助类.信道对象\"" @模板实现类 = "逻辑型">

类 文本信道类 <公开 基础类 = 信道模板类 注释 = "信道是协程安全的,使用时不需要加锁" 折叠2 @文档 = "category = \"协程.辅助类.信道对象\"" @模板实现类 = "文本型">

类 字节集信道类 <公开 基础类 = 信道模板类 注释 = "信道是协程安全的,使用时不需要加锁" 折叠2 @文档 = "category = \"协程.辅助类.信道对象\""
        @模板实现类 = "字节集类">
