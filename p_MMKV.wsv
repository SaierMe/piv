<火山程序 类型 = "通常" 版本 = 1 />

包 火山.PIV基础类 <注释 = "  源码: https://github.com/Tencent/MMKV" 注释 = "  版本: v1.3.2 / 2023-11-20"
        注释 = "  MMKV是腾讯开源的一个基于内存映射文件的持久化键值表,底层的" 注释 = "序列化/反序列化使用protobuf实现,性能高,稳定性强."
        注释 = "  从2015年中至今在微信上使用,其性能和稳定性经过了时间的验证."
        @视窗.外部头文件 = "MMKV\\include\\piv_MMKV.hpp" @视窗.外部库 = "MMKV\\lib\\$(p)\\$(d)\\mmkv_$(crt).lib"
        @视窗.需求VS版本 = "15-"
        @视窗.需求系统头文件 = "user\\piv\\MMKV\\lib\\$(p)\\$(d)\\mmkv_$(crt).lib | 缺少MMKV的静态库文件(文件太大，默认未安装),请自行下载安装PIV模块的附加静态库文件 https://piv.ink/volpiv/">

类 MMKV键值表 <公开 基础类 = PIV本地类模板 注释 = "一个基于内存映射文件的持久化键值表." 注释 = " 1. MMKV的内存占用基本与表文件相同;"
        注释 = " 2. 单个表不能保存超过4GB的数据;" 折叠 @文档 = "category = \"数据处理.MMKV键值表\"" @别名 = "PivMMKV" @别名类型 = 本地类
        @模板实现类 = "MMKV键值表">
{
    常量 单进程模式 <公开 类型 = 整数 值 = 1 注释 = "MMKV键值表会被独占,只有当前进程能读写.">
    常量 多进程模式 <公开 类型 = 整数 值 = 2 注释 = "多个进程可以同时读写同一个MMKV键值表.">

    # ====
    # 以下静态方法需要用类名调用

    方法 全局初始化 <公开 静态 注释 = "在使用MMKV的功能之前,必须先执行本方法." 注释 = "*此静态方法需要以类名调用." 折叠
            @嵌入式方法 = "req_str_param_text_pointer = true">
    参数 根目录 <类型 = 文本型 注释 = "提供MMKV表文件的保存路径,如果留空则自动设置为程序的当前位置." @默认值 = 空对象>
    参数 日志级别 <类型 = MMKV日志级别 注释 = "指定MMKV的日志级别,默认的\"无\"表示关闭日志记录;"
            注释 = "开启后会自动在控制台中输出日志,直到\"MMKV日志事件类\"接管日志记录的处理." @默认值 = MMKV日志级别.警告>
    {
        @ piv::mmkv::InitializeMMKV(@<根目录>, @<日志级别>)
    }

    方法 全局清理 <公开 静态 注释 = "可以在程序结束前执行本方法,但不执行也完全没问题." 注释 = "*在火山中不建议使用,此静态方法需要以类名调用." 折叠 @嵌入式方法 = "">
    {
        @ piv::mmkv::OnExit()
    }

    方法 取根目录 <公开 静态 类型 = 文本型 注释 = "获取全局MMKV表文件的保存目录,根目录在\"全局初始化\"时设置." 注释 = "*此静态方法需要以类名调用."
            返回值注释 = "返回的路径尾部不带路径字符,若未初始化会返回空文本." 折叠 @嵌入式方法 = "">
    {
        @ piv::mmkv::GetRootDir()
    }

    方法 备份表 <公开 静态 类型 = 逻辑型 注释 = "将来源目录中指定表名的MMKV实例备份到目标目录." 注释 = "*此静态方法需要以类名调用." 返回值注释 = "返回是否备份成功." 折叠
            @嵌入式方法 = "req_str_param_text_pointer = true">
    参数 表名称 <类型 = 文本型 注释 = "所欲备份的键值表名称(mmapID)" "">
    参数 目标目录 <类型 = 文本型 注释 = "存放备份文件的目录路径">
    参数 来源目录 <类型 = 文本型 注释 = "所欲备份的来源目录路径,即表文件所在的文件夹;" 注释 = "如果为空则从MMKV的全局\"根目录\"备份数据." @默认值 = 空对象>
    {
        @ piv::mmkv::BackupOneToDirectory(@<表名称>, @<目标目录>, @<来源目录>)
    }

    方法 恢复表 <公开 静态 类型 = 逻辑型 注释 = "将来源目录中指定表名的MMKV实例恢复到目标目录." 注释 = "*此静态方法需要以类名调用." 返回值注释 = "返回是否恢复成功." 折叠
            @嵌入式方法 = "req_str_param_text_pointer = true">
    参数 表名称 <类型 = 文本型 注释 = "所欲恢复的键值表名称(mmapID)">
    参数 来源目录 <类型 = 文本型 注释 = "所欲恢复的表文件所处的目录">
    参数 目标目录 <类型 = 文本型 注释 = "恢复文件的目标路径;" 注释 = "如果为空则恢复文件到MMKV的全局\"根目录\"中." @默认值 = 空对象>
    {
        @ piv::mmkv::RestoreOneFromDirectory(@<表名称>, @<目标目录>, @<来源目录>)
    }

    方法 备份所有表 <公开 静态 类型 = 整数 注释 = "将来源目录的所有MMKV键值表实例备份到目标目录." 注释 = "*此静态方法需要以类名调用." 返回值注释 = "返回成功备份的表数量." 折叠
            @嵌入式方法 = "req_str_param_text_pointer = true">
    参数 目标目录 <类型 = 文本型 注释 = "存放备份文件的目录路径">
    参数 来源目录 <类型 = 文本型 注释 = "所欲备份的来源目录路径,即表文件所在的文件夹;" 注释 = "如果为空则从MMKV的全局\"根目录\"备份数据." @默认值 = 空对象>
    {
        @ piv::mmkv::BackupAllToDirectory(@<目标目录>, @<来源目录>)
    }

    方法 恢复所有表 <公开 静态 类型 = 整数 注释 = "将来源目录的所有MMKV键值表实例恢复到目标目录." 注释 = "*此静态方法需要以类名调用." 返回值注释 = "返回成功恢复的表数量." 折叠
            @嵌入式方法 = "req_str_param_text_pointer = true">
    参数 来源目录 <类型 = 文本型 注释 = "所欲恢复的表文件所处的目录">
    参数 目标目录 <类型 = 文本型 注释 = "恢复文件的目标路径;" 注释 = "如果为空则恢复文件到MMKV的全局\"根目录\"中." @默认值 = 空对象>
    {
        @ piv::mmkv::RestoreAllFromDirectory(@<目标目录>, @<来源目录>)
    }

    方法 校验表文件 <公开 静态 类型 = 逻辑型 注释 = "检查指定的MMKV键值表文件是否有效." 注释 = "*此静态方法需要以类名调用."
            返回值注释 = "返回真表示文件有效,请勿使用本方法检测不存在的表文件,其返回结果未定义." 折叠
            @嵌入式方法 = "req_str_param_text_pointer = true">
    参数 表名称 <类型 = 文本型 注释 = "所欲校验的键值表名称(mmapID)">
    参数 相对路径 <类型 = 文本型 注释 = "表文件所在的路径,如果为空则使用到MMKV的全局\"根目录\"." @默认值 = 空对象>
    {
        @ piv::mmkv::IsFileValid(@<表名称>, @<相对路径>)
    }

    方法 删除表文件 <公开 静态 类型 = 逻辑型 注释 = "删除指定的MMKV键值表文件,包括数据文件和元文件(.crc)." 注释 = "注: 如果当前表被打开,它将被自动关闭."
            注释 = "*此静态方法需要以类名调用." 折叠 @嵌入式方法 = "req_str_param_text_pointer = true">
    参数 表名称 <类型 = 文本型 注释 = "所欲删除的键值表名称(mmapID)">
    参数 相对路径 <类型 = 文本型 注释 = "表文件所在的路径,如果为空则使用到MMKV的全局\"根目录\"." @默认值 = 空对象>
    {
        @ piv::mmkv::RemoveStorage(@<表名称>, @<相对路径>)
    }

    # ====
    # 表操作

    方法 打开 <公开 静态 类型 = 整数 注释 = "打开一个MMKV键值表,指定的表名不存在时会自动创建." 注释 = " 1. 调用本方法之前建议执行\"MMKV键值表.全局初始化\";"
            注释 = " 2. 如果未全局初始化,将自动使用默认值进行初始化;" 注释 = " 3. 必须打开表后才能使用本类的其他动态方法;" 注释 = " 4. 请慎重使用加密功能,因为无法判断密钥是否正确;"
            注释 = " 5. 如果用错误的密钥打开并写入了数据,之前的内容将被全部覆盖!!!" 返回值注释 = "返回-1表示打开表失败;"
            返回值注释 = "1表示成功打开了一张有内容(键值对数量大于1)的旧表;" 返回值注释 = "0表示可能创建了一张新表,或者打开了一张没有内容的旧表,又或者使用了错误的密钥(这种情况必须慎重)." 折叠
            @嵌入式方法 = "req_str_param_text_pointer = true">
    参数 欲操作本对象 <类型 = MMKV键值表>
    参数 表名称 <类型 = 文本型 注释 = "键值表的名称(mmapID),留空时打开默认的表名\"mmkv.default\";" 注释 = "提供的表名不存在时会自动创建,存在时会尝试打开;"
            注释 = "建议使用英文表名,因为中文会导致输出到控制台的日志乱码." @默认值 = 空对象>
    参数 模式 <类型 = 整数 注释 = "默认是单进程模式,一张表只能被一个进程打开;" 注释 = "多进程模式可以多个程序同时读写同一张表." @默认值 = MMKV键值表.单进程模式>
    参数 密钥 <类型 = 文本型 注释 = "创建新表时提供密钥会加密键值表的内容,留空表示不加密;" 注释 = "密钥长度不能大于16字节(超过会自动截断)."
            注释 = "若是打开旧表则必须提供正确的密钥,没加密的也必须留空;" 注释 = "密钥错误时仍会打开表,但无法读取键值,如果置入了新的键值;"
            注释 = "这个表的内容将完全被新内容替换,之前的数据将无法找回,请慎重判断!!!" @默认值 = 空对象>
    参数 根路径 <类型 = 文本型 注释 = "留空时使用\"全局初始化\"设置的根目录,不为空则可以指定另一个保存路径;" 注释 = "可以用绝对路径或相对路径(以程序的当前路径为根)."
            @默认值 = 空对象>
    {
        @ @<欲操作本对象>.OpenMMKV(@<表名称>, @<模式>, @<密钥>, @<根路径>)
    }

    方法 关闭 <公开 静态 注释 = "关闭已打开的表" 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    {
        @ @<欲操作本对象>.Close()
    }

    方法 取表名称 <公开 静态 类型 = 文本型 注释 = "获取当前所打开的键值表名称(mmapID)" 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    {
        @ @<欲操作本对象>.GetMmapID()
    }

    方法 是否多进程 <公开 静态 类型 = 逻辑型 注释 = "返回当前打开表的方式是否为多进程模式" 返回值注释 = "返回真表示是多进程模式" 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    {
        @ @<欲操作本对象>.IsInterProcess()
    }

    方法 取密钥 <公开 静态 类型 = 文本型 注释 = "获取当前MMKV键值表使用的密钥" 返回值注释 = "返回空表示未加密" 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    {
        @ @<欲操作本对象>.GetCryptKey()
    }

    方法 更改密钥 <公开 静态 类型 = 逻辑型 注释 = "提供一个密钥,可以将未加密的表变成加密的;" 注释 = "若改为空密钥,也可以将一个加密的键值表变成不加密;"
            注释 = "当然本方法也可以用来更改现有的密钥." 返回值注释 = "返回更改密钥是否成功" 折叠
            @嵌入式方法 = "req_str_param_text_pointer = true">
    参数 欲操作本对象 <类型 = MMKV键值表>
    参数 新密钥 <类型 = 文本型 注释 = "所欲更改的新密钥,提供空密钥可以将MMKV键值表变成不加密.">
    {
        @ @<欲操作本对象>.ReKey(@<新密钥>)
    }

    方法 检查更改密钥 <公开 静态 类型 = 逻辑型 注释 = "仅用于更改密钥,不会加密或解密任何数据." 注释 = "通常用于多进程模式,在其他进程更改了密钥之后调用本方法."
            返回值注释 = "返回更改密钥是否成功" 折叠 @嵌入式方法 = "req_str_param_text_pointer = true">
    参数 欲操作本对象 <类型 = MMKV键值表>
    参数 新密钥 <类型 = 文本型 注释 = "所欲检查更改的密钥">
    {
        @ @<欲操作本对象>.CheckReSetCryptKey(@<新密钥>)
    }

    方法 取总大小 <公开 静态 类型 = 变整数 注释 = "获取当前MMKV键值表文件占用空间的字节大小" 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    {
        @ @<欲操作本对象>.GetTotalSize()
    }

    方法 取实际大小 <公开 静态 类型 = 变整数 注释 = "获取当前MMKV键值表的有效数据内容字节大小" 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    {
        @ @<欲操作本对象>.GetActualSize()
    }

    方法 释放空间 <公开 静态 注释 = "MMKV在删除键值对后,不会释放对应的空间,调用本方法可以释放被占用的对应磁盘空间." 注释 = "这些多余空间会被新的键值对重新使用,一般无需特意释放." 折叠
            @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    {
        @ @<欲操作本对象>.Trim()
    }

    方法 清理缓存 <公开 静态 注释 = "如果遇到内存不足等警告时请调用本方法清理内存缓存;" 注释 = "但之后仍会重新从文件中加载所有键值对." 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    参数 保留空间 <类型 = 逻辑型 注释 = "是否在删除所有键后不改变文件大小,可以加快执行速度." @默认值 = 假>
    {
        @ @<欲操作本对象>.ClearMemoryCache(static_cast<bool>(@<保留空间>))
    }

    方法 执行同步 <公开 静态 注释 = "一般不需要执行本方法,除非你担心(手机)电池不足." 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    参数 同步模式 <类型 = 逻辑型 注释 = "假为异步模式">
    {
        @ @<欲操作本对象>.Sync(@<同步模式>)
    }

    方法 锁定 <公开 静态 注释 = "锁定当前键值表,不允许其他进程修改." 注释 = "*仅在多进程模式下使用." 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    {
        @ @<欲操作本对象>.Lock()
    }

    方法 解锁 <公开 静态 注释 = "解锁当前键值表,允许其他进程修改同一张表." 注释 = "*仅在多进程模式下使用." 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    {
        @ @<欲操作本对象>.UnLock()
    }

    方法 尝试锁定 <公开 静态 类型 = 逻辑型 注释 = "尝试锁定当前键值表,如果表已经被其他进程锁定将返回假." 注释 = "*仅在多进程模式下使用." 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    {
        @ @<欲操作本对象>.TryLock()
    }

    方法 检查内容更改 <公开 静态 注释 = "检查内容是否被其他进程修改,本方法需要配合\"MMKV日志事件类\"使用;"
            注释 = "因为\"内容更改\"事件不是实时触发,如果其他进程修改过内容,调用本方法将立即触发事件." 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    {
        @ @<欲操作本对象>.CheckContentChanged()
    }

    # ====
    # 置键值

    方法 置入逻辑值 <公开 静态 类型 = 逻辑型 注释 = "将提供的逻辑值设置为指定键名的键值" 返回值注释 = "返回是否成功" 折叠
            @嵌入式方法 = "req_cpp_bool = true">
    参数 欲操作本对象 <类型 = MMKV键值表>
    参数 键名 <注释 = "所欲置入值的键名,支持类型:" 注释 = " *文本型、标准文本类U、文本视图类U、UTF8字节集" @匹配类型 = 通用型>
    参数 值 <类型 = 逻辑型 注释 = "提供要置入的逻辑值">
    参数 有效期 <类型 = 整数 注释 = "设置所置入键值的有效期,单位为秒,本参数在\"启用自动过期\"后才生效." 注释 = "超过有效期后,置入的键值将在下一次回写时删除;"
            注释 = "0 表示永不过期; -1 表示使用\"启用自动过期\"时设置的全局有效期." @默认值 = -1>
    {
        @ @<欲操作本对象>.SetValue<bool>(@<值>, @<键名>, @<有效期>)
    }

    方法 置入整数值 <公开 静态 类型 = 逻辑型 注释 = "将提供的整数值设置为指定键名的键值" 返回值注释 = "返回是否成功" 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    参数 键名 <注释 = "所欲置入值的键名,支持类型:" 注释 = " *文本型、标准文本类U、文本视图类U、UTF8字节集" @匹配类型 = 通用型>
    参数 值 <类型 = 整数 注释 = "提供要置入的整数值">
    参数 有效期 <类型 = 整数 注释 = "设置所置入键值的有效期,单位为秒,本参数在\"启用自动过期\"后才生效." 注释 = "超过有效期后,置入的键值将在下一次回写时删除;"
            注释 = "0 表示永不过期; -1 表示使用\"启用自动过期\"时设置的全局有效期." @默认值 = -1>
    {
        @ @<欲操作本对象>.SetValue<INT>(@<值>, @<键名>, @<有效期>)
    }

    方法 置入长整数值 <公开 静态 类型 = 逻辑型 注释 = "将提供的长整数值设置为指定键名的键值" 返回值注释 = "返回是否成功" 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    参数 键名 <注释 = "所欲置入值的键名,支持类型:" 注释 = " *文本型、标准文本类U、文本视图类U、UTF8字节集" @匹配类型 = 通用型>
    参数 值 <类型 = 长整数 注释 = "提供要置入的长整数值">
    参数 有效期 <类型 = 整数 注释 = "设置所置入键值的有效期,单位为秒,本参数在\"启用自动过期\"后才生效." 注释 = "超过有效期后,置入的键值将在下一次回写时删除;"
            注释 = "0 表示永不过期; -1 表示使用\"启用自动过期\"时设置的全局有效期." @默认值 = -1>
    {
        @ @<欲操作本对象>.SetValue<INT64>(@<值>, @<键名>, @<有效期>)
    }

    方法 置入小数值 <公开 静态 类型 = 逻辑型 注释 = "将提供的小数值设置为指定键名的键值" 返回值注释 = "返回是否成功" 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    参数 键名 <注释 = "所欲置入值的键名,支持类型:" 注释 = " *文本型、标准文本类U、文本视图类U、UTF8字节集" @匹配类型 = 通用型>
    参数 值 <类型 = 小数 注释 = "提供要置入的小数值">
    参数 有效期 <类型 = 整数 注释 = "设置所置入键值的有效期,单位为秒,本参数在\"启用自动过期\"后才生效." 注释 = "超过有效期后,置入的键值将在下一次回写时删除;"
            注释 = "0 表示永不过期; -1 表示使用\"启用自动过期\"时设置的全局有效期." @默认值 = -1>
    {
        @ @<欲操作本对象>.SetValue<double>(@<值>, @<键名>, @<有效期>)
    }

    方法 置入单精度小数值 <公开 静态 类型 = 逻辑型 注释 = "将提供的小数值设置为指定键名的键值" 返回值注释 = "返回是否成功" 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    参数 键名 <类型 = 文本型 注释 = "所欲置入值的键名">
    参数 值 <类型 = 单精度小数 注释 = "提供要置入的单精度小数值">
    参数 有效期 <类型 = 整数 注释 = "设置所置入键值的有效期,单位为秒,本参数在\"启用自动过期\"后才生效." 注释 = "超过有效期后,置入的键值将在下一次回写时删除;"
            注释 = "0 表示永不过期; -1 表示使用\"启用自动过期\"时设置的全局有效期." @默认值 = -1>
    {
        @ @<欲操作本对象>.SetValue<float>(@<值>, @<键名>)
    }

    方法 置入文本值 <公开 静态 类型 = 逻辑型 注释 = "将提供的文本值设置为指定键名的键值" 返回值注释 = "返回是否成功" 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    参数 键名 <注释 = "所欲置入值的键名,支持类型:" 注释 = " *文本型、标准文本类U、文本视图类U、UTF8字节集" @匹配类型 = 通用型>
    参数 值 <类型 = 文本型 注释 = "提供要置入的文本值">
    参数 有效期 <类型 = 整数 注释 = "设置所置入键值的有效期,单位为秒,本参数在\"启用自动过期\"后才生效." 注释 = "超过有效期后,置入的键值将在下一次回写时删除;"
            注释 = "0 表示永不过期; -1 表示使用\"启用自动过期\"时设置的全局有效期." @默认值 = -1>
    {
        @ @<欲操作本对象>.SetCVolStr(@<值>, @<键名>, @<有效期>)
    }

    方法 置入字节集 <公开 静态 类型 = 逻辑型 注释 = "将提供的字节集设置为指定键名的键值" 返回值注释 = "返回是否成功" 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    参数 键名 <注释 = "所欲置入值的键名,支持类型:" 注释 = " *文本型、标准文本类U、文本视图类U、UTF8字节集" @匹配类型 = 通用型>
    参数 值 <类型 = 字节集类 注释 = "提供要置入的键值">
    参数 有效期 <类型 = 整数 注释 = "设置所置入键值的有效期,单位为秒,本参数在\"启用自动过期\"后才生效." 注释 = "超过有效期后,置入的键值将在下一次回写时删除;"
            注释 = "0 表示永不过期; -1 表示使用\"启用自动过期\"时设置的全局有效期." @默认值 = -1>
    {
        @ @<欲操作本对象>.SetCVolMem(@<值>, @<键名>, @<有效期>)
    }

    方法 置入文本数组 <公开 静态 类型 = 逻辑型 注释 = "将提供的文本数组设置为指定键名的键值" 返回值注释 = "返回是否成功" 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    参数 键名 <注释 = "所欲置入值的键名,支持类型:" 注释 = " *文本型、标准文本类U、文本视图类U、UTF8字节集" @匹配类型 = 通用型>
    参数 值 <类型 = 文本数组类 注释 = "提供要置入的文本数组">
    参数 有效期 <类型 = 整数 注释 = "设置所置入键值的有效期,单位为秒,本参数在\"启用自动过期\"后才生效." 注释 = "超过有效期后,置入的键值将在下一次回写时删除;"
            注释 = "0 表示永不过期; -1 表示使用\"启用自动过期\"时设置的全局有效期." @默认值 = -1>
    {
        @ @<欲操作本对象>.SetObject(@<值>, @<键名>, @<有效期>)
    }

    方法 置入对象值 <公开 静态 类型 = 逻辑型 注释 = "将提供的对象设置为指定键名的键值." 注释 = "本方法使用了对象序列化,可以置入对象中的成员值;" 返回值注释 = "返回是否成功" 折叠
            @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    参数 键名 <注释 = "所欲置入值的键名,支持类型:" 注释 = " *文本型、标准文本类U、文本视图类U、UTF8字节集" @匹配类型 = 通用型>
    参数 值 <类型 = 对象类 注释 = "提供要置入的对象类">
    参数 有效期 <类型 = 整数 注释 = "设置所置入键值的有效期,单位为秒,本参数在\"启用自动过期\"后才生效." 注释 = "超过有效期后,置入的键值将在下一次回写时删除;"
            注释 = "0 表示永不过期; -1 表示使用\"启用自动过期\"时设置的全局有效期." @默认值 = -1>
    {
        @ @<欲操作本对象>.SetObject(@<值>, @<键名>, @<有效期>)
    }

    方法 置入UTF8文本 <公开 静态 类型 = 逻辑型 注释 = "将提供的UTF-8文本设置为指定键名的键值" 返回值注释 = "返回是否成功" 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    参数 键名 <注释 = "所欲置入值的键名,支持类型:" 注释 = " *文本型、标准文本类U、文本视图类U、UTF8字节集" @匹配类型 = 通用型>
    参数 值 <类型 = 标准文本类U 注释 = "提供要置入的文本值">
    参数 有效期 <类型 = 整数 注释 = "设置所置入键值的有效期,单位为秒,本参数在\"启用自动过期\"后才生效." 注释 = "超过有效期后,置入的键值将在下一次回写时删除;"
            注释 = "0 表示永不过期; -1 表示使用\"启用自动过期\"时设置的全局有效期." @默认值 = -1>
    {
        @ @<欲操作本对象>.SetValue<std::string>(@<值>, @<键名>, @<有效期>)
    }

    方法 置入UTF8文本数组 <公开 静态 类型 = 逻辑型 注释 = "将提供的UTF-8文本数组设置为指定键名的键值" 返回值注释 = "返回是否成功" 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    参数 键名 <注释 = "所欲置入值的键名,支持类型:" 注释 = " *文本型、标准文本类U、文本视图类U、UTF8字节集" @匹配类型 = 通用型>
    参数 值 <类型 = 标准文本数组类U 注释 = "提供要置入的文本数组">
    参数 有效期 <类型 = 整数 注释 = "设置所置入键值的有效期,单位为秒,本参数在\"启用自动过期\"后才生效." 注释 = "超过有效期后,置入的键值将在下一次回写时删除;"
            注释 = "0 表示永不过期; -1 表示使用\"启用自动过期\"时设置的全局有效期." @默认值 = -1>
    {
        @ @<欲操作本对象>.SetValue<std::vector<std::string>>(@<值>, @<键名>, @<有效期>)
    }

    # ====
    # 取键值

    方法 取逻辑值 <公开 静态 类型 = 逻辑型 注释 = "以逻辑类型获取指定键名中的值" 返回值注释 = "成功时返回获取到的值,否则返回提供的默认值." 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    参数 键名 <注释 = "所欲取出值的键名,支持类型:" 注释 = " *文本型、标准文本类U、文本视图类U、UTF8字节集" @匹配类型 = 通用型>
    参数 默认值 <类型 = 逻辑型 注释 = "获取失败时将返回此处的默认值" @默认值 = 假>
    参数 是否存在 <类型 = 逻辑型类 注释 = "返回指定的键名是否存在" @默认值 = 空对象>
    {
        @ @<欲操作本对象>.GetBool(@<键名>, @<默认值>, reinterpret_cast<bool*>(&@<是否存在.值>))
    }

    方法 取整数值 <公开 静态 类型 = 整数 注释 = "以整数类型获取指定键名中的值" 返回值注释 = "成功时返回获取到的值,否则返回提供的默认值." 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    参数 键名 <注释 = "所欲取出值的键名,支持类型:" 注释 = " *文本型、标准文本类U、文本视图类U、UTF8字节集" @匹配类型 = 通用型>
    参数 默认值 <类型 = 整数 注释 = "获取失败时将返回此处的默认值" @默认值 = 0>
    参数 是否存在 <类型 = 逻辑型类 注释 = "返回指定的键名是否存在" @默认值 = 空对象>
    {
        @ @<欲操作本对象>.GetInt32(@<键名>, @<默认值>, reinterpret_cast<bool*>(&@<是否存在.值>))
    }

    方法 取长整数值 <公开 静态 类型 = 长整数 注释 = "以长整数类型获取指定键名中的值" 返回值注释 = "成功时返回获取到的值,否则返回提供的默认值." 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    参数 键名 <注释 = "所欲取出值的键名,支持类型:" 注释 = " *文本型、标准文本类U、文本视图类U、UTF8字节集" @匹配类型 = 通用型>
    参数 默认值 <类型 = 长整数 注释 = "获取失败时将返回此处的默认值" @默认值 = 0>
    参数 是否存在 <类型 = 逻辑型类 注释 = "返回指定的键名是否存在" @默认值 = 空对象>
    {
        @ @<欲操作本对象>.GetInt64(@<键名>, @<默认值>, reinterpret_cast<bool*>(&@<是否存在.值>))
    }

    方法 取小数值 <公开 静态 类型 = 小数 注释 = "以小数类型获取指定键名中的值" 返回值注释 = "成功时返回获取到的值,否则返回提供的默认值." 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    参数 键名 <注释 = "所欲取出值的键名,支持类型:" 注释 = " *文本型、标准文本类U、文本视图类U、UTF8字节集" @匹配类型 = 通用型>
    参数 默认值 <类型 = 小数 注释 = "获取失败时将返回此处的默认值" @默认值 = 0>
    参数 是否存在 <类型 = 逻辑型类 注释 = "返回指定的键名是否存在" @默认值 = 空对象>
    {
        @ @<欲操作本对象>.GetDouble(@<键名>, @<默认值>, reinterpret_cast<bool*>(&@<是否存在.值>))
    }

    方法 取单精度小数值 <公开 静态 类型 = 单精度小数 注释 = "以小数类型获取指定键名中的值" 返回值注释 = "成功时返回获取到的值,否则返回提供的默认值." 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    参数 键名 <注释 = "所欲取出值的键名,支持类型:" 注释 = " *文本型、标准文本类U、文本视图类U、UTF8字节集" @匹配类型 = 通用型>
    参数 默认值 <类型 = 单精度小数 注释 = "获取失败时将返回此处的默认值" @默认值 = 0>
    参数 是否存在 <类型 = 逻辑型类 注释 = "返回指定的键名是否存在" @默认值 = 空对象>
    {
        @ @<欲操作本对象>.GetFloat(@<键名>, @<默认值>, reinterpret_cast<bool*>(&@<是否存在.值>))
    }

    方法 取文本值 <公开 静态 类型 = 文本型 注释 = "获取指定键名中的文本值" 返回值注释 = "返回获取到的文本值,键名不存在或值类型不正确时返回空文本." 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    参数 键名 <注释 = "所欲取出值的键名,支持类型:" 注释 = " *文本型、标准文本类U、文本视图类U、UTF8字节集" @匹配类型 = 通用型>
    {
        @ @<欲操作本对象>.GetString(@<键名>)
    }

    方法 取文本值2 <公开 静态 类型 = 逻辑型 注释 = "将指定键名中的文本值获取到提供的变量中" 返回值注释 = "返回是否成功" 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    参数 键名 <注释 = "所欲取出值的键名,支持类型:" 注释 = " *文本型、标准文本类U、文本视图类U、UTF8字节集" @匹配类型 = 通用型>
    参数 取回值 <类型 = 文本型 注释 = "获取的文本值存放在此参数中">
    {
        @ @<欲操作本对象>.GetString(@<键名>, @<取回值>)
    }

    方法 取字节集 <公开 静态 类型 = 字节集类 注释 = "获取指定键名中的字节集值" 返回值注释 = "返回获取到的字节集,键名不存在或值类型不正确时返回空字节集." 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    参数 键名 <注释 = "所欲取出值的键名,支持类型:" 注释 = " *文本型、标准文本类U、文本视图类U、UTF8字节集" @匹配类型 = 通用型>
    {
        @ @<欲操作本对象>.GetMem(@<键名>)
    }

    方法 取字节集2 <公开 静态 类型 = 逻辑型 注释 = "获取指定键名中的字节集值" 返回值注释 = "返回是否成功" 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    参数 键名 <注释 = "所欲取出值的键名,支持类型:" 注释 = " *文本型、标准文本类U、文本视图类U、UTF8字节集" @匹配类型 = 通用型>
    参数 取回值 <类型 = 字节集类 注释 = "获取的字节集存放在此参数中">
    {
        @ @<欲操作本对象>.GetMem(@<键名>, @<取回值>)
    }

    方法 取文本数组 <公开 静态 类型 = 逻辑型 注释 = "获取指定键名中的文本数组" 返回值注释 = "返回是否成功" 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    参数 键名 <注释 = "所欲取出值的键名,支持类型:" 注释 = " *文本型、标准文本类U、文本视图类U、UTF8字节集" @匹配类型 = 通用型>
    参数 取回值 <类型 = 文本数组类 注释 = "获取的文本数组存放在此参数中">
    {
        @ @<欲操作本对象>.GetObject(@<键名>, @<取回值>)
    }

    方法 取对象值 <公开 静态 类型 = 逻辑型 注释 = "获取指定键名中的对象值." 注释 = "本方法使用了对象序列化,请保证对象的类型跟\"置对象\"时的一样,否则结果不可预料."
            返回值注释 = "返回是否成功" 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    参数 键名 <注释 = "所欲取出值的键名,支持类型:" 注释 = " *文本型、标准文本类U、文本视图类U、UTF8字节集" @匹配类型 = 通用型>
    参数 取回对象 <类型 = 对象类 注释 = "获取的对象存放在此参数中">
    {
        @ @<欲操作本对象>.GetObject(@<键名>, @<取回对象>)
    }

    方法 取UTF8文本 <公开 静态 类型 = 逻辑型 注释 = "获取指定键名中的UTF-8文本值" 返回值注释 = "返回获取到的文本值,键名不存在或值类型不正确时返回空文本." 折叠
            @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    参数 键名 <注释 = "所欲取出值的键名,支持类型:" 注释 = " *文本型、标准文本类U、文本视图类U、UTF8字节集" @匹配类型 = 通用型>
    参数 取回值 <类型 = 标准文本类U 注释 = "获取的文本值存放在此参数中">
    {
        @ @<欲操作本对象>.GetString(@<键名>, @<取回值>.data())
    }

    方法 取UTF8文本2 <公开 静态 类型 = 标准文本类U 注释 = "获取指定键名中的UTF-8文本值" 返回值注释 = "返回获取到的文本值,键名不存在或值类型不正确时返回空文本." 折叠
            @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    参数 键名 <注释 = "所欲取出值的键名,支持类型:" 注释 = " *文本型、标准文本类U、文本视图类U、UTF8字节集" @匹配类型 = 通用型>
    {
        @ @<欲操作本对象>.GetStringU(@<键名>)
    }

    方法 取UTF8文本数组 <公开 静态 类型 = 逻辑型 注释 = "获取指定键名中的UTF-8文本数组" 返回值注释 = "返回是否成功" 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    参数 键名 <注释 = "所欲取出值的键名,支持类型:" 注释 = " *文本型、标准文本类U、文本视图类U、UTF8字节集" @匹配类型 = 通用型>
    参数 取回值 <类型 = 标准文本数组类U 注释 = "获取的文本数组存放在此参数中">
    {
        @ @<欲操作本对象>.GetVector(@<键名>, @<取回值>)
    }

    # ====
    # 键值对操作

    方法 取键值对大小 <公开 静态 类型 = 变整数 注释 = "获取指定键值对实际占用的空间大小" 返回值注释 = "键值对不存在时返回0." 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    参数 键名 <注释 = "提供所欲取实际大小的键名,支持类型:" 注释 = " *文本型、标准文本类U、文本视图类U、UTF8字节集" @匹配类型 = 通用型>
    参数 值实际大小 <类型 = 逻辑型 注释 = "为真时只返回值内容占用的实际大小;" 注释 = "为假时返回整个键值对的实际大小." @默认值 = 假>
    {
        @ @<欲操作本对象>.GetValueSize(@<键名>, @<值实际大小>)
    }

    方法 是否存在键 <公开 静态 类型 = 逻辑型 注释 = "判断当前MMKV键值表是否存在指定键名" 返回值注释 = "返回真表示键名存在." 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    参数 键名 <注释 = "所欲判断是否存在的键名,支持类型:" 注释 = " *文本型、标准文本类U、文本视图类U、UTF8字节集" @匹配类型 = 通用型>
    {
        @ @<欲操作本对象>.IsContainsKey(@<键名>)
    }

    方法 取键值对数量 <公开 静态 类型 = 变整数 注释 = "获取当前MMKV键值表的键值对数量." 返回值注释 = "返回0表示表的内容为空,或者\"打开\"表时提供了错误的密钥." 折叠
            @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    参数 过滤到期键值 <类型 = 逻辑型 注释 = "是否过滤掉已经到期的键值对" @默认值 = 假>
    {
        @ @<欲操作本对象>.GetCount(static_cast<bool>(@<过滤到期键值>))
    }

    方法 取所有键名 <公开 静态 类型 = 变整数 注释 = "获取当前MMKV键值表的所有键名." 返回值注释 = "返回键名的数量,跟\"取键数量\"的值一样." 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    参数 键名数组 <类型 = 文本数组类 注释 = "获取到的键名数组将存放在此文本数组类中.">
    参数 过滤到期键名 <类型 = 逻辑型 注释 = "是否过滤掉已经过期的键值对" @默认值 = 假>
    {
        @ @<欲操作本对象>.GetAllKeys(@<键名数组>.data(), static_cast<bool>(@<过滤到期键名>))
    }

    方法 批量删除键值对 <公开 静态 注释 = "删除文本数组中所有指定键名的键值对" 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    参数 键名数组 <类型 = 文本数组类 注释 = "所欲删除的键名数组">
    {
        @ @<欲操作本对象>.RemoveValuesForKeys(@<键名数组>.data())
    }

    方法 批量删除键值对2 <公开 静态 注释 = "删除文本数组中所有指定键名的键值对" 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    参数 键名数组 <类型 = 标准文本数组类U 注释 = "所欲删除的键名数组">
    {
        @ @<欲操作本对象>.RemoveValuesForKeys(@<键名数组>)
    }

    方法 删除键值对 <公开 静态 注释 = "删除指定键名的键值对" 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    参数 键名 <注释 = "所欲删除的键名,支持类型:" 注释 = " *文本型、标准文本类U、文本视图类U、UTF8字节集" @匹配类型 = 通用型>
    {
        @ @<欲操作本对象>.RemoveValueForKey(@<键名>)
    }

    方法 清空 <公开 静态 注释 = "清空当前键值表,同时回收表文件占用的空间." 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    参数 保留空间 <类型 = 逻辑型 注释 = "是否在删除所有键后不改变文件大小,可以加快执行速度." @默认值 = 假>
    {
        @ @<欲操作本对象>.ClearAll(static_cast<bool>(@<保留空间>))
    }

    方法 启用自动过期 <公开 静态 类型 = 逻辑型 注释 = "启用键值自动过期的功能,启用后支持在置入键值时设置有效期." 注释 = "超过有效期的键值将在下一次回写时自动删除." 折叠
            @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    参数 有效期 <类型 = 整数 注释 = "所有键值通用的有效期,单位为秒." 注释 = "所有创建或修改时间超过了指定秒数的键值,将在下一次完全回写时删除."
            注释 = "为0表示没有通用的有效期,每个键值都有自己的有效期.">
    {
        @ @<欲操作本对象>.EnableAutoKeyExpire(static_cast<uint32_t>(@<有效期>))
    }

    方法 禁用自动过期 <公开 静态 类型 = 逻辑型 注释 = "禁用键值自动过期的功能" 折叠 @嵌入式方法 = "">
    参数 欲操作本对象 <类型 = MMKV键值表>
    {
        @ @<欲操作本对象>.DisableAutoKeyExpire()
    }
}

类 MMKV日志事件类 <公开 注释 = "  MMKV默认将日志打印到控制台,并不会输出日志文件," 注释 = "定义本事件会立即接管MMKV的日志记录处理."
        注释 = "  全局只能有一个实例能生效,以最后定义的为准." 折叠 @文档 = "category = \"数据处理.MMKV键值表\"">
{
    方法 类_初始化 <折叠>
    {
        @ piv::mmkvEvent::data().set(this);
        @ MMKV::registerLogHandler(&@sn<current_class>::LogHandler);
        @ MMKV::registerContentChangeHandler(&@sn<current_class>::ContentChangeHandler);
        @ MMKV::registerErrorHandler(&@sn<current_class>::ErrorHandler);
    }

    方法 类_清理 <折叠>
    {
        @ if (piv::mmkvEvent::data().get<@sn<current_class>*>() == this)
        @ {
        @     MMKV::unRegisterLogHandler();
        @     MMKV::unRegisterContentChangeHandler();
        @     MMKV::unRegisterErrorHandler();
        @ }
    }

    方法 置日志级别 <公开 注释 = "设置MMKV的全局日志记录级别." 注释 = "低于该级别的日志不会被输出,设置为\"无\"时关闭日志记录."
            注释 = "\"MMKV键值表.全局初始化\"时也可以设置日志级别." 折叠 @嵌入式方法 = "">
    参数 日志级别 <类型 = MMKV日志级别 注释 = "所欲设置的日志级别">
    {
        @ piv::mmkv::SetLogLevel(@<日志级别>)
    }

    方法 内容更改 <公开 定义事件 类型 = 整数 注释 = "当键值表的内容被其他进程改变时触发本事件,仅在多进程模式下有效."
            注释 = "本事件的实时性无法得到保证,若内容已被其他进程修改,调用MMKV实例" 注释 = "的\"检查内容更改\"才会立即触发事件." 返回值注释 = "此返回值无意义." 折叠>
    参数 表名称 <类型 = 文本型 注释 = "被其他进程更改的键值表名称(mmapID)">

    方法 错误处理 <公开 定义事件 类型 = 整数 注释 = "遇到错误时触发本事件" 返回值注释 = "遇到错误时返回0表示丢弃所有数据(此为默认处理方式);"
            返回值注释 = "返回1将尝试从文件中恢复可用数据." 折叠>
    参数 表名称 <类型 = 文本型 注释 = "出错的键值表名称(mmapID)">
    参数 错误类型 <类型 = 整数 注释 = "错误的类型,只能是下列两个值之一:" 注释 = "0: 循环冗余校验码(CRC)出错" 注释 = "1: 获取文件长度失败">

    方法 日志记录处理 <公开 定义事件 类型 = 整数 注释 = "MMKV产生日志时将触发本事件." 注释 = "MMKV默认将日志打印到控制台,并不会输出日志文件,启用本事件后改为在此处理日志记录."
            注释 = "例如你可以在此使用\"格式日志类.加入来源日志\"输出日志文件." 返回值注释 = "此返回值无意义." 折叠>
    参数 日志级别 <类型 = MMKV日志级别 注释 = "这条日志的记录级别,级别为\"无\"时会关闭日志记录.">
    参数 源文件名 <类型 = 文本型 注释 = "产生这条日志的MMKV项目源码文件名">
    参数 行号 <类型 = 整数 注释 = "源文件中的具体行号,必须用相同版本的源码来对比.">
    参数 函数名称 <类型 = 文本型 注释 = "产生这条日志的函数名称">
    参数 消息内容 <类型 = 文本型 注释 = "日志的消息内容">

    # @begin
    # <> <include>
    # static void ContentChangeHandler(const std::string &mmapID) {
    #     @sn<current_class>* pthis = piv::mmkvEvent::data().get<@sn<current_class>*>();
    #     if (pthis)
    #         pthis->@<内容更改>(*PivU2Ws{mmapID});
    # }
    # static MMKVRecoverStrategic ErrorHandler(const std::string &mmapID, MMKVErrorType errorType) {
    #     @sn<current_class>* pthis = piv::mmkvEvent::data().get<@sn<current_class>*>();
    #     if (pthis)
    #         return static_cast<MMKVRecoverStrategic>(pthis->@<错误处理>(*PivU2Ws{mmapID}, static_cast<INT>(errorType)));
    #     return OnErrorDiscard;
    # }
    # static void LogHandler(MMKVLogLevel level, const char *file, int line, const char *function, MMKVLog_t message) {
    #     @sn<current_class>* pthis = piv::mmkvEvent::data().get<@sn<current_class>*>();
    #     if (pthis)
    #         pthis->@<日志记录处理>(static_cast<INT>(level), @an<CVolString>(file), line,
    #                                @an<CVolString>(function), @an<CVolString>(message.c_str()));
    # }
    # <> </include>
    # @end
}

类 MMKV日志级别 <公开 注释 = "MMKV键值表的日志记录级别" 折叠 @文档 = "category = \"数据处理.MMKV键值表.辅助类\"" @常量类 = 整数>
{
    常量 调试 <公开 值 = 0 注释 = "仅用于调试版,发布版本中不可用">
    常量 信息 <公开 值 = 1 注释 = "默认级别">
    常量 警告 <公开 值 = 2>
    常量 错误 <公开 值 = 3>
    常量 无 <公开 值 = 4 注释 = "用于禁止所有日志消息">
}
