<火山程序 类型 = "通常" 版本 = 1 />

包 火山.PIV基础类 <注释 = "源码: https://github.com/marzer/tomlplusplus"
        注释 = "TOML v1.0.0 https://toml.io/cn/v1.0.0"
        注释 = "全称：Tom的(语义)明显、(配置)最小化的语言(Tom\'s Obvious, Minimal Language)."
        注释 = "TOML 旨在成为一个语义明显且易于阅读的最小化配置文件格式." 注释 = "TOML 被设计成可以无歧义地映射为哈希表." 注释 = "TOML 应当能轻易地解析成各种语言中的数据结构."
        @视窗.外部头文件 = "src\\piv_toml.hpp" @视窗.附加编译参数 = "cpp: /std:c++17" @视窗.需求VS版本 = "15-">

类 TOML节点基类 <公开 折叠 折叠2 @文档 = "category = \"配置文件.TOML\"" @别名 = "//" @别名类型 = 本地类 @类用途 = 定义嵌入参数类型>
{

    # 取路径值 Node views

    方法 取路径 <公开 静态 类型 = TOML节点视图 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML节点基类>
    参数 路径 <@匹配类型 = 通用型>
    {
        @ @<当前对象>.at_path(PivS2V{@<路径>}.sv)
    }

    方法 取路径文本值 <公开 静态 类型 = 文本型 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML节点基类>
    参数 路径 <@匹配类型 = 通用型>
    {
        @ PivU2Ws{@<当前对象>.at_path(PivS2V{@<路径>}.sv).value_or<std::string_view>(std::string_view{""})}.str
    }

    方法 取路径文本值U <公开 静态 类型 = 标准文本类U 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML节点基类>
    参数 路径 <@匹配类型 = 通用型>
    {
        @ @<当前对象>.at_path(PivS2V{@<路径>}.sv).value_or<std::string_view>(std::string_view{""})
    }

    方法 取路径整数值 <公开 静态 类型 = 整数 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML节点基类>
    参数 路径 <@匹配类型 = 通用型>
    参数 默认值 <类型 = 整数 @默认值 = 0>
    {
        @ static_cast<INT>(@<当前对象>.at_path(PivS2V{@<路径>}.sv).value_or<int64_t>(@<默认值>))
    }

    方法 取路径长整数值 <公开 静态 类型 = 长整数 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML节点基类>
    参数 路径 <@匹配类型 = 通用型>
    参数 默认值 <类型 = 长整数 @默认值 = 0>
    {
        @ @<当前对象>.at_path(PivS2V{@<路径>}.sv).value_or<int64_t>(0)
    }

    方法 取路径小数值 <公开 静态 类型 = 小数 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML节点基类>
    参数 路径 <@匹配类型 = 通用型>
    参数 默认值 <类型 = 小数 @默认值 = 0>
    {
        @ @<当前对象>.at_path(PivS2V{@<路径>}.sv).value_or<double>(@<默认值>)
    }

    方法 取路径逻辑值 <公开 静态 类型 = 逻辑型 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML节点基类>
    参数 路径 <@匹配类型 = 通用型>
    参数 默认值 <类型 = 逻辑型 @默认值 = 假>
    {
        @ @<当前对象>.at_path(PivS2V{@<路径>}.sv).value_or<bool>(@<默认值>)
    }

    方法 取路径日期值 <公开 静态 类型 = TOML日期 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML节点基类>
    参数 路径 <@匹配类型 = 通用型>
    {
        @ @<当前对象>.at_path(PivS2V{@<路径>}.sv).value_or<toml::date>(toml::date{})
    }

    方法 取路径时间值 <公开 静态 类型 = TOML时间 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML节点基类>
    参数 路径 <@匹配类型 = 通用型>
    {
        @ @<当前对象>.at_path(PivS2V{@<路径>}.sv).value_or<toml::time>(toml::time{})
    }

    方法 取路径日期时间值 <公开 静态 类型 = TOML日期时间 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML节点基类>
    参数 路径 <@匹配类型 = 通用型>
    {
        @ @<当前对象>.at_path(PivS2V{@<路径>}.sv).value_or<toml::date_time>(toml::date_time{})
    }

    # 类型转换

    方法 到键值表 <公开 静态 类型 = TOML键值表 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML节点基类>
    {
        @ *@<当前对象>.as_table()
    }

    方法 到数组 <公开 静态 类型 = TOML数组类 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML节点基类>
    {
        @ *@<当前对象>.as_array()
    }

    方法 到文本 <公开 静态 类型 = 文本型 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML节点基类>
    {
        @ PivU2Ws{@<当前对象>.as_string()->get()}.str
    }

    方法 到标准文本 <公开 静态 类型 = 标准文本类U 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML节点基类>
    {
        @ @<当前对象>.as_string()->get()
    }

    方法 到整数 <公开 静态 类型 = 长整数 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML节点基类>
    {
        @ static_cast<INT>(@<当前对象>.as_integer()->get())
    }

    方法 到长整数 <公开 静态 类型 = 长整数 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML节点基类>
    {
        @ @<当前对象>.as_integer()->get()
    }

    方法 到小数 <公开 静态 类型 = 小数 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML节点基类>
    {
        @ @<当前对象>.as_floating_point()->get()
    }

    方法 到逻辑 <公开 静态 类型 = 逻辑型 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML节点基类>
    {
        @ @<当前对象>.as_boolean()->get()
    }

    方法 到日期 <公开 静态 类型 = TOML日期 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML节点基类>
    {
        @ @<当前对象>.as_date()->get()
    }

    方法 到时间 <公开 静态 类型 = TOML时间 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML节点基类>
    {
        @ @<当前对象>.as_time()->get()
    }

    方法 到日期时间 <公开 静态 类型 = TOML日期时间 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML节点基类>
    {
        @ @<当前对象>.as_date_time()->get()
    }

    # 类型检查

    方法 是否为同类元素 <公开 静态 类型 = 逻辑型 注释 = "检查节点是否仅包含一种类型的值或元素." 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML节点基类>
    参数 节点类型 <类型 = TOML节点类型>
    {
        @ @<当前对象>.is_homogeneous(@<节点类型>)
    }

    方法 是否为同类元素2 <公开 静态 类型 = 逻辑型 注释 = "检查节点是否仅包含一种类型的值或元素." 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML节点基类>
    参数 节点类型 <类型 = TOML节点类型>
    参数 不匹配的首元素 <类型 = TOML节点指针>
    {
        @ @<当前对象>.is_homogeneous(@<节点类型>, @<不匹配的首元素>)
    }

    方法 类型 <公开 静态 类型 = TOML节点类型 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML节点基类>
    {
        @ @<当前对象>.type()
    }

    方法 是否为键值表 <公开 静态 类型 = 逻辑型 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML节点基类>
    {
        @ @<当前对象>.is_table()
    }

    方法 是否为数组 <公开 静态 类型 = 逻辑型 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML节点基类>
    {
        @ @<当前对象>.is_array()
    }

    方法 是否为文本 <公开 静态 类型 = 逻辑型 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML节点基类>
    {
        @ @<当前对象>.is_string()
    }

    方法 是否为整数 <公开 静态 类型 = 逻辑型 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML节点基类>
    {
        @ @<当前对象>.is_integer()
    }

    方法 是否为小数 <公开 静态 类型 = 逻辑型 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML节点基类>
    {
        @ @<当前对象>.is_floating_point()
    }

    方法 是否为数值 <公开 静态 类型 = 逻辑型 注释 = "是否为数值(整数型或小数型)" 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML节点基类>
    {
        @ @<当前对象>.is_number()
    }

    方法 是否为逻辑型 <公开 静态 类型 = 逻辑型 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML节点基类>
    {
        @ @<当前对象>.is_boolean()
    }

    方法 是否为日期 <公开 静态 类型 = 逻辑型 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML节点基类>
    {
        @ @<当前对象>.is_date()
    }

    方法 是否为时间 <公开 静态 类型 = 逻辑型 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML节点基类>
    {
        @ @<当前对象>.is_time()
    }

    方法 是否为日期时间 <公开 静态 类型 = 逻辑型 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML节点基类>
    {
        @ @<当前对象>.is_date_time()
    }
}

类 TOML节点类 <公开 基础类 = TOML节点基类 折叠 @文档 = "category = \"配置文件.TOML\"" @别名 = "toml::node" @别名类型 = 本地类>
{

    # 元数据 Metadata

    方法 取源文档位置 <公开 静态 类型 = 文本型 折叠 @禁止流程检查 = 真>
    参数 当前对象 <类型 = TOML节点类>
    {
        @ std::stringstream ss;
        @ ss << @<当前对象>.source();
        @ return @an<CVolString>{ss.str().c_str()};
    }

    # 序列化

    方法 到可读文本 <公开 静态 类型 = 文本型 折叠 @禁止流程检查 = 真>
    参数 当前对象 <类型 = TOML节点类>
    {
        @ std::stringstream ss;
        @ ss << toml::toml_formatter{@<当前对象>};
        @ return @an<CVolString>{ss.str().c_str()};
    }

    方法 到JSON文本 <公开 静态 类型 = 文本型 折叠 @禁止流程检查 = 真>
    参数 当前对象 <类型 = TOML节点类>
    {
        @ std::stringstream ss;
        @ ss << toml::json_formatter{@<当前对象>};
        @ return @an<CVolString>{ss.str().c_str()};
    }

    方法 到YAML文本 <公开 静态 类型 = 文本型 折叠 @禁止流程检查 = 真>
    参数 当前对象 <类型 = TOML节点类>
    {
        @ std::stringstream ss;
        @ ss << toml::yaml_formatter{@<当前对象>};
        @ return @an<CVolString>{ss.str().c_str()};
    }

    方法 到可读数据 <公开 静态 类型 = 字节集类 折叠 @禁止流程检查 = 真>
    参数 当前对象 <类型 = TOML节点类>
    {
        @ std::stringstream ss;
        @ ss << toml::toml_formatter{@<当前对象>};
        @ return @an<CVolMem>{ss.str().c_str(), static_cast<INT_P>(ss.str().size())};
    }

    方法 到JSON数据 <公开 静态 类型 = 字节集类 折叠 @禁止流程检查 = 真>
    参数 当前对象 <类型 = TOML节点类>
    {
        @ std::stringstream ss;
        @ ss << toml::json_formatter{@<当前对象>};
        @ return @an<CVolMem>{ss.str().c_str(), static_cast<INT_P>(ss.str().size())};
    }

    方法 到YAML数据 <公开 静态 类型 = 字节集类 折叠 @禁止流程检查 = 真>
    参数 当前对象 <类型 = TOML节点类>
    {
        @ std::stringstream ss;
        @ ss << toml::yaml_formatter{@<当前对象>};
        @ return @an<CVolMem>{ss.str().c_str(), static_cast<INT_P>(ss.str().size())};
    }
}

类 TOML值基类 <公开 @文档 = "category = \"配置文件.TOML.值类型\"" @别名 = "//" @别名类型 = 本地参考类型 @类用途 = 定义嵌入参数类型>
{
    方法 为空指针 <公开 静态 类型 = 逻辑型 折叠 @嵌入式方法 = "">
    参数 当前值 <类型 = TOML值基类>
    {
        @ (@<当前值> == nullptr)
    }
}

类 TOML文本值 <公开 基础类 = TOML值基类 @文档 = "category = \"配置文件.TOML.值类型\"" @别名 = "toml::value<std::string>*"
        @别名类型 = 本地参考类型>
{
    方法 值 <公开 静态 属性读 类型 = 文本型 折叠 @嵌入式方法 = "">
    参数 当前值 <类型 = TOML文本值>
    {
        @ PivU2Ws{@<当前值>->get()}.str
    }
}

类 TOML节点指针 <公开 基础类 = PIV参考指针模板 @文档 = "category = \"配置文件.TOML\"" @模板实现类 = "TOML节点类">

类 TOML节点视图 <公开 基础类 = TOML节点基类 折叠 @文档 = "category = \"配置文件.TOML\"" @别名 = "toml::node_view<toml::node>"
        @别名类型 = 本地类>
{
    方法 节点 <公开 静态 类型 = TOML节点指针 折叠 @嵌入式方法 = "">
    参数 本视图 <类型 = TOML节点视图>
    {
        @ @<本视图>.node()
    }
}

类 TOML键值表 <公开 基础类 = TOML节点类 折叠 @文档 = "category = \"配置文件.TOML\"" @别名 = "toml::table" @别名类型 = 本地类>
{
    方法 创建空对象 <公开 静态 类型 = TOML键值表 折叠 @嵌入式方法 = "">
    {
        @ toml::table{}
    }

    # 解析

    方法 解析文件 <公开 静态 类型 = 逻辑型 注释 = "解析toml文件" 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML键值表>
    参数 文件路径 <@匹配类型 = 通用型>
    {
        @ piv::toml::ParseFile(@<当前对象>, @<文件路径>)
    }

    方法 解析文本 <公开 静态 类型 = 逻辑型 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML键值表>
    参数 配置内容 <@匹配类型 = 通用型>
    参数 来源路径 <类型 = 文本型 @默认值 = "">
    {
        @ piv::toml::Parse(@<当前对象>, @<配置内容>, @<来源路径>)
    }

    方法 解析字节集 <公开 静态 类型 = 逻辑型 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML键值表>
    参数 配置内容 <类型 = 字节集类>
    参数 来源路径 <类型 = 文本型 @默认值 = "">
    {
        @ piv::toml::Parse(@<当前对象>, @<配置内容>, @<来源路径>)
    }

    # 序列化

    方法 保存文件 <公开 静态 类型 = 逻辑型 折叠>
    参数 当前对象 <类型 = TOML键值表>
    参数 保存路径 <类型 = 文本型>
    {
        返回 (当前对象.到可读数据 ().写字节集到文件 (保存路径))
    }

    # 成员数

    方法 是否为空 <公开 静态 类型 = 逻辑型 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML键值表>
    {
        @ @<当前对象>.empty()
    }

    方法 取成员数 <公开 静态 类型 = 整数 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML键值表>
    {
        @ static_cast<INT>(@<当前对象>.size())
    }

    方法 是否存在 <公开 静态 类型 = 逻辑型 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML键值表>
    参数 键名 <@匹配类型 = 通用型>
    {
        @ @<当前对象>.contains(PivS2V{@<键名>}.sv)
    }

    # 删除

    方法 清空 <公开 静态 类型 = 整数 注释 = "Removes all key-value pairs from the table." 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML键值表>
    {
        @ @<当前对象>.clear()
    }

    方法 删除 <公开 静态 类型 = 整数 返回值注释 = "返回删除的键值对数量,0或1." 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML键值表>
    参数 键名 <@匹配类型 = 通用型>
    {
        @ static_cast<int32_t>(@<当前对象>.erase(PivS2V{@<键名>}.sv))
    }

    方法 删除空成员 <公开 静态 注释 = "Removes empty child arrays and tables." 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML键值表>
    参数 递归删除 <类型 = 逻辑型 注释 = "是否删除子数组和子键值表的自身">
    {
        @ @<当前对象>.prune(@<递归删除>)
    }

    # 类型

    方法 是否为内联表 <公开 静态 类型 = 逻辑型 注释 = "Returns true if this table is an inline table."
            注释 = "Runtime-constructed tables (i.e. those not created"
            注释 = " during parsing) are not inline by default." 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML键值表>
    {
        @ @<当前对象>.is_inline()
    }

    # 插入

    方法 插入键值表 <公开 静态 类型 = 逻辑型 注释 = "插入一个指定键名的TOML键值表对象,如果所指定的键名已经存在,将覆盖先前值."
            注释 = "返回真表示插入了一个新值,返回假则表示覆盖了原有的键值对." 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML键值表>
    参数 键名 <@匹配类型 = 通用型>
    参数 键值表 <类型 = TOML键值表>
    {
        @ @<当前对象>.insert_or_assign(PivS2V{@<键名>}.sv, @<键值表>).second
    }

    方法 插入数组值 <公开 静态 类型 = 逻辑型 注释 = "插入一个指定键名的TOML表数组对象,如果所指定的键名已经存在,将覆盖先前值."
            注释 = "返回真表示插入了一个新值,返回假则表示覆盖了原有的键值对." 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML键值表>
    参数 键名 <@匹配类型 = 通用型>
    参数 数组值 <类型 = TOML数组类>
    {
        @ @<当前对象>.insert_or_assign(PivS2V{@<键名>}.sv, @<数组值>).second
    }

    方法 插入文本值 <公开 静态 类型 = 逻辑型 注释 = "插入一个指定键名的文本型值,如果所指定的键名已经存在,将覆盖先前值." 注释 = "返回真表示插入了一个新值,返回假则表示覆盖了原有的键值对."
            折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML键值表>
    参数 键名 <@匹配类型 = 通用型>
    参数 文本值 <@匹配类型 = 通用型>
    {
        @ @<当前对象>.insert_or_assign(PivS2V{@<键名>}.sv, PivS2V{@<文本值>}.sv).second
    }

    方法 插入整数值 <公开 静态 类型 = 逻辑型 注释 = "插入一个指定键名的整数型值,如果所指定的键名已经存在,将覆盖先前值." 注释 = "返回真表示插入了一个新值,返回假则表示覆盖了原有的键值对."
            折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML键值表>
    参数 键名 <@匹配类型 = 通用型>
    参数 整数值 <类型 = 长整数>
    {
        @ @<当前对象>.insert_or_assign(PivS2V{@<键名>}.sv, @<整数值>).second
    }

    方法 插入小数值 <公开 静态 类型 = 逻辑型 注释 = "插入一个指定键名的小数型值,如果所指定的键名已经存在,将覆盖先前值." 注释 = "返回真表示插入了一个新值,返回假则表示覆盖了原有的键值对."
            折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML键值表>
    参数 键名 <@匹配类型 = 通用型>
    参数 小数值 <类型 = 小数>
    {
        @ @<当前对象>.insert_or_assign(PivS2V{@<键名>}.sv, @<小数值>).second
    }

    方法 插入逻辑值 <公开 静态 类型 = 逻辑型 注释 = "插入一个指定键名的逻辑型值,如果所指定的键名已经存在,将覆盖先前值." 注释 = "返回真表示插入了一个新值,返回假则表示覆盖了原有的键值对."
            折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML键值表>
    参数 键名 <@匹配类型 = 通用型>
    参数 逻辑值 <类型 = 逻辑型>
    {
        @ @<当前对象>.insert_or_assign(PivS2V{@<键名>}.sv, static_cast<bool>(@<逻辑值>)).second
    }

    方法 插入日期值 <公开 静态 类型 = 逻辑型 注释 = "插入一个指定键名的TOML日期值,如果所指定的键名已经存在,将覆盖先前值."
            注释 = "返回真表示插入了一个新值,返回假则表示覆盖了原有的键值对." 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML键值表>
    参数 键名 <@匹配类型 = 通用型>
    参数 日期值 <类型 = TOML日期>
    {
        @ @<当前对象>.insert_or_assign(PivS2V{@<键名>}.sv, @<日期值>).second
    }

    方法 插入时间值 <公开 静态 类型 = 逻辑型 注释 = "插入一个指定键名的TOML时间值,如果所指定的键名已经存在,将覆盖先前值."
            注释 = "返回真表示插入了一个新值,返回假则表示覆盖了原有的键值对." 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML键值表>
    参数 键名 <@匹配类型 = 通用型>
    参数 时间值 <类型 = TOML时间>
    {
        @ @<当前对象>.insert_or_assign(PivS2V{@<键名>}.sv, @<时间值>).second
    }

    方法 插入日期时间值 <公开 静态 类型 = 逻辑型 注释 = "插入一个指定键名的TOML日期时间值,如果所指定的键名已经存在,将覆盖先前值."
            注释 = "返回真表示插入了一个新值,返回假则表示覆盖了原有的键值对." 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML键值表>
    参数 键名 <@匹配类型 = 通用型>
    参数 日期时间值 <类型 = TOML日期时间>
    {
        @ @<当前对象>.insert_or_assign(PivS2V{@<键名>}.sv, @<日期时间值>).second
    }

    # 置入

    方法 置入键值表 <公开 静态 类型 = 逻辑型 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML键值表>
    参数 键名 <@匹配类型 = 通用型>
    参数 键值表 <类型 = TOML键值表>
    {
        @ @<当前对象>.emplace<toml::table>(PivS2V{@<键名>}.sv, @<键值表>).second
    }

    方法 置入数组值 <公开 静态 类型 = 逻辑型 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML键值表>
    参数 键名 <@匹配类型 = 通用型>
    参数 数组值 <类型 = TOML数组类>
    {
        @ @<当前对象>.emplace<toml::array>(PivS2V{@<键名>}.sv, @<数组值>).second
    }

    方法 置入文本值 <公开 静态 类型 = 逻辑型 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML键值表>
    参数 键名 <@匹配类型 = 通用型>
    参数 文本值 <@匹配类型 = 通用型>
    {
        @ @<当前对象>.emplace<std::string>(PivS2V{@<键名>}.sv, PivS2V{@<文本值>}.sv).second
    }

    方法 置入整数值 <公开 静态 类型 = 逻辑型 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML键值表>
    参数 键名 <@匹配类型 = 通用型>
    参数 整数值 <类型 = 长整数>
    {
        @ @<当前对象>.emplace<int64_t>(PivS2V{@<键名>}.sv, @<整数值>).second
    }

    方法 置入小数值 <公开 静态 类型 = 逻辑型 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML键值表>
    参数 键名 <@匹配类型 = 通用型>
    参数 小数值 <类型 = 小数>
    {
        @ @<当前对象>.emplace<double>(PivS2V{@<键名>}.sv, @<小数值>).second
    }

    方法 置入逻辑值 <公开 静态 类型 = 逻辑型 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML键值表>
    参数 键名 <@匹配类型 = 通用型>
    参数 逻辑值 <类型 = 逻辑型>
    {
        @ @<当前对象>.emplace<bool>(PivS2V{@<键名>}.sv, @<逻辑值>).second
    }

    方法 置入日期值 <公开 静态 类型 = 逻辑型 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML键值表>
    参数 键名 <@匹配类型 = 通用型>
    参数 日期值 <类型 = TOML日期>
    {
        @ @<当前对象>.emplace<toml::date>(PivS2V{@<键名>}.sv, @<日期值>).second
    }

    方法 置入时间值 <公开 静态 类型 = 逻辑型 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML键值表>
    参数 键名 <@匹配类型 = 通用型>
    参数 时间值 <类型 = TOML时间>
    {
        @ @<当前对象>.emplace<toml::time>(PivS2V{@<键名>}.sv, @<时间值>).second
    }

    方法 置入日期时间值 <公开 静态 类型 = 逻辑型 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML键值表>
    参数 键名 <@匹配类型 = 通用型>
    参数 日期时间值 <类型 = TOML日期时间>
    {
        @ @<当前对象>.emplace<toml::date_time>(PivS2V{@<键名>}.sv, @<日期时间值>).second
    }

    # 取值

    方法 取节点 <公开 静态 类型 = TOML节点指针 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML键值表>
    参数 键名 <@匹配类型 = 通用型>
    {
        @ @<当前对象>.get(PivS2V{@<键名>}.sv)
    }

    方法 取数组 <公开 静态 类型 = TOML数组类 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML键值表>
    参数 键名 <@匹配类型 = 通用型>
    {
        @ piv::toml::GetArr(@<当前对象>, @<键名>, toml::array{})
    }

    方法 取键值表 <公开 静态 类型 = TOML键值表 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML键值表>
    参数 键名 <@匹配类型 = 通用型>
    {
        @ piv::toml::GetTable(@<当前对象>, @<键名>, toml::table{})
    }

    方法 取文本值 <公开 静态 类型 = 文本型 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML键值表>
    参数 键名 <@匹配类型 = 通用型>
    {
        @ PivU2Ws{piv::toml::GetAs<std::string>(@<当前对象>, @<键名>)}.str
    }

    方法 取文本值U <公开 静态 类型 = 标准文本类U 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML键值表>
    参数 键名 <@匹配类型 = 通用型>
    {
        @ piv::toml::GetAs<std::string>(@<当前对象>, @<键名>)
    }

    方法 取整数值 <公开 静态 类型 = 整数 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML键值表>
    参数 键名 <@匹配类型 = 通用型>
    {
        @ static_cast<INT>(piv::toml::GetAs<int64_t>(@<当前对象>, @<键名>))
    }

    方法 取长整数值 <公开 静态 类型 = 长整数 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML键值表>
    参数 键名 <@匹配类型 = 通用型>
    {
        @ piv::toml::GetAs<int64_t>(@<当前对象>, @<键名>)
    }

    方法 取小数值 <公开 静态 类型 = 小数 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML键值表>
    参数 键名 <@匹配类型 = 通用型>
    {
        @ piv::toml::GetAs<double>(@<当前对象>, @<键名>)
    }

    方法 取逻辑值 <公开 静态 类型 = 逻辑型 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML键值表>
    参数 键名 <@匹配类型 = 通用型>
    {
        @ piv::toml::GetAs<bool>(@<当前对象>, @<键名>)
    }

    方法 取日期值 <公开 静态 类型 = TOML日期 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML键值表>
    参数 键名 <@匹配类型 = 通用型>
    {
        @ piv::toml::GetAs<toml::date>(@<当前对象>, @<键名>)
    }

    方法 取时间值 <公开 静态 类型 = TOML时间 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML键值表>
    参数 键名 <@匹配类型 = 通用型>
    {
        @ piv::toml::GetAs<toml::time>(@<当前对象>, @<键名>)
    }

    方法 取日期时间值 <公开 静态 类型 = TOML日期时间 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML键值表>
    参数 键名 <@匹配类型 = 通用型>
    {
        @ piv::toml::GetAs<toml::date_time>(@<当前对象>, @<键名>)
    }
}

类 TOML数组类 <公开 基础类 = TOML节点类 折叠 @文档 = "category = \"配置文件.TOML\"" @别名 = "toml::array" @别名类型 = 本地类>
{
    方法 创建空数组 <公开 静态 类型 = TOML数组类 折叠 @嵌入式方法 = "">
    {
        @ toml::array{}
    }

    方法 创建数组 <公开 静态 类型 = TOML数组类 折叠 @嵌入式方法 = "">
    参数 成员值 <@可扩展 = "" @匹配类型 = 通用型>
    {
        @ toml::array{@<成员值>}
    }

    # ---
    #
    #
}

类 TOML类型比较 <公开 注释 = "TOML类型比较的基类" 折叠 折叠2 @文档 = "category = \"配置文件.TOML.辅助类\"" @别名 = "//" @别名类型 = 本地类
        @类用途 = 定义嵌入参数类型>
{

    #

    方法 是否相等 <公开 静态 类型 = 逻辑型 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML类型比较 @视窗.前缀文本 = "const ">
    参数 所欲比较对象 <类型 = TOML类型比较 @视窗.前缀文本 = "const ">
    {
        @ @<当前对象> == @<所欲比较对象>
    }

    方法 是否大于 <公开 静态 类型 = 逻辑型 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML类型比较 @视窗.前缀文本 = "const ">
    参数 所欲比较对象 <类型 = TOML类型比较 @视窗.前缀文本 = "const ">
    {
        @ @<当前对象> > @<所欲比较对象>
    }

    方法 是否大于等于 <公开 静态 类型 = 逻辑型 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML类型比较 @视窗.前缀文本 = "const ">
    参数 所欲比较对象 <类型 = TOML类型比较 @视窗.前缀文本 = "const ">
    {
        @ @<当前对象> >= @<所欲比较对象>
    }

    方法 是否小于 <公开 静态 类型 = 逻辑型 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML类型比较 @视窗.前缀文本 = "const ">
    参数 所欲比较对象 <类型 = TOML类型比较 @视窗.前缀文本 = "const ">
    {
        @ @<当前对象> < @<所欲比较对象>
    }

    方法 是否小于等于 <公开 静态 类型 = 逻辑型 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML类型比较 @视窗.前缀文本 = "const ">
    参数 所欲比较对象 <类型 = TOML类型比较 @视窗.前缀文本 = "const ">
    {
        @ @<当前对象> <= @<所欲比较对象>
    }
}

类 TOML日期 <公开 基础类 = TOML类型比较 注释 = "日期时间中的日期部分,表示一整天,不涉及时区偏移" 折叠 折叠2 @文档 = "category = \"配置文件.TOML.辅助类\""
        @别名 = "toml::date" @别名类型 = 本地类>
{
    变量 年 <公开 类型 = 无符号短整数 @输出名 = "year">
    变量 月 <公开 类型 = 无符号字节 注释 = "1 - 12" @输出名 = "month">
    变量 日 <公开 类型 = 无符号字节 注释 = "1 - 31" @输出名 = "day">

    # 静态方法

    方法 创建 <公开 静态 类型 = TOML日期 折叠 @嵌入式方法 = "">
    参数 年份 <@匹配类型 = 通用整数型>
    参数 月份 <@匹配类型 = 通用整数型>
    参数 天数 <@匹配类型 = 通用整数型>
    {
        @ toml::date(@<年份>, @<月份>, @<天数>)
    }

    # 成员方法

    方法 置日期 <公开 静态 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML日期>
    参数 年份 <@匹配类型 = 通用整数型>
    参数 月份 <@匹配类型 = 通用整数型>
    参数 天数 <@匹配类型 = 通用整数型>
    {
        @ @<当前对象> = std::move(toml::date(@<年份>, @<月份>, @<天数>))
    }

    方法 置火山时间 <公开 静态 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    参数 当前对象 <类型 = TOML日期>
    参数 日期时间值 <类型 = 小数>
    {
        @ SYSTEMTIME SystemTime{0};
        @ if (::VariantTimeToSystemTime(@<日期时间值>, &SystemTime))
        @     @<当前对象> = std::move(toml::date(SystemTime.wYear, SystemTime.wMonth, SystemTime.wDay));
        @     return TRUE;
        @ }
        @ return FALSE;
    }

    方法 置时间戳 <公开 静态 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    参数 当前对象 <类型 = TOML日期>
    参数 秒时间戳 <类型 = 长整数>
    {
        @ struct tm timeinfo;
        @ if (localtime_s(&timeinfo, &@<秒时间戳>) == 0)
        @ {
        @     @<当前对象> = std::move(toml::date(timeinfo.tm_year + 1900, timeinfo.tm_mon + 1, timeinfo.tm_mday));
        @     return TRUE;
        @ }
        @ return FALSE;
    }

    方法 到火山时间 <公开 静态 类型 = 小数 折叠>
    参数 当前对象 <类型 = TOML日期 @视窗.前缀文本 = "const ">
    {
        返回 (当前对象.到时间戳 () / 86400.0 + 25569.0)
    }

    方法 到时间戳 <公开 静态 类型 = 长整数 折叠 @禁止流程检查 = 真>
    参数 当前对象 <类型 = TOML日期 @视窗.前缀文本 = "const ">
    {
        @ struct tm timeinfo{0, 0, 0, @<当前对象>.day, @<当前对象>.month - 1, @<当前对象>.year - 1900, 0, 0, 0};
        @ return static_cast<int64_t>(::mktime(&timeinfo));
    }

    方法 取文本 <公开 静态 类型 = 文本型 折叠 @禁止流程检查 = 真>
    参数 当前对象 <类型 = TOML日期 @视窗.前缀文本 = "const ">
    {
        @ std::stringstream ss;
        @ ss << @<当前对象>;
        @ return @an<CVolString>(ss.str().c_str());
    }

    方法 取标准文本 <公开 静态 类型 = 标准文本类U 折叠 @禁止流程检查 = 真>
    参数 当前对象 <类型 = TOML日期 @视窗.前缀文本 = "const ">
    {
        @ std::stringstream ss;
        @ ss << @<当前对象>;
        @ return ss.str();
    }
}

类 TOML时间 <公开 基础类 = TOML类型比较 注释 = "只能表示某一天之中的时间点,与任何特定的日期无关、亦不涉及时区偏移." 折叠 折叠2
        @文档 = "category = \"配置文件.TOML.辅助类\"" @别名 = "toml::time" @别名类型 = 本地类>
{
    变量 时 <公开 类型 = 无符号字节 注释 = "0-23" @输出名 = "hour">
    变量 分 <公开 类型 = 无符号字节 注释 = "0-59" @输出名 = "minute">
    变量 秒 <公开 类型 = 无符号字节 注释 = "0-59" @输出名 = "second">
    变量 纳秒 <公开 类型 = 无符号整数 @输出名 = "nanosecond">

    # 静态方法

    方法 创建 <公开 静态 类型 = TOML时间 折叠 @嵌入式方法 = "">
    参数 小时 <@匹配类型 = 通用整数型>
    参数 分钟 <@匹配类型 = 通用整数型>
    参数 秒数 <@匹配类型 = 通用整数型>
    参数 纳秒数 <@匹配类型 = 通用整数型 @默认值 = 0>
    {
        @ toml::time(@<小时>, @<分钟>, @<秒数>, @<纳秒数>)
    }

    # 成员方法

    方法 置时间 <公开 静态 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML时间>
    参数 小时 <@匹配类型 = 通用整数型>
    参数 分钟 <@匹配类型 = 通用整数型>
    参数 秒数 <@匹配类型 = 通用整数型>
    参数 纳秒数 <@匹配类型 = 通用整数型 @默认值 = 0>
    {
        @ @<当前对象> = std::move(toml::time(@<小时>, @<分钟>, @<秒数>, @<纳秒数>))
    }

    方法 置火山时间 <公开 静态 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    参数 当前对象 <类型 = TOML时间>
    参数 日期时间值 <类型 = 小数>
    {
        @ SYSTEMTIME SystemTime{};
        @ if (::VariantTimeToSystemTime(vtime, &SystemTime))
        @ {
        @     @<当前对象> = std::move(toml::time(SystemTime.wHour, SystemTime.wMinute, SystemTime.wSecond, SystemTime.wMilliseconds * 1000000));
        @     return TRUE;
        @ }
        @ return FALSE;
    }

    方法 置时间戳 <公开 静态 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    参数 当前对象 <类型 = TOML时间>
    参数 秒时间戳 <类型 = 长整数>
    {
        @ struct tm timeinfo;
        @ if (localtime_s(&timeinfo, &@<秒时间戳>) == 0)
        @ {
        @     @<当前对象> = std::move(toml::time(timeinfo.tm_hour, timeinfo.tm_min, timeinfo.tm_sec, 0));
        @     return TRUE;
        @ }
        @ return FALSE;
    }

    方法 置毫秒时间戳 <公开 静态 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    参数 当前对象 <类型 = TOML时间>
    参数 毫秒时间戳 <类型 = 长整数>
    {
        @ struct tm timeinfo;
        @ time_t timestamp = @<毫秒时间戳> / 1000;
        @ if (localtime_s(&timeinfo, &timestamp) == 0)
        @ {
        @     @<当前对象> = std::move(toml::time(timeinfo.tm_hour, timeinfo.tm_min, timeinfo.tm_sec, (@<毫秒时间戳> % 1000) * 1000000));
        @     return TRUE;
        @ }
        @ return FALSE;
    }

    方法 取文本 <公开 静态 类型 = 文本型 折叠 @禁止流程检查 = 真>
    参数 当前对象 <类型 = TOML时间 @视窗.前缀文本 = "const ">
    {
        @ std::stringstream ss;
        @ ss << @<当前对象>;
        @ return @an<CVolString>(ss.str().c_str());
    }

    方法 取标准文本 <公开 静态 类型 = 标准文本类U 折叠 @禁止流程检查 = 真>
    参数 当前对象 <类型 = TOML时间 @视窗.前缀文本 = "const ">
    {
        @ std::stringstream ss;
        @ ss << @<当前对象>;
        @ return ss.str();
    }
}

类 TOML时间偏移 <公开 基础类 = TOML类型比较 注释 = "时区偏移" 折叠 折叠2 @文档 = "category = \"配置文件.TOML.辅助类\""
        @别名 = "toml::time_offset" @别名类型 = 本地类>
{
    变量 偏移 <公开 类型 = 短整数 注释 = "与UTC+0的偏移量,单位为分钟." @输出名 = "minutes">

    # 静态方法

    方法 创建 <公开 静态 类型 = TOML时间偏移 折叠 @嵌入式方法 = "">
    参数 小时 <@匹配类型 = 通用整数型>
    参数 分钟 <@匹配类型 = 通用整数型>
    {
        @ toml::time_offset(@<小时>, @<分钟>)
    }

    # 成员方法

    方法 置偏移 <公开 静态 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML时间偏移>
    参数 小时 <@匹配类型 = 通用整数型>
    参数 分钟 <@匹配类型 = 通用整数型>
    {
        @ @<当前对象> = std::move(toml::time_offset(@<小时>, @<分钟>))
    }

    方法 取文本 <公开 静态 类型 = 文本型 折叠 @禁止流程检查 = 真>
    参数 当前对象 <类型 = TOML时间偏移 @视窗.前缀文本 = "const ">
    {
        @ std::stringstream ss;
        @ ss << @<当前对象>;
        @ return @an<CVolString>(ss.str().c_str());
    }

    方法 取标准文本 <公开 静态 类型 = 标准文本类U 折叠 @禁止流程检查 = 真>
    参数 当前对象 <类型 = TOML时间偏移 @视窗.前缀文本 = "const ">
    {
        @ std::stringstream ss;
        @ ss << @<当前对象>;
        @ return ss.str();
    }
}

类 TOML时间偏移可空值 <公开 基础类 = 标准可空值模板 注释 = "时区偏移的可空值" 折叠2 @文档 = "category = \"配置文件.TOML.辅助类\""
        @模板实现类 = "TOML时间偏移">

类 TOML日期时间 <公开 基础类 = TOML类型比较 注释 = "完整的日期时间,可以指定或省略时区偏移量" 折叠 折叠2 @文档 = "category = \"配置文件.TOML.辅助类\""
        @别名 = "toml::date_time" @别名类型 = 本地类>
{
    变量 日期 <公开 类型 = TOML日期 @输出名 = "date">
    变量 时间 <公开 类型 = TOML时间 @输出名 = "time">
    变量 偏移 <公开 类型 = TOML时间偏移可空值 @输出名 = "offset">

    # 静态方法

    方法 创建 <公开 静态 类型 = TOML日期时间 折叠 @禁止流程检查 = 真>
    参数 欲设置日期 <类型 = TOML日期 @视窗.前缀文本 = "const ">
    参数 欲设置时间 <类型 = TOML时间 @视窗.前缀文本 = "const ">
    参数 欲设置时区偏移 <类型 = 整数 注释 = "单位为分钟" @默认值 = 0>
    {
        @ if (@<欲设置时区偏移> == 0)
        @     return toml::date_time(@<欲设置日期>, @<欲设置时间>);
        @ else
        @     return toml::date_time(@<欲设置日期>, @<欲设置时间>, toml::time_offset(@<欲设置时区偏移> / 60, @<欲设置时区偏移> % 60));
    }

    # 成员方法

    方法 置日期时间 <公开 静态 折叠>
    参数 当前对象 <类型 = TOML日期时间>
    参数 欲设置日期 <类型 = TOML日期>
    参数 欲设置时间 <类型 = TOML时间>
    参数 欲设置时区偏移 <类型 = 整数 注释 = "单位为分钟" @默认值 = 0>
    {
        @ if (@<欲设置时区偏移> == 0)
        @     @<当前对象> = std::move(toml::date_time(@<欲设置日期>, @<欲设置时间>));
        @ else
        @     @<当前对象> = std::move(toml::date_time(@<欲设置日期>, @<欲设置时间>, toml::time_offset(@<欲设置时区偏移> / 60, @<欲设置时区偏移> % 60)));
    }

    方法 是否为本地 <公开 静态 类型 = 逻辑型 注释 = "返回当前日期时间是否含有时区偏移信息" 折叠 @嵌入式方法 = "">
    参数 当前对象 <类型 = TOML日期时间 @视窗.前缀文本 = "const ">
    {
        @ @<当前对象>.is_local()
    }

    方法 置火山时间 <公开 静态 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    参数 当前对象 <类型 = TOML日期时间>
    参数 日期时间值 <类型 = 小数>
    {
        @ SYSTEMTIME SystemTime{};
        @ if (::VariantTimeToSystemTime(@<日期时间值>, &SystemTime))
        @ {
        @     TIME_ZONE_INFORMATION tz{0};
        @     ::GetTimeZoneInformation(&tz);
        @     @<当前对象> = std::move(toml::date_time(
        @         toml::date(SystemTime.wYear, SystemTime.wMonth, SystemTime.wDay),
        @         toml::time(SystemTime.wHour, SystemTime.wMinute, SystemTime.wSecond, SystemTime.wMilliseconds * 1000000),
        @         toml::time_offset(-tz.Bias / 60, -tz.Bias % 60)));
        @     return TRUE;
        @ }
        @ return FALSE;
    }

    方法 置时间戳 <公开 静态 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    参数 当前对象 <类型 = TOML日期时间>
    参数 秒时间戳 <类型 = 长整数>
    {
        @ struct tm timeinfo;
        @ if (localtime_s(&timeinfo, &@<秒时间戳>) == 0)
        @ {
        @     TIME_ZONE_INFORMATION tz{0};
        @     ::GetTimeZoneInformation(&tz);
        @     @<当前对象> = std::move(toml::date_time(
        @         toml::date(timeinfo.tm_year + 1900, timeinfo.tm_mon + 1, timeinfo.tm_mday),
        @         toml::time(timeinfo.tm_hour, timeinfo.tm_min, timeinfo.tm_sec, 0),
        @         toml::time_offset(-tz.Bias / 60, -tz.Bias % 60)));
        @     return TRUE;
        @ }
        @ return FALSE;
    }

    方法 置毫秒时间戳 <公开 静态 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    参数 当前对象 <类型 = TOML日期时间>
    参数 毫秒时间戳 <类型 = 长整数>
    {
        @ struct tm timeinfo;
        @ time_t timestamp = @<毫秒时间戳> / 1000;
        @ if (localtime_s(&timeinfo, &timestamp) == 0)
        @ {
        @     TIME_ZONE_INFORMATION tz{0};
        @     ::GetTimeZoneInformation(&tz);
        @     @<当前对象> = std::move(toml::date_time(
        @         toml::date(timeinfo.tm_year + 1900, timeinfo.tm_mon + 1, timeinfo.tm_mday),
        @         toml::time(timeinfo.tm_hour, timeinfo.tm_min, timeinfo.tm_sec, (@<毫秒时间戳> % 1000) * 1000000),
        @         toml::time_offset(-tz.Bias / 60, -tz.Bias % 60)));
        @     return TRUE;
        @ }
        @ return FALSE;
    }

    方法 到火山时间 <公开 静态 类型 = 小数 折叠 @禁止流程检查 = 真>
    参数 当前对象 <类型 = TOML日期时间 @视窗.前缀文本 = "const ">
    {
        变量 毫秒时间戳 <类型 = 长整数>
        毫秒时间戳 = 当前对象.到毫秒时间戳 ()
        @ TIME_ZONE_INFORMATION tz{0};
        @ ::GetTimeZoneInformation(&tz);
        @ return (@<毫秒时间戳> - tz.Bias * 1000 * 60) / (1000.0 * 60.0 * 60.0 * 24.0) + 25569;
    }

    方法 到时间戳 <公开 静态 类型 = 长整数 折叠 @禁止流程检查 = 真>
    参数 当前对象 <类型 = TOML日期时间 @视窗.前缀文本 = "const ">
    {
        @ struct tm timeinfo {
        @     @<当前对象>.time.second, @<当前对象>.time.minute, @<当前对象>.time.hour, @<当前对象>.date.day,
        @     @<当前对象>.date.month - 1, @<当前对象>.date.year - 1900, 0, 0, 0
        @ };
        @ return static_cast<int64_t>(::mktime(&timeinfo));
    }

    方法 到毫秒时间戳 <公开 静态 类型 = 长整数 折叠 @禁止流程检查 = 真>
    参数 当前对象 <类型 = TOML日期时间 @视窗.前缀文本 = "const ">
    {
        @ struct tm timeinfo {
        @     @<当前对象>.time.second, @<当前对象>.time.minute, @<当前对象>.time.hour, @<当前对象>.date.day,
        @     @<当前对象>.date.month - 1, @<当前对象>.date.year - 1900, 0, 0, 0
        @ };
        @ return static_cast<int64_t>(::mktime(&timeinfo)) * 1000 + @<当前对象>.time.nanosecond / 1000000;
    }

    方法 取文本 <公开 静态 类型 = 文本型 折叠 @禁止流程检查 = 真>
    参数 当前对象 <类型 = TOML日期时间 @视窗.前缀文本 = "const ">
    {
        @ std::stringstream ss;
        @ ss << @<当前对象>;
        @ return @an<CVolString>(ss.str().c_str());
    }

    方法 取标准文本 <公开 静态 类型 = 标准文本类U 折叠 @禁止流程检查 = 真>
    参数 当前对象 <类型 = TOML日期时间 @视窗.前缀文本 = "const ">
    {
        @ std::stringstream ss;
        @ ss << @<当前对象>;
        @ return ss.str();
    }
}

类 TOML节点类型 <公开 折叠 折叠2 @文档 = "category = \"配置文件.TOML.辅助类\"" @别名 = "toml::node_type::none" @别名类型 = 本地值类型>
{
    常量 未知 <公开 类型 = TOML节点类型 值 = @"@toml::node_type::none" 注释 = "不是一个TOML节点">
    常量 键值表 <公开 类型 = TOML节点类型 值 = @"@toml::node_type::table" 注释 = "键值表(也被称为哈希表或字典)是键值对的集合">
    常量 数组 <公开 类型 = TOML节点类型 值 = @"@toml::node_type::array" 注释 = "toml::array">
    常量 字符串 <公开 类型 = TOML节点类型 值 = @"@toml::node_type::string" 注释 = "共有四种方式来表示字符串：基本字符串、多行基本字符串、字面量和多行字面量."
            注释 = "所有字符串都只能包含有效的UTF-8字符.">
    常量 整型 <公开 类型 = TOML节点类型 值 = @"@toml::node_type::integer" 注释 = "有符号整型数,最大8字节,负数的前缀是减号.">
    常量 浮点数 <公开 类型 = TOML节点类型 值 = @"@toml::node_type::floating_point" 注释 = "双精度浮点数(8字节)">
    常量 布尔值 <公开 类型 = TOML节点类型 值 = @"@toml::node_type::boolean" 注释 = "逻辑布尔值(1字节),必须是小写的true或false">
    常量 日期 <公开 类型 = TOML节点类型 值 = @"@toml::node_type::date" 注释 = "日期时间中的日期部分,表示一整天,不涉及时区偏移">
    常量 时间 <公开 类型 = TOML节点类型 值 = @"@toml::node_type::time"
            注释 = "日期时间中的时间部分,只表示一天之中的那个时间,与任何特定的日期无关、亦不涉及时区偏移.">
    常量 日期时间 <公开 类型 = TOML节点类型 值 = @"@toml::node_type::date_time" 注释 = "完整的日期时间,可以指定或省略时区偏移量">
}

#
