<火山程序 类型 = "通常" 版本 = 1 />

包 火山.PIV基础类 <注释 = "本库最低要求为C++17标准" @视窗.外部头文件 = "src\\piv_fmtlog.h" @视窗.附加编译参数 = "cpp: /std:c++17"
        @视窗.需求VS版本 = "15-">

类 格式日志类 <公开 基础类 = PIV对象类 注释 = "  fmtlog 是一个纳秒级精度的高性能异步日志记录库,使用fmtlib进行" 注释 = "文本格式化(std::format标准)."
        注释 = "  本类在项目周期中只能同时打开一个日志文件." 折叠 @文档 = "category = \"日志记录\"" @禁止创建对象 = 真>
{

    # 源码: https://github.com/MengRao/fmtlog
    # 版本: 2.2.1 (2023/03/26)
    # 作者: Meng Rao
    # 封装: Xelloss
    # 修改版源码: https://github.com/SaierMe/fmtlog
    # ---

    方法 类_清理 <折叠>
    {
        销毁 ()
    }

    方法 初始化 <公开 静态 类型 = 逻辑型 注释 = "为了简化日志库的使用,而提供的二次封装." 注释 = "提供一系列在启动程序时应该调用的方法,例如:"
            注释 = "打开日志文件、设置各种参数和启动轮询线程..." 返回值注释 = "提供了文件路径时,返回是否打开文件成功,即使返回失败,仍会初始化其他流程." 折叠>
    参数 文件路径 <类型 = 文本型 注释 = "请提供完整的日志文件名;" 注释 = "如果提供空对象,则不创建日志文件;提供空文本时使用\"运行目录\\log.txt\"." @默认值 = "">
    参数 是否每日文件 <类型 = 逻辑型 注释 = "为真时在文件名中添加日期,每到第二天的00:00切换到新日期的日志文件." @默认值 = 假>
    参数 日志级别 <类型 = 字节 注释 = "低于该级别的日志将直接丢弃,不会写入到日志文件:"
            注释 = "0=DBG/调试; 1=INF/信息; 2=WRN/警告; 3=ERR/错误; 4=OFF/关闭" @默认值 = 0>
    参数 刷新延迟 <类型 = 长整数 注释 = "刷新延迟时间(纳秒),默认值为3秒;" 注释 = "最早的日志经过了指定的延迟时间,将立即刷新缓冲区." @默认值 = 3000000000>
    参数 刷新级别 <类型 = 字节 注释 = "默认为\"OFF/关闭\",如果遇到级别大于指定刷新级别的日志,将立即刷新缓冲区."
            注释 = "0=DBG/调试; 1=INF/信息; 2=WRN/警告; 3=ERR/错误; 4=OFF/关闭" @默认值 = 4>
    参数 缓冲区大小 <类型 = 整数 注释 = "默认为8KB,如果缓冲区已满,将立即刷新缓冲区." @默认值 = 8192>
    参数 是否重写 <类型 = 逻辑型 注释 = "如果文件已存在,为真时将清空文件的内容;" 注释 = "为假则在文件尾部添加日志." @默认值 = 假>
    参数 日期格式 <类型 = 文本型 注释 = "\"是否每日文件\"为真时可用,为假时忽略." 注释 = "指定插入到日志文件名的日期时间格式. 默认格式类似\".2022-04-24\"."
            注释 = "下列为常用的格式替换符,完整请看\"标准时间类.取格式时间\":" 注释 = "  %y  年份的后2位              例: 22"
            注释 = "  %Y  完整的4位年份            例: 2022" 注释 = "  %b  缩写的月份名称           例: Apr"
            注释 = "  %B  完整的月份名称           例: April" 注释 = "  %m  十进制的月份             例: 04"
            注释 = "  %d  2位数的某月第N天         例: 01" 注释 = "  %e  2位的某月第N天,前补空格  例:  1"
            注释 = "  %a  缩写的星期名称           例: Fri" 注释 = "  %A  完整的星期名称           例: Friday"
            注释 = "  %u  十进制的星期数(1-7)      例: 5" 注释 = "  %w  星期数(0-6),0为星期天    例: 5"
            注释 = "  %D  等价于 %m/%d/%y          例: 04/01/22" 注释 = "  %F  等价于 %Y-%m-%d          例: 2022-04-01"
            @默认值 = ".%F">
    {
        格式日志类.置日志级别 (日志级别)
        格式日志类.置刷新延迟 (刷新延迟)
        格式日志类.置刷新级别 (刷新级别)
        格式日志类.置缓冲区尺寸 (缓冲区大小)
        格式日志类.启动轮询线程 (1000000)
        如果 (文本是否为空对象 (文件路径) == 假)
        {
            如果 (文本是否为空 (文件路径))
            {
                文件路径 = 取运行目录 () + "log.txt"
            }
            如果 (是否每日文件)
            {
                如果 (格式日志类.打开每日日志 (文件路径, 是否重写, 0, 1, 日期格式) == 假)
                {
                    返回 (假)
                }
            }
            否则
            {
                如果 (格式日志类.打开日志文件 (文件路径, 是否重写) == 假)
                {
                    返回 (假)
                }

            }
        }
        返回 (真)
    }

    方法 销毁 <公开 静态 注释 = "为了简化日志库的使用,而提供的二次封装." 注释 = "提供一系列在退出程序时应该调用的方法,例如:" 注释 = "停止轮询线程、关闭日志文件" 折叠>
    {
        格式日志类.停止轮询线程 ()
        格式日志类.关闭日志文件 ()
    }

    # 日志文件相关

    方法 打开日志文件 <公开 静态 类型 = 逻辑型 注释 = "只有打开日志文件之后,才会将日志输出到文件中." 注释 = "不打开文件仍可以记录日志,但需要通过\"格式日志事件类\"进行处理."
            注释 = "重复执行将切换到新打开的文件." 返回值注释 = "返回是否打开成功" 折叠 @禁止流程检查 = 真>
    参数 文件路径 <类型 = 文本型 注释 = "请提供完整的日志文件名,会自动创建中间目录和文件.">
    参数 是否重写 <类型 = 逻辑型 注释 = "如果文件已存在,为真时将清空文件的内容;为假则在文件尾部添加日志." @默认值 = 假>
    {
        @ @an<CVolString> strPath;
        @ ::CreateDirectoryTree(::GetAbsOSPathOfFileName(@<文件路径>.GetText(), strPath));
        @ return fmtlog::setLogFile(@<文件路径>.GetText(), @<是否重写>);
    }

    方法 打开每日日志 <公开 静态 类型 = 逻辑型 注释 = "打开带日期格式的日志文件,程序运行到第二天会自动切换到新日期的日志文件." 注释 = "只有打开日志文件之后,才会将日志输出到文件中."
            注释 = "不打开文件仍可以记录日志,但需要通过\"格式日志事件类\"进行处理." 注释 = "重复执行将切换到新打开的文件." 返回值注释 = "返回是否打开成功." 折叠 @禁止流程检查 = 真>
    参数 文件路径 <类型 = 文本型 注释 = "请提供完整路径的日志文件名,会自动创建中间目录和文件;"
            注释 = "如提供的路径为\"d:\\\\log.txt\",则默认创建的文件为\"d:\\\\log.2022-04-24.txt\".">
    参数 是否重写 <类型 = 逻辑型 注释 = "如果文件已存在,为真时将清空文件的内容;" 注释 = "为假则在文件尾部添加日志." @默认值 = 假>
    参数 时 <类型 = 整数 注释 = "第二天到达该时间后切换到新日期的日志文件,默认为凌晨0点." @默认值 = 0>
    参数 分 <类型 = 整数 注释 = "默认为0分" @默认值 = 0>
    参数 日期格式 <类型 = 文本型 注释 = "指定插入到日志文件名的日期时间格式. 默认格式类似\".2022-04-24\"."
            注释 = "下列为常用的格式替换符,完整请看\"标准时间类.取格式时间\":" 注释 = "  %y  年份的后2位              例: 22"
            注释 = "  %Y  完整的4位年份            例: 2022" 注释 = "  %b  缩写的月份名称           例: Apr"
            注释 = "  %B  完整的月份名称           例: April" 注释 = "  %m  十进制的月份             例: 04"
            注释 = "  %d  2位数的某月第N天         例: 01" 注释 = "  %e  2位的某月第N天,前补空格  例:  1"
            注释 = "  %a  缩写的星期名称           例: Fri" 注释 = "  %A  完整的星期名称           例: Friday"
            注释 = "  %u  十进制的星期数(1-7)      例: 5" 注释 = "  %w  星期数(0-6),0为星期天    例: 5"
            注释 = "  %D  等价于 %m/%d/%y          例: 04/01/22" 注释 = "  %F  等价于 %Y-%m-%d          例: 2022-04-01"
            @默认值 = ".%F">
    {
        @ @an<CVolString> strPath;
        @ ::CreateDirectoryTree(::GetAbsOSPathOfFileName(@<文件路径>.GetText(), strPath));
        @ return fmtlog::setDailyLogFile(@<文件路径>.GetText(), @<是否重写>, @<时>, @<分>, @<日期格式>);
    }

    方法 关闭日志文件 <公开 静态 注释 = "关闭日志文件,关闭前会将缓冲区的日志写入到文件中." 注释 = "关闭后仍可以记录日志,但需要通过\"格式日志事件类\"进行处理." 折叠
            @嵌入式方法 = "">
    {
        @ fmtlog::closeDailyLogFile()
    }

    # 执行相关

    方法 启动轮询线程 <公开 静态 注释 = "在后台启动一个轮询线程,按指定的间隔周期式执行轮询." 注释 = "启动轮询线程后,用户不应再手动使用\"轮询\"."
            注释 = "建议在启动程序后立即使用本方法." 折叠 @嵌入式方法 = "">
    参数 轮询周期 <类型 = 长整数 注释 = "每次轮询之间的间隔时间(单位为纳秒),默认值为1秒;" 注释 = "注: 1秒=1000*1000*1000纳秒" @默认值 = 1000000000>
    {
        @ fmtlog::startPollingThread(@<轮询周期>)
    }

    方法 停止轮询线程 <公开 静态 注释 = "停止轮询线程,建议在退出程序之前使用本方法." 折叠 @嵌入式方法 = "">
    {
        @ fmtlog::stopPollingThread()
    }

    方法 轮询 <公开 静态 注释 = "收集所有线程的日志信息,然后写入到日志文件中." 注释 = "如果未使用\"启动轮询线程\",用户需要不断重复调用本方法." 折叠 @嵌入式方法 = "">
    参数 强制刷新 <类型 = 逻辑型 注释 = "如果为真,将刷新内部的文件缓存,立即将缓存写出到日志文件." @默认值 = 假>
    {
        @ fmtlog::poll(@<强制刷新>)
    }

    # 加入日志相关

    方法 加入日志 <公开 静态 注释 = "将日志内容推送到日志队列中,可指定日志级别和格式化日志内容." 折叠 @嵌入式方法 = "req_str_param_text_pointer = true">
    参数 日志级别 <类型 = 字节 注释 = "如果提供的日志级别低于当前日志级别,这条日志将被丢弃;"
            注释 = "0=DBG/调试; 1=INF/信息; 2=WRN/警告; 3=ERR/错误; 4=OFF/关闭">
    参数 日志内容 <类型 = 文本型 注释 = "提供日志内容,前面会自动加上日志头,支持std::format的格式化文本;" 注释 = "格式替换符为\"{}\",例如: \"你好，{}。\""
            注释 = "具体的格式要求请参考\"取标准格式文本\"的参数备注.">
    参数 替换数据 <注释 = "本参数可空可扩展;" 注释 = "如果\"日志内容\"为格式文本,本参数用于给格式文本中的格式替换符提供替换数据;"
            注释 = "支持类型: 通用数值型、文本型、标准文本类、文本视图类" @匹配类型 = 通用型 @可扩展 = "" @默认值 = 0>
    {
        @ FMTLOG_ONCE_LOC(__FMTLOG_SOURCE(@sn<current_source_file>, @sn<current_source_line>), static_cast<fmtlog::LogLevel>(@<日志级别>), @<日志内容>, @<替换数据>)
    }

    方法 加入调试日志 <公开 静态 注释 = "将调试级别的日志内容推送到日志队列中,可格式化日志内容." 折叠 @嵌入式方法 = "req_str_param_text_pointer = true">
    参数 日志内容 <类型 = 文本型 注释 = "提供日志内容,前面会自动加上日志头,支持std::format的格式化文本;" 注释 = "格式替换符为\"{}\",例如: \"你好，{}。\""
            注释 = "具体的格式要求请参考\"取标准格式文本\"的参数备注.">
    参数 替换数据 <注释 = "本参数可空可扩展;" 注释 = "如果\"日志内容\"为格式文本,本参数用于给格式文本中的格式替换符提供替换数据;"
            注释 = "支持类型: 通用数值型、文本型、标准文本类、文本视图类" @匹配类型 = 通用型 @可扩展 = "" @默认值 = 0>
    {
        @ FMTLOG_ONCE_LOC(__FMTLOG_SOURCE(@sn<current_source_file>, @sn<current_source_line>), fmtlog::DBG, @<日志内容>, @<替换数据>)
    }

    方法 加入信息日志 <公开 静态 注释 = "将信息级别的日志内容推送到日志队列中,可格式化日志内容." 折叠 @嵌入式方法 = "req_str_param_text_pointer = true">
    参数 日志内容 <类型 = 文本型 注释 = "提供日志内容,前面会自动加上日志头,支持std::format的格式化文本;" 注释 = "格式替换符为\"{}\",例如: \"你好，{}。\""
            注释 = "具体的格式要求请参考\"取标准格式文本\"的参数备注.">
    参数 替换数据 <注释 = "本参数可空可扩展;" 注释 = "如果\"日志内容\"为格式文本,本参数用于给格式文本中的格式替换符提供替换数据;"
            注释 = "支持类型: 通用数值型、文本型、标准文本类、文本视图类" @匹配类型 = 通用型 @可扩展 = "" @默认值 = 0>
    {
        @ FMTLOG_ONCE_LOC(__FMTLOG_SOURCE(@sn<current_source_file>, @sn<current_source_line>), fmtlog::INF, @<日志内容>, @<替换数据>)
    }

    方法 加入警告日志 <公开 静态 注释 = "将警告级别的日志内容推送到日志队列中,可格式化日志内容." 折叠 @嵌入式方法 = "req_str_param_text_pointer = true">
    参数 日志内容 <类型 = 文本型 注释 = "提供日志内容,前面会自动加上日志头,支持std::format的格式化文本;" 注释 = "格式替换符为\"{}\",例如: \"你好，{}。\""
            注释 = "具体的格式要求请参考\"取标准格式文本\"的参数备注.">
    参数 替换数据 <注释 = "本参数可空可扩展;" 注释 = "如果\"日志内容\"为格式文本,本参数用于给格式文本中的格式替换符提供替换数据;"
            注释 = "支持类型: 通用数值型、文本型、标准文本类、文本视图类" @匹配类型 = 通用型 @可扩展 = "" @默认值 = 0>
    {
        @ FMTLOG_ONCE_LOC(__FMTLOG_SOURCE(@sn<current_source_file>, @sn<current_source_line>), fmtlog::WRN, @<日志内容>, @<替换数据>)
    }

    方法 加入错误日志 <公开 静态 注释 = "将错误级别的日志内容推送到日志队列中,可格式化日志内容." 折叠 @嵌入式方法 = "req_str_param_text_pointer = true">
    参数 日志内容 <类型 = 文本型 注释 = "提供日志内容,前面会自动加上日志头,支持std::format的格式化文本;" 注释 = "格式替换符为\"{}\",例如: \"你好，{}。\""
            注释 = "具体的格式要求请参考\"取标准格式文本\"的参数备注.">
    参数 替换数据 <注释 = "本参数可空可扩展;" 注释 = "如果\"日志内容\"为格式文本,本参数用于给格式文本中的格式替换符提供替换数据;"
            注释 = "支持类型: 通用数值型、文本型、标准文本类、文本视图类" @匹配类型 = 通用型 @可扩展 = "" @默认值 = 0>
    {
        @ FMTLOG_ONCE_LOC(__FMTLOG_SOURCE(@sn<current_source_file>, @sn<current_source_line>), fmtlog::ERR, @<日志内容>, @<替换数据>)
    }

    方法 加入日志_间隔 <公开 静态 注释 = "将日志内容推送到日志队列中,可指定日志级别和格式化日志内容." 注释 = "本方法限制日志的记录频率,低于最小间隔的日志将被丢弃." 折叠
            @嵌入式方法 = "req_str_param_text_pointer = true">
    参数 日志级别 <类型 = 字节 注释 = "如果提供的日志级别低于当前日志级别,这条日志将被丢弃;"
            注释 = "0=DBG/调试; 1=INF/信息; 2=WRN/警告; 3=ERR/错误; 4=OFF/关闭">
    参数 最小间隔 <类型 = 长整数 注释 = "提供最小的日志记录间隔,如果上条日志的经过时间低于此间隔,这条日志将被丢弃;" 注释 = "单位为纳秒,1秒=1000*1000*1000纳秒.">
    参数 日志内容 <类型 = 文本型 注释 = "提供日志内容,前面会自动加上日志头,支持std::format的格式化文本;" 注释 = "格式替换符为\"{}\",例如: \"你好，{}。\""
            注释 = "具体的格式要求请参考\"取标准格式文本\"的参数备注.">
    参数 替换数据 <注释 = "本参数可空可扩展;" 注释 = "如果\"日志内容\"为格式文本,本参数用于给格式文本中的格式替换符提供替换数据;"
            注释 = "支持类型: 通用数值型、文本型、标准文本类、文本视图类" @匹配类型 = 通用型 @可扩展 = "" @默认值 = 0>
    {
        @ FMTLOG_LIMIT_LOC(__FMTLOG_SOURCE(@sn<current_source_file>, @sn<current_source_line>), @<最小间隔>, static_cast<fmtlog::LogLevel>(@<日志级别>), @<日志内容>, @<替换数据>)
    }

    方法 加入调试日志_间隔 <公开 静态 注释 = "将调试级别的日志内容推送到日志队列中,可格式化日志内容." 注释 = "本方法限制日志的记录频率,低于最小间隔的日志将被丢弃." 折叠
            @嵌入式方法 = "req_str_param_text_pointer = true">
    参数 最小间隔 <类型 = 长整数 注释 = "提供最小的日志记录间隔,如果上条日志的经过时间低于此间隔,这条日志将被丢弃." 注释 = "单位为纳秒,1秒=1000*1000*1000纳秒.">
    参数 日志内容 <类型 = 文本型 注释 = "提供日志内容,前面会自动加上日志头,支持std::format的格式化文本;" 注释 = "格式替换符为\"{}\",例如: \"你好，{}。\""
            注释 = "具体的格式要求请参考\"取标准格式文本\"的参数备注.">
    参数 替换数据 <注释 = "本参数可空可扩展;" 注释 = "如果\"日志内容\"为格式文本,本参数用于给格式文本中的格式替换符提供替换数据;"
            注释 = "支持类型: 通用数值型、文本型、标准文本类、文本视图类" @匹配类型 = 通用型 @可扩展 = "" @默认值 = 0>
    {
        @ FMTLOG_LIMIT_LOC(__FMTLOG_SOURCE(@sn<current_source_file>, @sn<current_source_line>), @<最小间隔>, fmtlog::DBG, @<日志内容>, @<替换数据>)
    }

    方法 加入信息日志_间隔 <公开 静态 注释 = "将信息级别的日志内容推送到日志队列中,可格式化日志内容." 注释 = "本方法限制日志的记录频率,低于最小间隔的日志将被丢弃." 折叠
            @嵌入式方法 = "req_str_param_text_pointer = true">
    参数 最小间隔 <类型 = 长整数 注释 = "提供最小的日志记录间隔,如果上条日志的经过时间低于此间隔,这条日志将被丢弃." 注释 = "单位为纳秒,1秒=1000*1000*1000纳秒.">
    参数 日志内容 <类型 = 文本型 注释 = "提供日志内容,前面会自动加上日志头,支持std::format的格式化文本;" 注释 = "格式替换符为\"{}\",例如: \"你好，{}。\""
            注释 = "具体的格式要求请参考\"取标准格式文本\"的参数备注.">
    参数 替换数据 <注释 = "本参数可空可扩展;" 注释 = "如果\"日志内容\"为格式文本,本参数用于给格式文本中的格式替换符提供替换数据;"
            注释 = "支持类型: 通用数值型、文本型、标准文本类、文本视图类" @匹配类型 = 通用型 @可扩展 = "" @默认值 = 0>
    {
        @ FMTLOG_LIMIT_LOC(__FMTLOG_SOURCE(@sn<current_source_file>, @sn<current_source_line>), @<最小间隔>, fmtlog::INF, @<日志内容>, @<替换数据>)
    }

    方法 加入警告日志_间隔 <公开 静态 注释 = "将警告级别的日志内容推送到日志队列中,可格式化日志内容." 注释 = "本方法限制日志的记录频率,低于最小间隔的日志将被丢弃." 折叠
            @嵌入式方法 = "req_str_param_text_pointer = true">
    参数 最小间隔 <类型 = 长整数 注释 = "提供最小的日志记录间隔,如果上条日志的经过时间低于此间隔,这条日志将被丢弃." 注释 = "单位为纳秒,1秒=1000*1000*1000纳秒.">
    参数 日志内容 <类型 = 文本型 注释 = "提供日志内容,前面会自动加上日志头,支持std::format的格式化文本;" 注释 = "格式替换符为\"{}\",例如: \"你好，{}。\""
            注释 = "具体的格式要求请参考\"取标准格式文本\"的参数备注.">
    参数 替换数据 <注释 = "本参数可空可扩展;" 注释 = "如果\"日志内容\"为格式文本,本参数用于给格式文本中的格式替换符提供替换数据;"
            注释 = "支持类型: 通用数值型、文本型、标准文本类、文本视图类" @匹配类型 = 通用型 @可扩展 = "" @默认值 = 0>
    {
        @ FMTLOG_LIMIT_LOC(__FMTLOG_SOURCE(@sn<current_source_file>, @sn<current_source_line>), @<最小间隔>, fmtlog::WRN, @<日志内容>, @<替换数据>)
    }

    方法 加入错误日志_间隔 <公开 静态 注释 = "将错误级别的日志内容推送到日志队列中,可格式化日志内容." 注释 = "本方法限制日志的记录频率,低于最小间隔的日志将被丢弃." 折叠
            @嵌入式方法 = "req_str_param_text_pointer = true">
    参数 最小间隔 <类型 = 长整数 注释 = "提供最小的日志记录间隔,如果上条日志的经过时间低于此间隔,这条日志将被丢弃." 注释 = "单位为纳秒,1秒=1000*1000*1000纳秒.">
    参数 日志内容 <类型 = 文本型 注释 = "提供日志内容,前面会自动加上日志头,支持std::format的格式化文本;" 注释 = "格式替换符为\"{}\",例如: \"你好，{}。\""
            注释 = "具体的格式要求请参考\"取标准格式文本\"的参数备注.">
    参数 替换数据 <注释 = "本参数可空可扩展;" 注释 = "如果\"日志内容\"为格式文本,本参数用于给格式文本中的格式替换符提供替换数据;"
            注释 = "支持类型: 通用数值型、文本型、标准文本类、文本视图类" @匹配类型 = 通用型 @可扩展 = "" @默认值 = 0>
    {
        @ FMTLOG_LIMIT_LOC(__FMTLOG_SOURCE(@sn<current_source_file>, @sn<current_source_line>), @<最小间隔>, fmtlog::ERR, @<日志内容>, @<替换数据>)
    }

    方法 加入文本日志 <公开 静态 注释 = "将纯文本的日志内容推送到日志队列中,可指定日志级别." 折叠 @嵌入式方法 = "req_str_param_text_pointer = true">
    参数 日志级别 <类型 = 字节 注释 = "如果提供的日志级别低于当前日志级别,这条日志将被丢弃;"
            注释 = "0=DBG/调试; 1=INF/信息; 2=WRN/警告; 3=ERR/错误; 4=OFF/关闭">
    参数 日志内容 <类型 = 文本型 注释 = "提供日志内容,前面会自动加上日志头.">
    {
        @ FMTLOG_ONCE_PLAIN(__FMTLOG_SOURCE(@sn<current_source_file>, @sn<current_source_line>), static_cast<fmtlog::LogLevel>(@<日志级别>), @<日志内容>)
    }

    方法 加入文本日志_间隔 <公开 静态 注释 = "将纯文本的日志内容推送到日志队列中,可指定日志级别." 注释 = "本方法限制日志的记录频率,低于最小间隔的日志将被丢弃." 折叠
            @嵌入式方法 = "req_str_param_text_pointer = true">
    参数 日志级别 <类型 = 字节 注释 = "如果提供的日志级别低于当前日志级别,这条日志将被丢弃;"
            注释 = "0=DBG/调试; 1=INF/信息; 2=WRN/警告; 3=ERR/错误; 4=OFF/关闭">
    参数 最小间隔 <类型 = 长整数 注释 = "提供最小的日志记录间隔,如果上条日志的经过时间低于此间隔,这条日志将被丢弃;" 注释 = "单位为纳秒,1秒=1000*1000*1000纳秒.">
    参数 日志内容 <类型 = 文本型 注释 = "提供日志内容,前面会自动加上日志头.">
    {
        @ FMTLOG_LIMIT_PLAIN(__FMTLOG_SOURCE(@sn<current_source_file>, @sn<current_source_line>), @<最小间隔>, static_cast<fmtlog::LogLevel>(@<日志级别>), @<日志内容>)
    }

    方法 加入来源日志 <公开 静态 注释 = "将日志内容推送到日志队列中,可指定产生日志的来源、日志级别和格式化日志内容." 折叠
            @嵌入式方法 = "req_str_param_text_pointer = true">
    参数 日志来源 <类型 = 文本型 注释 = "产生日志的来源,比如\"file.cpp:89, function\".">
    参数 日志级别 <类型 = 字节 注释 = "如果提供的日志级别低于当前日志级别,这条日志将被丢弃;"
            注释 = "0=DBG/调试; 1=INF/信息; 2=WRN/警告; 3=ERR/错误; 4=OFF/关闭">
    参数 日志内容 <类型 = 文本型 注释 = "提供日志内容,前面会自动加上日志头,支持std::format的格式化文本;" 注释 = "格式替换符为\"{}\",例如: \"你好，{}。\""
            注释 = "具体的格式要求请参考\"取标准格式文本\"的参数备注.">
    参数 替换数据 <注释 = "本参数可空可扩展;" 注释 = "如果\"日志内容\"为格式文本,本参数用于给格式文本中的格式替换符提供替换数据;"
            注释 = "支持类型: 通用数值型、文本型、标准文本类、文本视图类" @匹配类型 = 通用型 @可扩展 = "" @默认值 = 0>
    {
        @ FMTLOG_ONCE_LOC(@<日志来源>, static_cast<fmtlog::LogLevel>(@<日志级别>), @<日志内容>, @<替换数据>)
    }

    # 设置相关

    方法 置日志头格式 <公开 静态 注释 = "设置自定义的日志头格式" 返回值注释 = "设置了错误的格式会抛出异常错误,如果不想崩溃,请确保格式正确或俘获异常." 折叠 @嵌入式方法 = "">
    参数 格式文本 <类型 = 文本型 注释 = "默认格式为: \"08:42:00.173887 main.v:32 信息[19484] \""
            注释 = "下列为日志头专用的格式替换符,格式替换符需要用\"{}\"包围,若要输入符号" 注释 = "\"{\"和\"}\",需要用\"{{\"和\"}}\"转义."
            注释 = "  l:       日志级别                例: INF" 注释 = "  L:       日志级别(中文)          例: 信息"
            注释 = "  s:       源码文件名和行号        例: main.v:32"
            注释 = "  g:       文件路径和行号          例: D:\\日志测试\\src\\main.v:32"
            注释 = "  t:       线程名称(默认为线程ID)  例: main" 注释 = "  a:       星期几                  例: Fri"
            注释 = "  b:       月份名称                例: Apr" 注释 = "  Y:       年份                    例: 2022"
            注释 = "  C:       年份后两位              例: 22" 注释 = "  m:       月份                    例: 04"
            注释 = "  d:       日                      例: 22" 注释 = "  H:       小时                    例: 16"
            注释 = "  M:       分钟                    例: 08" 注释 = "  S:       秒                      例: 09"
            注释 = "  e:       毫秒                    例: 796" 注释 = "  f:       微秒                    例: 796341"
            注释 = "  F:       纳秒                    例: 796341126"
            注释 = "  Ymd:     年-月-日                例: 2022-04-22"
            注释 = "  HMS:     时:分:秒                例: 16:08:09"
            注释 = "  HMSe:    时:分:毫秒              例: 16:08:09.796"
            注释 = "  HMSf:    时:分:微秒              例: 16:08:09.796341"
            注释 = "  HMSF:    时:分:纳秒              例: 16:08:09.796341126"
            注释 = "  YmdHMS:  年-月-日 时:分:秒       例: 2022-04-22 16:08:09"
            注释 = "  YmdHMSe: 年-月-日 时:分:秒.毫秒  例: 2022-04-22 16:08:09.796"
            注释 = "  YmdHMSf: 年-月-日 时:分:秒.微秒  例: 2022-04-22 16:08:09.796341"
            注释 = "  YmdHMSF: 年-月-日 时:分:秒.纳秒  例: 2022-04-22 16:08:09.796341126"
            @默认值 = "{HMSf} {s:<10} {L}[{t:<5}] ">
    {
        @ fmtlog::setHeaderPattern(@<格式文本>.GetText())
    }

    方法 预先分配 <公开 静态 注释 = "为当前线程预先分配线程队列" 折叠 @嵌入式方法 = "">
    {
        @ fmtlog::preallocate()
    }

    方法 置刷新延迟 <公开 静态 注释 = "设置触发刷新缓冲区的延迟时间(单位为纳秒)." 注释 = "默认值为3秒,如果最早的日志经过了指定的延迟时间,将立即刷新缓冲区." 折叠 @嵌入式方法 = "">
    参数 延迟 <类型 = 长整数 注释 = "延迟时间,单位为纳秒;" 注释 = "默认值为3秒=3*1000*1000*1000">
    {
        @ fmtlog::setFlushDelay(@<延迟>)
    }

    方法 置刷新级别 <公开 静态 注释 = "设置触发刷新缓冲区的日志级别." 注释 = "默认级别为\"OFF/关闭\",如果遇到级别大于指定刷新级别的日志,将立即刷新缓冲区."
            注释 = "例如遇到错误信息时,立即将日志写入到文件中,以免因为程序崩溃或异常退出而丢失日志." 折叠 @嵌入式方法 = "">
    参数 日志级别 <类型 = 字节 注释 = "0=DBG/调试; 1=INF/信息; 2=WRN/警告; 3=ERR/错误; 4=OFF/关闭">
    {
        @ fmtlog::flushOn(static_cast<fmtlog::LogLevel>(@<日志级别>))
    }

    方法 置缓冲区尺寸 <公开 静态 注释 = "设置触发刷新缓冲区的缓冲区尺寸." 注释 = "默认值为大于8KB,如果缓冲区的空间大于指定的字节数,将立即刷新缓冲区." 折叠 @嵌入式方法 = "">
    参数 字节数 <类型 = 整数 注释 = "单位为字节,默认值为大于8KB.">
    {
        @ fmtlog::setFlushBufSize(static_cast<uint32_t>(@<字节数>))
    }

    方法 置线程名称 <公开 静态 注释 = "设置当前线程的名称,该名称会显示在日志中,默认为当前的线程ID." 注释 = "设置的名称只对当前线程有效,可以为不同的线程设置不同的名称." 折叠
            @嵌入式方法 = "">
    参数 线程名称 <类型 = 文本型>
    {
        @ fmtlog::setThreadName(@<线程名称>.GetText())
    }

    方法 置日志级别 <公开 静态 注释 = "设置当前的日志级别,低于此级别的日志将被丢弃." 注释 = "默认值为1,不输出调试日志." 折叠 @嵌入式方法 = "">
    参数 日志级别 <类型 = 字节 注释 = "0=DBG/调试; 1=INF/信息; 2=WRN/警告; 3=ERR/错误; 4=OFF/关闭" @默认值 = 0>
    {
        @ fmtlog::setLogLevel(static_cast<fmtlog::LogLevel>(@<日志级别>))
    }

    方法 取日志级别 <公开 静态 类型 = 字节 注释 = "获取当前的日志级别,低于此级别的日志将被丢弃."
            返回值注释 = "0=DBG/调试; 1=INF/信息; 2=WRN/警告; 3=ERR/错误; 4=OFF/关闭" 折叠 @嵌入式方法 = "">
    {
        @ static_cast<S_BYTE>(fmtlog::getLogLevel())
    }

    方法 检查日志级别 <公开 静态 类型 = 逻辑型 注释 = "检查指定的日志级别是否大于等于当前日志级别." 返回值注释 = "返回真表示测试的级别大于等于当前日志级别,否则返回假." 折叠
            @嵌入式方法 = "">
    参数 日志级别 <类型 = 字节 注释 = "0=DBG/调试; 1=INF/信息; 2=WRN/警告; 3=ERR/错误; 4=OFF/关闭" @默认值 = 0>
    {
        @ fmtlog::checkLogLevel(static_cast<fmtlog::LogLevel>(@<日志级别>))
    }

    方法 取级别颜色 <公开 静态 类型 = 整数 注释 = "获取指定日志级别的颜色" 返回值注释 = "返回颜色值" 折叠>
    参数 日志级别 <类型 = 字节 注释 = "0=DBG/调试; 1=INF/信息; 2=WRN/警告; 3=ERR/错误; 4=OFF/关闭">
    参数 深色背景 <类型 = 逻辑型 注释 = "默认为浅色背景" @默认值 = 假>
    {
        分支判断 ((整数)日志级别)
        {
            分支 (0)
            {
                返回 (选择 (深色背景, 颜色类.蓝灰色, 颜色类.深灰色))
            }
            分支 (1)
            {
                返回 (选择 (深色背景, 颜色类.青绿色, 颜色类.蓝色))
            }
            分支 (2)
            {
                返回 (选择 (深色背景, 颜色类.黄色, 颜色类.黄褐色))
            }
            分支 (3)
            {
                返回 (选择 (深色背景, 颜色类.红色, 颜色类.红色))
            }

        }
        返回 (选择 (深色背景, 颜色类.白色, 颜色类.黑色))
    }

    方法 禁用级别检查 <静态 注释 = "调用本方法以禁用日志级别检查,让低于当前日志级别的日志都能输出." 注释 = "禁用后,\"检查日志级别\"方法将始终返回真."
            @视窗.预定义宏 = "FMTLOG_NO_CHECK_LEVEL">
}

类 格式日志事件类 <公开 注释 = "全局只能有一个实例能生效,以最后定义的为准." 折叠 @文档 = "category = \"日志记录\"">
{
    方法 类_初始化 <折叠>
    {
        @ fmtlog::setLogQFullCB(reinterpret_cast<fmtlog::LogQFullCBFn>(&@sn<current_class>::FnLogQFullCb), reinterpret_cast<void*>(this));
        本对象.置最小日志级别 (0)
    }

    方法 置最小日志级别 <公开 注释 = "设置最小日志级别,低于最小日志级别的日志将不出现在事件中." 折叠>
    参数 最小日志级别 <类型 = 字节 注释 = "0=DBG/调试; 1=INF/信息; 2=WRN/警告; 3=ERR/错误; 4=OFF/关闭">
    {
        @ fmtlog::setLogCB(reinterpret_cast<fmtlog::LogCBFn>(&@sn<current_class>::FnLogCb), static_cast<fmtlog::LogLevel>(@<最小日志级别>));
    }

    方法 取级别颜色 <公开 类型 = 整数 注释 = "获取指定日志级别的颜色" 返回值注释 = "返回颜色值" 折叠>
    参数 日志级别 <类型 = 字节 注释 = "0=DBG/调试; 1=INF/信息; 2=WRN/警告; 3=ERR/错误; 4=OFF/关闭">
    参数 深色背景 <类型 = 逻辑型 注释 = "默认为浅色背景" @默认值 = 假>
    {
        分支判断 ((整数)日志级别)
        {
            分支 (0)
            {
                返回 (选择 (深色背景, 颜色类.蓝灰色, 颜色类.深灰色))
            }
            分支 (1)
            {
                返回 (选择 (深色背景, 颜色类.青绿色, 颜色类.蓝色))
            }
            分支 (2)
            {
                返回 (选择 (深色背景, 颜色类.黄色, 颜色类.黄褐色))
            }
            分支 (3)
            {
                返回 (选择 (深色背景, 颜色类.红色, 颜色类.红色))
            }

        }
        返回 (选择 (深色背景, 颜色类.白色, 颜色类.黑色))
    }

    方法 日志队列已满 <公开 定义事件 类型 = 整数 注释 = "当日志队列已满时会响应本事件." 注释 = "这表示轮询线程没有跟上,可能会丢失日志." 返回值注释 = "此返回值无意义">

    方法 日志内容 <公开 定义事件 类型 = 整数 注释 = "每次轮询后,所有线程产生的日志信息都会逐条在这里展示." 注释 = "即使日志文件未打开或已关闭,仍会响应本事件."
            注释 = "警告: 请勿在本事件中执行耗时操作,以免造成阻塞." 返回值注释 = "此返回值无意义" 折叠>
    参数 时间戳 <类型 = 长整数 注释 = "纳秒级精度的19位时间戳">
    参数 日志级别 <类型 = 字节 注释 = "0=DBG/调试; 1=INF/信息; 2=WRN/警告; 3=ERR/错误; 4=OFF/关闭">
    参数 语句位置 <类型 = 文本型 注释 = "日志产生语句所在的源码文件名和行号">
    参数 线程名称 <类型 = 文本型 注释 = "当前的线程ID,或用户通过\"置线程名称\"设置的名称.">
    参数 日志内容 <类型 = 文本型 注释 = "包括日志头和正文的完整日志内容,日志头可以用\"格式日志类.置日志头格式\"自定义.">
    参数 正文内容 <类型 = 文本型 注释 = "当前日志的正文(除去日志头的内容)">
    参数 文件位置 <类型 = 变整数 注释 = "当前日志内容在日志文件中的首位置(字节单位)">

    # @begin
    # <> <include>
    # static void FnLogCb (int64_t ns, fmtlog::LogLevel level, fmt::basic_string_view<FMTLOG_CHAR> location, size_t basePos,
    #                      fmt::basic_string_view<FMTLOG_CHAR> threadName, fmt::basic_string_view<FMTLOG_CHAR> msg, size_t bodyPos, size_t logFilePos, void* userData)
    # {
    #     ((@sn<current_class>*)userData)->@<日志内容>(ns, static_cast<S_BYTE>(level),
    #         @an<CVolString>(location.data(), location.size()), @an<CVolString>(threadName.data(), threadName.size()),
    #         @an<CVolString>(msg.data(), msg.size()), @an<CVolString>(msg.data() + bodyPos), static_cast<INT_P>(logFilePos));
    # }
    # static void FnLogQFullCb (void* userData)
    # {
    #     ((@sn<current_class>*)userData)->@<日志队列已满>();
    # }
    # <> </include>
    # @end
}

#
