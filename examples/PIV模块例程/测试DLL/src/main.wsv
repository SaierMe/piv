<火山程序 类型 = "通常" 版本 = 1 />

包 火山.程序

类 启动类 <公开 基础类 = 动态库程序类>
{
    方法 启动方法 <公开 类型 = 整数>
    {
        // DLL 被加载时弹窗
        变量 进程ID <类型 = 整数>
        @ @<进程ID> = GetCurrentProcessId ();
        全局信息框 ("DLL被成功加载！\r\n当前进程ID: " + 到文本 (进程ID))

        返回 (1)
    }

    方法 函数1 <公开 静态 @输出名 = "method1" @视窗.输出 = 真>
    {
        全局信息框 ("执行函数1成功")
    }

    方法 函数2 <公开 静态 @输出名 = "method2" @视窗.输出 = 真>
    参数 参数1 <类型 = 整数>
    {
        全局信息框 ("执行函数2成功,传入的参数为:" + 到文本 (参数1))
    }

    方法 函数3 <公开 静态 类型 = 整数 @输出名 = "method3" @视窗.输出 = 真>
    参数 参数1 <类型 = 整数>
    参数 参数2 <类型 = 整数>
    {
        全局信息框 ("执行函数3成功,返回参数1+参数2的结果:" + 到文本 (参数1 + 参数2))
        返回 (参数1 + 参数2)
    }

    方法 函数4 <公开 静态 类型 = 整数 注释 = "本方法模拟返回参数" 返回值注释 = "返回文本长度" @输出名 = "method4" @视窗.输出 = 真>
    参数 文本指针 <类型 = 变整数 注释 = "NULL时只返回文本长度" @默认值 = 0>
    {
        变量 要返回的文本 <类型 = 文本型>
        要返回的文本 = "我是DLL返回的文本，表示函数4执行成功。"
        如果 (文本指针 != 0)
        {
            内存复制 (文本指针, 取文本指针 (要返回的文本), 取文本长度 (要返回的文本) * 2)

        }
        返回 (取文本长度 (要返回的文本))
    }

    方法 将被卸载 <公开 注释 = "用户的启动类可以覆盖此方法以在动态链接库被卸载前做一些清理工作" @虚拟方法 = 可覆盖>
    {
        // DLL 被卸载时弹窗
        全局信息框 ("DLL即将被卸载！")
        父对象.将被卸载 ()  // 调用基础类中的被覆盖虚拟方法
    }
}
