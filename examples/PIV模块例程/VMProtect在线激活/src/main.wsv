<火山程序 类型 = "通常" 版本 = 1 />

包 火山.程序

类 启动类 <公开 基础类 = 窗口程序类 折叠>
{
    变量 主窗口对象 <类型 = 我的主窗口>

    方法 启动方法 <公开 类型 = 整数 折叠>
    {
        主窗口对象.创建主窗口 ()
        返回 (1)
    }
}

# ===

类 我的主窗口 <基础类 = 窗口 注释 = "样例主窗口" @视窗.布局 = "client_size = \"600, 548\"" 标题 = "VMProtect加密测试">
{
    变量 标签_序列号 <类型 = 标签 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 101\r\npos = \"30, 274, 80, 24\"" 标题 = "序列号:">
    变量 编辑框_序列号 <类型 = 编辑框 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 102\r\npos = \"30, 306, 540, 120\"" 是否允许多行 = 真
            滚动条 = 纵向滚动条>
    变量 按钮_激活 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 103\r\npos = \"450, 440, 120, 32\"" 标题 = "激活序列号">
    变量 标签_机器码 <类型 = 标签 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 104\r\npos = \"30, 25, 140, 24\"" 标题 = "机器码(HWID):">
    变量 编辑框_机器码 <类型 = 编辑框 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 105\r\npos = \"30, 55, 540, 60\"" 是否允许多行 = 真
            输入方式 = 只读方式>
    变量 按钮_测试1 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 106\r\npos = \"29, 489, 200, 32\"" 标题 = "测试功能(需序列号)">
    变量 按钮_解析 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 107\r\npos = \"180, 440, 120, 32\"" 标题 = "解析机器码">
    变量 按钮_测试2 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 108\r\npos = \"249, 489, 200, 32\"" 标题 = "解密字符串">
    变量 按钮_序列号信息 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 109\r\npos = \"313, 440, 120, 32\"" 标题 = "取序列号信息">
    变量 按钮_离线激活 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 110\r\npos = \"233, 235, 100, 32\"" 标题 = "离线激活">
    变量 按钮_在线激活 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 111\r\npos = \"470, 235, 100, 32\"" 标题 = "在线激活">
    变量 标签_激活码 <类型 = 标签 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 112\r\npos = \"30, 132, 500, 24\""
            标题 = "激活码(联网激活需配合Web License Manager使用):">
    变量 编辑框_激活码 <类型 = 编辑框 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 113\r\npos = \"30, 163, 540, 60\"" 是否允许多行 = 真
            滚动条 = 纵向滚动条>
    变量 按钮_离线解绑 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 114\r\npos = \"115, 235, 100, 32\"" 标题 = "离线解绑">
    变量 按钮_在线解绑 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 115\r\npos = \"351, 235, 100, 32\"" 标题 = "在线解绑">

    方法 我的主窗口_创建完毕 <接收事件 类型 = 整数 注释 = "当本组件及其中所有子组件均被创建完毕后发送此事件.">
    参数 来源对象 <类型 = 我的主窗口 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    {
        如果 (VMProtect.是否被保护 () == 假)
        {
            信息框 ("此文件未使用 VMProtect 加壳，与 VMProtect 有关的功能将无法正常使用。", 信息框按钮.警告图标, "警告")

        }
        如果 (VMProtect.检测校验码 () == 假)
        {
            信息框 ("此文件已经被非法修改，即将退出。", 信息框按钮.警告图标, "警告")
            结束 ()
        }
        如果 (VMProtect.检测调试器 () == 真)
        {
            信息框 ("此文件不允许被调试。", 信息框按钮.警告图标, "警告")
            // 使用火山调试运行也会被检测出来,所以把结束注释掉了
            // 结束 ()

        }
        如果 (VMProtect.检测虚拟机 () == 真)
        {
            信息框 ("此文件不允许在虚拟机中运行，即将退出。", 信息框按钮.警告图标, "警告")
            结束 ()

        }

        // 如果未经过VMProtect,很多功能是无效的
        编辑框_机器码.内容 = VMProtect.取当前机器码 ()


        // 下面示例如何保护代码块,总共有三个方法:
        变量 启动时间 <类型 = 长整数>

        // 方法一
        VMProtect.开始保护 ()  // 保护代码的前面必须使用 开始保护/开始虚拟化保护/开始变异保护/开始超级保护
        启动时间 = 取启动时间 ()  // 中间是需要保护的代码
        VMProtect.结束保护 ()  // 必须结束保护

        // 方法二 (推荐)
        VMP保护 ()
        {
            取启动时间 ()  // 流程线内部就是被保护的代码,无需使用"结束保护"

        }

        // 方法三 (直接使用嵌入式语句,可以自定义标记文本)
        @ VMProtectBegin ("我是保护标记");
        启动时间 = 取启动时间 ()
        @ VMProtectEnd ();

        返回 (0)
    }

    方法 按钮_被单击 <接收事件 类型 = 整数 注释 = "当按钮被单击后发送此事件">
    参数 来源对象 <类型 = 按钮 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    {
        如果 (来源对象 == 按钮_激活)
        {
            变量 错误码 <类型 = 整数>
            错误码 = VMProtect.设置序列号 (编辑框_序列号.内容)
            如果 (错误码 == 0)
            {
                信息框 ("序列号激活成功！", 信息框按钮.信息图标)
            }
            否则
            {
                信息框 ("序列号激活失败！\r\n错误代码:" + 到文本 (错误码), 信息框按钮.信息图标)

            }

        }
        否则 (来源对象 == 按钮_解析)
        {
            变量 HWID信息 <类型 = HWID信息类>
            如果 (VMP取机器码信息 (编辑框_机器码.内容, HWID信息) == 真)
            {
                变量 信息内容 <类型 = 文本型>
                加入文本 (信息内容, "HOST: " + HWID信息.HOST + "\r\n")
                加入文本 (信息内容, "CPU: " + HWID信息.CPU + "\r\n")
                加入文本 (信息内容, "HDD: " + HWID信息.HDD + "\r\n")
                加入文本 (信息内容, "ETHERNET: ")
                HWID信息.ETHERNET.枚举循环 ()
                {
                    加入文本 (信息内容, HWID信息.ETHERNET.取枚举值 () + " | ")
                }
                如果 (是否以文本结束 (信息内容, " | "))
                {
                    信息内容 = 取文本左边 (信息内容, 取文本长度 (信息内容) - 3)
                }
                信息框 (信息内容, 信息框按钮.信息图标)
            }
            否则
            {
                信息框 ("解析机器码失败！\r\n可能是你还还没对文件进行VMP加壳。", 信息框按钮.警告图标)

            }

        }
        否则 (来源对象 == 按钮_序列号信息)
        {
            变量 序列号数据 <类型 = VMProtect序列号数据类>
            如果 (VMProtect.取序列号数据2 (序列号数据) == 真)
            {
                变量 信息内容 <类型 = 文本型>
                加入文本 (信息内容, "状态:" + 到文本 (序列号数据.状态) + "(非0值表示序列号异常)\r\n")
                加入文本 (信息内容, "用户名:" + 序列号数据.用户名 + "\r\n")
                加入文本 (信息内容, "邮箱:" + 序列号数据.邮箱 + "\r\n")
                加入文本 (信息内容, "到期日期:" + 序列号数据.到期日期.到日期文本 () + "\r\n")
                加入文本 (信息内容, "更新期限:" + 序列号数据.更新期限.到日期文本 () + "\r\n")
                加入文本 (信息内容, "运行时限:" + 到文本 (序列号数据.运行时限) + "\r\n")
                加入文本 (信息内容, "用户数据:" + 序列号数据.用户数据.字节集到十六进制文本 ())
                信息框 (信息内容, 信息框按钮.信息图标)
            }
            否则
            {
                信息框 ("获取序列号信息失败,未知错误。", 信息框按钮.警告图标)

            }

        }
        否则 (来源对象 == 按钮_测试1)
        {
            VMP超级保护 (真)
            {
                // 锁定到序列号为真时,未激活序列号的情况下运行此代码,会弹框警告并直接结束程序
                信息框 ("执行成功！", 信息框按钮.信息图标)

            }
        }
        否则 (来源对象 == 按钮_测试2)
        {
            信息框 (VMProtect.解密文本W ("我是被加密的文本！\r\n加密的文本不会被反编译出来，在运行时还是能内存搜索到明文。").取文本(), 信息框按钮.信息图标)

        }
        否则 (来源对象 == 按钮_在线激活)
        {
            如果 (文本是否为空 (编辑框_激活码.内容))
            {
                信息框 ("请先填入激活码！", 信息框按钮.警告图标)
                返回 (0)
            }
            变量 错误码 <类型 = 整数>
            变量 序列号 <类型 = 文本型>
            错误码 = VMProtect.在线激活许可证 (编辑框_激活码.内容, 序列号)
            如果 (错误码 == 0)
            {
                编辑框_序列号.内容 = 序列号
                信息框 ("获取序列号成功，序列号已经填写在编辑框中，请继续单击“激活序列号”完成激活。", 信息框按钮.信息图标)
            }
            否则
            {
                信息框 ("在线激活失败！\r\n错误代码:" + 到文本 (错误码) + "\r\n", 信息框按钮.信息图标)

            }

        }
        否则 (来源对象 == 按钮_在线解绑)
        {
            如果 (文本是否为空 (编辑框_序列号.内容))
            {
                信息框 ("请先填入在线激活返回的序列号！", 信息框按钮.警告图标)
                返回 (0)
            }
            变量 错误码 <类型 = 整数>
            错误码 = VMProtect.在线解绑许可证 (编辑框_序列号.内容)
            如果 (错误码 == 0)
            {
                VMProtect.设置序列号 ("")  // 设置一个空白序列号来使当前的激活失效
                信息框 ("解绑成功，服务器端已经释放了激活次数！", 信息框按钮.信息图标)
            }
            否则
            {
                信息框 ("解绑失败！\r\n错误代码:" + 到文本 (错误码) + "\r\n", 信息框按钮.信息图标)

            }

        }
        否则 (来源对象 == 按钮_离线激活)
        {
            如果 (文本是否为空 (编辑框_激活码.内容))
            {
                信息框 ("请先填入激活码！", 信息框按钮.警告图标)
                返回 (0)
            }
            变量 错误码 <类型 = 整数>
            变量 激活代码 <类型 = 文本型>
            错误码 = VMProtect.取离线激活代码 (编辑框_激活码.内容, 激活代码)
            如果 (错误码 == 0)
            {
                编辑框_序列号.内容 = 激活代码
                信息框 ("获取离线激活码成功，请将序列号编辑框的文本复制到网页上。", 信息框按钮.信息图标)
            }
            否则
            {
                信息框 ("获取离线激活码失败！\r\n错误代码:" + 到文本 (错误码) + "\r\n", 信息框按钮.信息图标)

            }

        }
        否则 (来源对象 == 按钮_离线解绑)
        {
            如果 (文本是否为空 (编辑框_激活码.内容))
            {
                信息框 ("请先填入在线激活返回的序列号！", 信息框按钮.警告图标)
                返回 (0)
            }
            变量 错误码 <类型 = 整数>
            变量 代码 <类型 = 文本型>
            错误码 = VMProtect.取离线解绑代码 (编辑框_序列号.内容, 代码)
            如果 (错误码 == 0)
            {
                VMProtect.设置序列号 ("")  // 设置一个空白序列号来使当前的激活失效
                编辑框_激活码.内容 = 代码
                信息框 ("获取离线解绑代码成功，请将激活码编辑框的文本复制到网页上。", 信息框按钮.信息图标)
            }
            否则
            {
                信息框 ("获取离线激活码失败！\r\n错误代码:" + 到文本 (错误码) + "\r\n", 信息框按钮.信息图标)

            }

        }

        返回 (0)
    }
}
