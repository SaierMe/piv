<火山程序 类型 = "通常" 版本 = 1 />

包 火山.程序 <注释 = "Curl 异步并发访问和下载的例子." 注释 = "由于TaleBook网站程序不给力,无法测试Curl并发下载的性能">

类 启动类 <公开 基础类 = 窗口程序类 折叠>
{
    变量 主窗口对象 <公开 类型 = 我的主窗口>

    方法 启动方法 <公开 类型 = 整数 折叠>
    {
        主窗口对象.创建主窗口 ()
        返回 (1)
    }
}

# ===

类 我的主窗口 <基础类 = 窗口 @视窗.布局 = "client_size = \"800, 600\"" 标题 = "talebook下载器">
{
    变量 标签_网站地址 <类型 = 标签 隐藏值属性 = "0" @视窗.布局 = "id = 101\r\npos = \"20, 20, 80, 24\"" 标题 = "网站地址:">
    变量 编辑框_网站地址 <类型 = 编辑框 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 102\r\npos = \"117, 20, 380, 32\"" 左边空 = 5>
    变量 编辑框_保存位置 <类型 = 编辑框 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 103\r\npos = \"117, 70, 380, 32\"" 左边空 = 5>
    变量 标签_保存位置 <类型 = 标签 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 104\r\npos = \"20, 70, 80, 24\"" 标题 = "保存位置:">
    变量 按钮_浏览 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 105\r\npos = \"511, 69, 120, 32\"" 标题 = "浏览">
    变量 按钮_登录 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 106\r\npos = \"511, 20, 120, 32\"" 标题 = "注册/登录">
    变量 分组框_格式 <类型 = 分组框 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 107\r\npos = \"20, 116, 370, 190\"" 标题 = "格式选项">
    变量 选择框_AZW3 <类型 = 选择框 折叠2 隐藏值属性 = "0"
            @视窗.布局 = "id = 108\r\nparent_id = 107\r\npos = \"15, 66, 100, 24\"" 标题 = "AZW3">
    变量 选择框_EPUB <类型 = 选择框 折叠2 隐藏值属性 = "0"
            @视窗.布局 = "id = 109\r\nparent_id = 107\r\npos = \"15, 30, 100, 24\"" 标题 = "EPUB">
    变量 选择框_AZW <类型 = 选择框 折叠2 隐藏值属性 = "0"
            @视窗.布局 = "id = 110\r\nparent_id = 107\r\npos = \"251, 30, 100, 24\"" 标题 = "AZW">
    变量 选择框_MOBI <类型 = 选择框 折叠2 隐藏值属性 = "0"
            @视窗.布局 = "id = 111\r\nparent_id = 107\r\npos = \"132, 30, 100, 24\"" 标题 = "MOBI">
    变量 选择框_PDF <类型 = 选择框 折叠2 隐藏值属性 = "0"
            @视窗.布局 = "id = 112\r\nparent_id = 107\r\npos = \"251, 66, 100, 24\"" 标题 = "PDF">
    变量 选择框_TXT <类型 = 选择框 折叠2 隐藏值属性 = "0"
            @视窗.布局 = "id = 113\r\nparent_id = 107\r\npos = \"132, 66, 100, 24\"" 标题 = "TXT">
    变量 单选框_全部格式 <类型 = 单选框 折叠2 隐藏值属性 = "0"
            @视窗.布局 = "id = 114\r\nparent_id = 107\r\npos = \"15, 104, 340, 24\"" 标题 = "下载所有被选中的格式">
    变量 单选框_优先格式 <类型 = 单选框 折叠2 隐藏值属性 = "0"
            @视窗.布局 = "id = 115\r\nparent_id = 107\r\npos = \"15, 140, 340, 40\"" 标题 = "只下载一种格式" 纵向对齐方式 = 顶边>
    变量 分组框_下载选项 <类型 = 分组框 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 116\r\npos = \"411, 116, 370, 192\"" 标题 = "下载选项">
    变量 标签_下载线程 <类型 = 标签 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 117\r\nparent_id = 116\r\npos = \"15, 30, 130, 24\""
            标题 = "下载线程(1-5):">
    变量 编辑框_下载线程 <类型 = 编辑框 折叠2 隐藏值属性 = "0"
            @视窗.布局 = "id = 118\r\nparent_id = 116\r\npos = \"152, 30, 80, 32\"" 输入方式 = 输入整数 内容 = "1">
    变量 标签_下载范围 <类型 = 标签 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 119\r\nparent_id = 116\r\npos = \"15, 73, 130, 24\""
            标题 = "下载范围(ID):">
    变量 编辑框_下载范围首 <类型 = 编辑框 折叠2 隐藏值属性 = "0"
            @视窗.布局 = "id = 120\r\nparent_id = 116\r\npos = \"152, 73, 80, 32\"" 输入方式 = 输入整数 内容 = "1">
    变量 编辑框_下载范围尾 <类型 = 编辑框 折叠2 隐藏值属性 = "0"
            @视窗.布局 = "id = 121\r\nparent_id = 116\r\npos = \"265, 73, 80, 32\"" 输入方式 = 输入整数>
    变量 标签_到 <类型 = 标签 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 122\r\nparent_id = 116\r\npos = \"238, 73, 20, 24\""
            标题 = "-" 横向对齐方式 = 居中>
    变量 标签_ID说明 <类型 = 标签 隐藏值属性 = "0" @视窗.布局 = "id = 123\r\nparent_id = 116\r\npos = \"15, 113, 339, 24\"">
    变量 选择框_日志 <类型 = 选择框 折叠2 隐藏值属性 = "0"
            @视窗.布局 = "id = 124\r\nparent_id = 116\r\npos = \"15, 151, 300, 24\"" 标题 = "输出日志" 选中 = 真 禁止 = 真>
    变量 按钮_下载 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 125\r\npos = \"659, 19, 120, 32\"" 标题 = "下载" 禁止 = 真>
    变量 图片框1 <类型 = 图片框>
    变量 超级列表框_下载 <类型 = 超级列表框 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 127\r\npos = \"20, 324, 760, 256\"" "类型" = 报表列表框
            报表列 = "0\n-1\n0\n230\nURL\n0\n-1\n0\n140\n标题\n0\n-1\n0\n120\n作者\n0\n-1\n0\n80\n格式\n0\n-1\n0\n80\n大小\n0\n-1\n0\n80\n进度">
    变量 按钮_停止 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 128\r\npos = \"659, 69, 120, 32\"" 标题 = "停止" 禁止 = 真>
    变量 ""
    变量 ""
    变量 登录窗口 <类型 = 登录窗口类>
    变量 选中格式 <类型 = 文本数组类>
    变量 网络下载 <类型 = 高并发网络访问类>
    变量 网站配置 <公开 类型 = PivJSON>
    变量 起始ID <类型 = 整数>
    变量 最大ID <类型 = 整数>
    变量 线程 <类型 = 线程类>
    变量 网站地址 <类型 = 文本型>
    变量 cookies <类型 = 文本型>
    变量 保存位置 <类型 = 文本型>

    方法 我的主窗口_创建完毕 <接收事件 类型 = 整数 注释 = "当本组件及其中所有子组件均被创建完毕后发送此事件." 折叠>
    参数 来源对象 <类型 = 我的主窗口 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    {
        如果 (格式日志类.初始化 (取运行目录 () + "log.txt", 真) == 假)
        {
            信息框 ("打开日志文本失败。", 信息框按钮.错误图标)
        }
        否则
        {
            格式日志类.置日志头格式 ("{HMSf}[{L}] ")

        }
        载入窗口配置 ()
        如果 (检测账户 () == 真)
        {
            按钮_登录.标题 = "登出"
            编辑框_网站地址.禁止 = 真
            变量 错误内容 <类型 = 文本型>
            最大ID = 取下载范围 (错误内容)
            如果 (最大ID > 0)
            {
                编辑框_下载范围尾.内容 = 到文本 (最大ID)
                标签_ID说明.标题 = "* 最大 ID 不能超过 " + 到文本 (最大ID)
                按钮_下载.禁止 = 假
            }
            否则
            {
                信息框 (错误内容, 信息框按钮.警告图标)
            }

        }
        返回 (0)
    }

    方法 我的主窗口_将被销毁 <接收事件 类型 = 整数 注释 = "当本组件被销毁前发送此事件" 折叠>
    参数 来源对象 <类型 = 我的主窗口 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    {
        保存窗口配置 ()
        格式日志类.销毁 ()
        返回 (0)
    }

    方法 按钮_被单击 <接收事件 类型 = 整数 注释 = "当按钮被单击后发送此事件" 折叠>
    参数 来源对象 <类型 = 按钮 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    {
        如果 (来源对象 == 按钮_下载)
        {
            如果 (下载书籍 () == 真)
            {
                按钮_下载.禁止 = 真
                按钮_停止.禁止 = 假

            }
        }
        否则 (来源对象 == 按钮_停止)
        {
            线程.停止 ()
            网络下载.销毁连接池 ()
            按钮_下载.禁止 = 假
            按钮_停止.禁止 = 真
            超级列表框_下载.全部删除 ()

        }
        否则 (来源对象 == 按钮_登录)
        {
            如果 (按钮_登录.标题 != "登出")
            {
                网站配置.成员 ("talebook").成员 ("url").置文本 (编辑框_网站地址.内容)
                如果 (登录窗口.创建对话框 () == 1)
                {
                    按钮_登录.标题 = "登出"
                    编辑框_网站地址.禁止 = 真
                    变量 错误内容 <类型 = 文本型>
                    最大ID = 取下载范围 (错误内容)
                    如果 (最大ID > 0)
                    {
                        编辑框_下载范围尾.内容 = 到文本 (最大ID)
                        标签_ID说明.标题 = "* 最大 ID 不能超过 " + 到文本 (最大ID)
                        按钮_下载.禁止 = 假
                    }
                    否则
                    {
                        信息框 (错误内容, 信息框按钮.警告图标)
                    }

                }
            }
            否则
            {
                变量 结果 <类型 = 文本型>
                如果 (登出账户 (结果) == 真)
                {
                    网站配置.成员 ("cookies").置空 ()
                    按钮_登录.标题 = "注册/登录"
                    编辑框_网站地址.禁止 = 假
                    按钮_下载.禁止 = 真
                }
                否则
                {
                    信息框 (结果, 信息框按钮.警告图标)

                }

            }
        }
        否则 (来源对象 == 按钮_浏览)
        {
            保存位置 = 浏览文件夹 ("选择保存位置")
            如果 (文本是否为空 (保存位置) == 假)
            {
                检查加入路径字符 (保存位置)
                编辑框_保存位置.内容 = 保存位置
                网站配置.路径 ("/talebook/path").置文本 (保存位置)

            }

        }
        返回 (0)

    }

    方法 检测账户 <类型 = 逻辑型>
    参数 结果 <类型 = 文本型 @默认值 = 空对象>
    {
        变量 访问响应 <类型 = 网页访问响应类>
        变量 网络访问 <类型 = 网络访问类>
        变量 请求网址 <类型 = 文本型>
        如果 (网站配置.成员 ("cookies").是否为文本 ())
        {
            cookies = 网站配置.取成员 ("cookies").取文本 ()
        }
        否则
        {
            返回 (假)
        }
        请求网址 = 编辑框_网站地址.内容
        如果 (文本是否为空 (请求网址))
        {
            结果 = "你还没有填写网站地址。"
            返回 (假)

        }
        如果 (是否以字符结束 (请求网址, '/') == 真)
        {
            删除字符 (请求网址, 取文本长度 (请求网址) - 1, 1)

        }
        加入文本 (请求网址, "/api/user/info")
        访问响应 = 网络访问.网页访问 (请求网址, 网页访问方式.GET, , , cookies)
        如果 (访问响应.响应码 == 200)
        {
            变量 Json <类型 = PivJSON>
            如果 (Json.解析UTF8 (访问响应.请求结果))
            {
                变量 是否登录 <类型 = 逻辑型>
                开始俘获异常 ()
                {
                    是否登录 = Json.取成员 ("user").取成员 ("is_login").取逻辑 ()
                    如果 (是否登录)
                    {
                        结果 = "用户已登录。"
                        返回 (真)
                    }
                    否则
                    {
                        结果 = "用户未登录。"
                        返回 (假)

                    }
                }
                俘获异常 (PivJSON异常)
                {
                    结果 = "网站API的返回值可能有改变。"
                    返回 (假)

                }
            }
            否则
            {
                结果 = "解析JSON失败。"

            }
        }
        否则
        {
            结果 = "网络请求失败。HTTP响应码为:" + 到文本 (访问响应.响应码)

        }
        返回 (假)
    }

    方法 登出账户 <类型 = 逻辑型>
    参数 结果 <类型 = 文本型>
    {
        变量 访问响应 <类型 = 网页访问响应类>
        变量 网络访问 <类型 = 网络访问类>
        变量 请求网址 <类型 = 文本型>
        如果 (网站配置.成员 ("cookies").是否为文本 ())
        {
            cookies = 网站配置.取成员 ("cookies").取文本 ()
        }
        否则
        {
            返回 (假)
        }
        请求网址 = 编辑框_网站地址.内容
        如果 (文本是否为空 (请求网址))
        {
            结果 = "你还没有填写网站地址。"
            返回 (假)

        }
        如果 (是否以字符结束 (请求网址, '/') == 真)
        {
            删除字符 (请求网址, 取文本长度 (请求网址) - 1, 1)

        }
        加入文本 (请求网址, "/api/user/sign_out")
        访问响应 = 网络访问.网页访问 (请求网址, 网页访问方式.GET, , , cookies)
        如果 (访问响应.响应码 == 200)
        {
            变量 Json <类型 = PivJSON>
            如果 (Json.解析UTF8 (访问响应.请求结果))
            {
                变量 错误码 <类型 = 文本型>
                开始俘获异常 ()
                {
                    错误码 = Json.成员 ("err").取文本 ()
                    如果 (错误码 == "ok")
                    {
                        结果 = "登出成功。"
                        网站配置.成员 ("cookies").置空 ()
                        返回 (真)
                    }
                    否则
                    {
                        如果 (Json.成员 ("msg").是否为文本 ())
                        {
                            结果 = "登出失败，返回错误: " + Json.成员 ("msg").取文本 ()
                        }
                        否则
                        {
                            结果 = "登出失败。"
                        }
                    }

                }
                俘获异常 (PivJSON异常)
                {
                    结果 = "网站API的返回值可能有改变。"
                    返回 (假)

                }
            }
            否则
            {
                结果 = "解析JSON失败。"

            }
        }
        否则
        {
            结果 = "网络请求失败。HTTP响应码为:" + 到文本 (访问响应.响应码)

        }
        返回 (假)
    }

    方法 取下载范围 <类型 = 整数>
    参数 结果 <类型 = 文本型>
    {
        变量 访问响应 <类型 = 网页访问响应类>
        变量 网络访问 <类型 = 网络访问类>
        变量 请求网址 <类型 = 文本型>
        如果 (网站配置.成员 ("cookies").是否为文本 ())
        {
            cookies = 网站配置.取成员 ("cookies").取文本 ()
            结果 = "获取最近列表失败，你还没有登录网站。"
        }
        否则
        {
            返回 (0)
        }
        请求网址 = 编辑框_网站地址.内容
        如果 (文本是否为空 (请求网址))
        {
            结果 = "你还没有填写网站地址。"
            返回 (0)

        }
        如果 (是否以字符结束 (请求网址, '/') == 真)
        {
            删除字符 (请求网址, 取文本长度 (请求网址) - 1, 1)

        }
        加入文本 (请求网址, "/api/recent")
        访问响应 = 网络访问.网页访问 (请求网址, 网页访问方式.GET, , , cookies)
        如果 (访问响应.响应码 == 200)
        {
            变量 Json <类型 = PivJSON>
            如果 (Json.解析UTF8 (访问响应.请求结果))
            {
                变量 错误码 <类型 = 文本型>
                开始俘获异常 ()
                {
                    错误码 = Json.成员 ("err").取文本 ()
                    如果 (错误码 == "ok")
                    {
                        结果 = "获取最近列表成功。"
                        返回 (Json.取路径 ("/books/0/id").取整数 ())
                    }
                    否则
                    {
                        如果 (Json.成员 ("msg").是否为文本 ())
                        {
                            结果 = "获取最近列表失败，返回错误: " + Json.成员 ("msg").取文本 ()
                        }
                        否则
                        {
                            结果 = "获取最近列表失败。"
                        }
                    }

                }
                俘获异常 (PivJSON异常)
                {
                    结果 = "网站API的返回值可能有改变。"
                    返回 (0)

                }
            }
            否则
            {
                结果 = "解析JSON失败。"

            }
        }
        否则
        {
            结果 = "网络请求失败。HTTP响应码为:" + 到文本 (访问响应.响应码)

        }
        返回 (0)
    }

    方法 下载书籍 <类型 = 逻辑型>
    {
        如果 (选中格式.是否为空 ())
        {
            信息框 ("未选择要下载的电子书格式。", 信息框按钮.警告图标)
            返回 (假)
        }
        如果 (网站配置.成员 ("cookies").是否为文本 ())
        {
            cookies = 网站配置.取成员 ("cookies").取文本 ()
        }
        否则
        {
            信息框 ("你还没有登录。", 信息框按钮.警告图标)
            返回 (假)
        }
        网站地址 = 编辑框_网站地址.内容
        如果 (文本是否为空 (网站地址))
        {
            信息框 ("你还没有填写网站地址。", 信息框按钮.警告图标)
            返回 (假)

        }
        如果 (是否以字符结束 (网站地址, '/'))
        {
            删除字符 (网站地址, 取文本长度 (网站地址) - 1, 1)

        }
        如果 (文本是否为空 (保存位置))
        {
            信息框 ("你还没有选择保存位置。", 信息框按钮.警告图标)
            返回 (假)

        }
        起始ID = 文本到整数 (编辑框_下载范围首.内容)
        如果 (起始ID > 最大ID)
        {
            起始ID = 最大ID
            编辑框_下载范围首.内容 = 到文本 (起始ID)

        }
        变量 局_最大ID <类型 = 整数>
        变量 下载线程数 <类型 = 整数>
        局_最大ID = 文本到整数 (编辑框_下载范围尾.内容)
        如果 (局_最大ID <= 最大ID && 局_最大ID >= 起始ID)
        {
            最大ID = 局_最大ID
        }
        否则
        {
            最大ID = 剪切值 (局_最大ID, 起始ID, 最大ID)
            编辑框_下载范围尾.内容 = 到文本 (最大ID)

        }
        下载线程数 = 剪切值 (文本到整数 (编辑框_下载线程.内容), 1, 5)
        编辑框_下载线程.内容 = 到文本 (下载线程数)
        网络下载.启动连接池 (下载线程数, 20, 100)
        线程.启动 ()
        返回 (真)
    }

    方法 载入窗口配置
    {
        变量 配置文件 <类型 = 字节集类>
        如果 (配置文件.从文件读字节集 (取运行目录 () + "Config.json") > 0)
        {
            网站配置.解析UTF8 (配置文件)

        }
        如果 (网站配置.路径 ("/talebook/url").是否为文本 ())
        {
            编辑框_网站地址.内容 = 网站配置.取路径 ("/talebook/url").取文本 ()

        }
        如果 (网站配置.路径 ("/talebook/path").是否为文本 ())
        {
            保存位置 = 网站配置.取路径 ("/talebook/path").取文本 ()
        }
        否则
        {
            保存位置 = 取运行目录 () + "book\\"

        }
        编辑框_保存位置.内容 = 保存位置
        如果 (网站配置.路径 ("/checkbox/epub").是否为逻辑型 ())
        {
            选择框_EPUB.选中 = 网站配置.取路径 ("/checkbox/epub").取逻辑 ()

        }
        如果 (网站配置.路径 ("/checkbox/mobi").是否为逻辑型 ())
        {
            选择框_MOBI.选中 = 网站配置.取路径 ("/checkbox/mobi").取逻辑 ()

        }
        如果 (网站配置.路径 ("/checkbox/azw").是否为逻辑型 ())
        {
            选择框_AZW.选中 = 网站配置.取路径 ("/checkbox/azw").取逻辑 ()

        }
        如果 (网站配置.路径 ("/checkbox/azw3").是否为逻辑型 ())
        {
            选择框_AZW3.选中 = 网站配置.取路径 ("/checkbox/azw3").取逻辑 ()

        }
        如果 (网站配置.路径 ("/checkbox/txt").是否为逻辑型 ())
        {
            选择框_TXT.选中 = 网站配置.取路径 ("/checkbox/txt").取逻辑 ()

        }
        如果 (网站配置.路径 ("/checkbox/pdf").是否为逻辑型 ())
        {
            选择框_PDF.选中 = 网站配置.取路径 ("/checkbox/pdf").取逻辑 ()

        }
        如果 (网站配置.路径 ("/checkbox/pdf").是否为逻辑型 ())
        {
            选择框_PDF.选中 = 网站配置.取路径 ("/checkbox/pdf").取逻辑 ()

        }
        如果 (网站配置.路径 ("/checkbox/formats").是否为数组 ())
        {
            计次循环 (网站配置.路径 ("/checkbox/formats").取成员数 ())
            {
                选中格式.加入成员 (网站配置.路径 ("/checkbox/formats/" + 到文本 (取循环索引 ())).取文本 ())

            }
        }
        如果 (网站配置.路径 ("/radiobox/all").是否为逻辑型 ())
        {
            如果 (网站配置.取路径 ("/radiobox/all").取逻辑 ())
            {
                单选框_全部格式.选中 = 真
            }
            否则
            {
                单选框_优先格式.选中 = 真
                变量 优先格式 <类型 = 文本型>
                优先格式 = "只下载一种格式，排序:"
                选中格式.枚举循环 ()
                {
                    加入文本 (优先格式, " " + 选中格式.取枚举值 () + ",")
                }
                如果 (是否以字符结束 (优先格式, ','))
                {
                    删除字符 (优先格式, 取文本长度 (优先格式) - 1, 1)
                }
                单选框_优先格式.标题 = 优先格式

            }

        }
        如果 (网站配置.路径 ("/option/thread").是否为整数 ())
        {
            编辑框_下载线程.内容 = 到文本 (网站配置.取路径 ("/option/thread").取整数 ())

        }
        如果 (网站配置.路径 ("/option/start").是否为整数 ())
        {
            编辑框_下载范围首.内容 = 到文本 (网站配置.取路径 ("/option/start").取整数 ())

        }
        如果 (网站配置.路径 ("/option/end").是否为整数 ())
        {
            编辑框_下载范围尾.内容 = 到文本 (网站配置.取路径 ("/option/end").取整数 ())
        }

    }

    方法 保存窗口配置 <折叠>
    {
        网站配置.路径 ("/checkbox/epub").置逻辑 (选择框_EPUB.选中)
        网站配置.路径 ("/checkbox/mobi").置逻辑 (选择框_MOBI.选中)
        网站配置.路径 ("/checkbox/azw").置逻辑 (选择框_AZW.选中)
        网站配置.路径 ("/checkbox/azw3").置逻辑 (选择框_AZW3.选中)
        网站配置.路径 ("/checkbox/txt").置逻辑 (选择框_TXT.选中)
        网站配置.路径 ("/checkbox/pdf").置逻辑 (选择框_PDF.选中)
        网站配置.路径 ("/checkbox/formats").置空 ()
        选中格式.枚举循环 ()
        {
            网站配置.路径 ("/checkbox/formats").加入成员 (选中格式.取枚举值 ())
        }
        网站配置.路径 ("/radiobox/all").置逻辑 (单选框_全部格式.选中)
        网站配置.路径 ("/option/thread").置整数 (文本到整数 (编辑框_下载线程.内容))
        网站配置.路径 ("/option/start").置整数 (文本到整数 (编辑框_下载范围首.内容))
        网站配置.路径 ("/option/end").置整数 (文本到整数 (编辑框_下载范围尾.内容))
        网站配置.到UTF8 (4).写字节集到文件 (取运行目录 () + "Config.json")
    }

    方法 选择框_被单击 <接收事件 类型 = 整数 注释 = "当按钮被单击后发送此事件" 折叠>
    参数 来源对象 <类型 = 选择框 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    {
        如果 (来源对象 == 选择框_EPUB)
        {
            如果 (来源对象.选中)
            {
                如果 (选中格式.所指定值是否存在 ("EPUB") == 假)
                {
                    选中格式.加入成员 ("EPUB")
                }
            }
            否则
            {
                选中格式.查找删除成员 ("EPUB")
            }

        }
        否则 (来源对象 == 选择框_MOBI)
        {
            如果 (来源对象.选中)
            {
                如果 (选中格式.所指定值是否存在 ("MOBI") == 假)
                {
                    选中格式.加入成员 ("MOBI")
                }
            }
            否则
            {
                选中格式.查找删除成员 ("MOBI")
            }

        }
        否则 (来源对象 == 选择框_AZW)
        {
            如果 (来源对象.选中)
            {
                如果 (选中格式.所指定值是否存在 ("AZW") == 假)
                {
                    选中格式.加入成员 ("AZW")
                }
            }
            否则
            {
                选中格式.查找删除成员 ("AZW")
            }

        }
        否则 (来源对象 == 选择框_AZW3)
        {
            如果 (来源对象.选中)
            {
                如果 (选中格式.所指定值是否存在 ("AZW3") == 假)
                {
                    选中格式.加入成员 ("AZW3")
                }
            }
            否则
            {
                选中格式.查找删除成员 ("AZW3")
            }

        }
        否则 (来源对象 == 选择框_TXT)
        {
            如果 (来源对象.选中)
            {
                如果 (选中格式.所指定值是否存在 ("TXT") == 假)
                {
                    选中格式.加入成员 ("TXT")
                }
            }
            否则
            {
                选中格式.查找删除成员 ("TXT")
            }

        }
        否则 (来源对象 == 选择框_PDF)
        {
            如果 (来源对象.选中)
            {
                如果 (选中格式.所指定值是否存在 ("PDF") == 假)
                {
                    选中格式.加入成员 ("PDF")
                }
            }
            否则
            {
                选中格式.查找删除成员 ("PDF")
            }

        }
        如果 (单选框_优先格式.选中)
        {
            变量 优先格式 <类型 = 文本型>
            优先格式 = "只下载一种格式，排序:"
            选中格式.枚举循环 ()
            {
                加入文本 (优先格式, " " + 选中格式.取枚举值 () + ",")
            }
            如果 (是否以字符结束 (优先格式, ','))
            {
                删除字符 (优先格式, 取文本长度 (优先格式) - 1, 1)
            }
            单选框_优先格式.标题 = 优先格式

        }
        返回 (0)
    }

    方法 线程类_线程运行 <接收事件 类型 = 整数 注释 = "  用户需要接收并处理本事件以执行所需要的功能,该事件处理方法将在一个单独的线程中运行."
            注释 = "  注意: 在本事件的接收处理方法中,必须尽可能快地频繁调用本对象的\"是否需要退出\"方法,"
            注释 = "一旦发现该方法返回真,则需要尽快结束执行并返回,否则将导致另一线程中的\"停止\"方法调用" 注释 = "进入死等状态." 折叠>
    参数 来源对象 <类型 = 线程类 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    {
        如果 (来源对象 == 线程)
        {
            变量 索引 <类型 = 整数>
            循环 (起始ID, 最大ID + 1, 索引)
            {
                如果 (来源对象.是否需要退出 () == 真)
                {
                    返回 (0)
                }
                变量 请求网址 <类型 = 文本型>
                请求网址 = 网站地址 + "/api/book/" + 到文本 (索引)
                判断循环 (网络下载.投递网页访问 (请求网址, 网页访问方式.GET, , , cookies, , , , , , , , 假) == 假)
                {
                    如果 (来源对象.是否需要退出 () == 真)
                    {
                        返回 (0)
                    }
                    延时 (500)

                }

            }
            // 判断是否还有下载任务
            判断循环 (网络下载.剩余任务数 != 0)
            {
                延时 (500)

            }
            // 判断下载是否结束
            判断循环 (网络下载.执行任务数 != 0)
            {
                延时 (500)

            }
            // 下载结束
            网络下载.销毁连接池 ()
            按钮_下载.禁止 = 假
            按钮_停止.禁止 = 真
            超级列表框_下载.全部删除 ()

        }
        返回 (0)
    }

    方法 高并发网络访问类_网页访问完毕 <接收事件 类型 = 整数 注释 = "网页访问结束后,将会响应本事件." 注释 = "为免阻塞连接池,请尽快返回,如有耗时操作请在线程中执行."
            返回值注释 = "该返回值无意义.">
    参数 来源对象 <类型 = 高并发网络访问类 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    参数 传输对象 <类型 = Curl传输类 注释 = "本次网页访问所用的实例对象.">
    参数 访问地址 <类型 = 文本型 注释 = "本次访问请求的地址.">
    参数 访问响应 <类型 = 网页访问响应类 注释 = "本次访问返回的请求结果和响应.离开本事件后,该对象立即释放.">
    {
        如果 (来源对象 == 网络下载)
        {
            如果 (访问响应.响应码 == 200)
            {
                变量 Json <类型 = PivJSON>
                如果 (Json.解析UTF8 (访问响应.请求结果))
                {
                    开始俘获异常 ()
                    {
                        如果 (Json.取成员 ("err").取文本 () == "ok")
                        {
                            变量 可用格式 <类型 = 文本数组类>
                            变量 索引数组 <类型 = 整数数组类>
                            计次循环 (Json.取路径 ("/book/files").取成员数 ())
                            {
                                可用格式.加入成员 (Json.取路径 ("/book/files/" + 到文本 (取循环索引 ()) + "/format").取文本 ())

                            }
                            选中格式.枚举循环 ()
                            {
                                变量 数组索引 <类型 = 整数>
                                数组索引 = 可用格式.查找首成员 (选中格式.取枚举值 (), 假)
                                如果 (数组索引 != -1)
                                {
                                    索引数组.加入成员 (数组索引)
                                    如果 (单选框_优先格式.选中)
                                    {
                                        跳出循环
                                    }

                                }
                            }
                            如果 (索引数组.取成员数 () == 0)
                            {
                                格式日志类.加入警告日志 ("{}\t未找到所需下载的文件格式", 访问地址)
                                返回 (0)

                            }
                            索引数组.枚举循环 ()
                            {
                                变量 表项索引 <类型 = 整数>
                                表项索引 = 超级列表框_下载.插入表项 (-1, 网站地址 + Json.取路径 ("/book/files/" + 到文本 (索引数组.取枚举值 ()) + "/href").取文本 ())
                                超级列表框_下载.置标题 (表项索引, 1, Json.取路径 ("/book/title").取文本 ())
                                超级列表框_下载.置标题 (表项索引, 2, Json.取路径 ("/book/author").取文本 ())
                                超级列表框_下载.置标题 (表项索引, 3, Json.取路径 ("/book/files/" + 到文本 (索引数组.取枚举值 ()) + "/format").取文本 ())
                                超级列表框_下载.置标题 (表项索引, 4, 到文本 (Json.取路径 ("/book/files/" + 到文本 (索引数组.取枚举值 ()) + "/size").取整数 ()))
                                网络下载.投递下载 (网站地址 + Json.取路径 ("/book/files/" + 到文本 (索引数组.取枚举值 ()) + "/href").取文本 (), 保存位置, 网页访问方式.GET, 空对象, 空对象, cookies, , , , , , , , 真)

                            }
                            返回 (0)

                        }

                    }
                    俘获异常 (PivJSON异常)
                    {
                        格式日志类.加入错误日志 ("{}\t解析JSON格式出错: {}", 访问地址, 取被俘获异常数据 (PivJSON异常).取错误信息 ())
                        返回 (0)

                    }
                }
                格式日志类.加入警告日志 ("{}\t没找到该URL的相关书籍", 访问地址)
            }
            否则
            {
                格式日志类.加入错误日志 ("{}\t网络访问失败，响应码: {}", 访问地址, 访问响应.响应码)

            }

        }
        返回 (0)
    }

    方法 高并发网络访问类_下载完毕 <接收事件 类型 = 整数 注释 = "下载结束后,将会响应本事件." 注释 = "为免阻塞连接池,请尽快返回,如有耗时操作请在线程中执行."
            返回值注释 = "该返回值无意义." 折叠>
    参数 来源对象 <类型 = 高并发网络访问类 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    参数 传输对象 <类型 = Curl传输类 注释 = "本次下载所用的实例对象.">
    参数 下载地址 <类型 = 文本型 注释 = "本次访问请求的地址.">
    参数 下载响应 <类型 = 网络下载响应类 注释 = "本次下载返回的响应头和结果.离开本事件后,该对象立即释放.">
    {
        如果 (来源对象 == 网络下载)
        {
            如果 (文本是否为空 (下载响应.文件路径) == 真)
            {
                格式日志类.加入错误日志 ("{}\t{}\t下载失败,响应码: {}", 下载地址, 下载响应.文件名, 下载响应.响应码)
            }
            否则
            {
                格式日志类.加入信息日志 ("{}\t{}\t下载成功", 下载地址, 下载响应.文件路径)

            }
            变量 表项索引 <类型 = 整数>
            表项索引 = 超级列表框_下载.查找表项 (下载地址, 0, 真, 0)
            如果 (表项索引 != -1)
            {
                超级列表框_下载.删除表项 (表项索引)
            }

        }
        返回 (0)
    }

    方法 高并发网络访问类_下载进度改变 <接收事件 类型 = 整数 注释 = "开始下载后,最长每隔1秒响应本事件,当下载进度发生变化时,会立即响应." 注释 = "即使暂停下载后,仍每隔一秒发送本事件."
            返回值注释 = "返回0继续传输,返回非0则中止传输." 折叠>
    参数 来源对象 <类型 = 高并发网络访问类 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    参数 传输对象 <类型 = Curl传输类 注释 = "本次下载所用的实例对象.">
    参数 下载地址 <类型 = 文本型 注释 = "本次访问请求的地址.">
    参数 下载总量 <类型 = 长整数 注释 = "预计需要下载的字节数,断点续传和分块下载时不等于文件大小.">
    参数 当前下载 <类型 = 长整数 注释 = "当前已下载的字节数.">
    {
        如果 (来源对象 == 网络下载)
        {
            变量 表项索引 <类型 = 整数>
            表项索引 = 超级列表框_下载.查找表项 (下载地址, 0, 真, 0)
            如果 (表项索引 != -1)
            {
                超级列表框_下载.置标题 (表项索引, 5, 到文本 (四舍五入 ((小数)当前下载 / (小数)下载总量 * 100, 1)) + "%")
            }

        }
        返回 (0)
    }
}

类 登录窗口类 <基础类 = 窗口 隐藏值属性 = "0" @视窗.布局 = "client_size = \"410, 280\"" 标题 = "登录/注册">
{
    变量 标签_用户名 <类型 = 标签 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 101\r\npos = \"30, 30, 120, 24\"" 标题 = "用户名">
    变量 标签_密码 <类型 = 标签 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 102\r\npos = \"30, 80, 120, 24\"" 标题 = "密码">
    变量 标签_昵称 <类型 = 标签 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 103\r\npos = \"30, 130, 120, 24\"" 标题 = "昵称(选填)">
    变量 标签_邮箱 <类型 = 标签 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 104\r\npos = \"30, 180, 120, 24\"" 标题 = "邮箱(选填)">
    变量 编辑框_用户名 <类型 = 编辑框 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 105\r\npos = \"160, 30, 220, 32\"" 左边空 = 5>
    变量 编辑框_密码 <类型 = 编辑框 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 106\r\npos = \"160, 80, 220, 32\"" 左边空 = 5
            输入方式 = 密码输入>
    变量 编辑框_昵称 <类型 = 编辑框 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 107\r\npos = \"160, 130, 220, 32\"" 左边空 = 5>
    变量 编辑框_邮箱 <类型 = 编辑框 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 108\r\npos = \"160, 180, 220, 32\"" 左边空 = 5>
    变量 按钮_登录 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 109\r\npos = \"148, 233, 100, 32\"" 标题 = "登录">
    变量 按钮_取消 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 110\r\npos = \"277, 233, 100, 32\"" 标题 = "取消">
    变量 按钮_注册 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 111\r\npos = \"20, 233, 100, 32\"" 标题 = "注册">
    变量 ""
    变量 网址 <类型 = 文本型>
    变量 网络访问 <类型 = 网络访问类>

    方法 登录窗口类_创建完毕 <接收事件 类型 = 整数 注释 = "当本组件及其中所有子组件均被创建完毕后发送此事件.">
    参数 来源对象 <类型 = 登录窗口类 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    {
        如果 (取程序 ().主窗口对象.网站配置.路径 ("/talebook/url").是否为文本 ())
        {
            网址 = 取程序 ().主窗口对象.网站配置.取路径 ("/talebook/url").取文本 ()
        }
        如果 (取程序 ().主窗口对象.网站配置.路径 ("/talebook/username").是否为文本 ())
        {
            编辑框_用户名.内容 = 取程序 ().主窗口对象.网站配置.取路径 ("/talebook/username").取文本 ()
        }
        如果 (取程序 ().主窗口对象.网站配置.路径 ("/talebook/password").是否为文本 ())
        {
            编辑框_密码.内容 = 取程序 ().主窗口对象.网站配置.取路径 ("/talebook/password").取文本 ()
        }
        如果 (取程序 ().主窗口对象.网站配置.路径 ("/talebook/nickname").是否为文本 ())
        {
            编辑框_昵称.内容 = 取程序 ().主窗口对象.网站配置.取路径 ("/talebook/nickname").取文本 ()
        }
        如果 (取程序 ().主窗口对象.网站配置.路径 ("/talebook/email").是否为文本 ())
        {
            编辑框_邮箱.内容 = 取程序 ().主窗口对象.网站配置.取路径 ("/talebook/email").取文本 ()
        }
        返回 (0)
    }

    方法 登录账户 <类型 = 逻辑型>
    参数 结果 <类型 = 文本型>
    {
        变量 访问响应 <类型 = 网页访问响应类>
        变量 提交信息 <类型 = 文本型>
        变量 请求网址 <类型 = 文本型>
        如果 (文本是否为空 (网址))
        {
            结果 = "你还没有填写网站地址。"
            返回 (假)

        }
        如果 (文本是否为空 (编辑框_用户名.内容) || 文本是否为空 (编辑框_密码.内容))
        {
            结果 = "用户名和密码不能为空。"
            返回 (假)

        }
        如果 (是否以字符结束 (网址, '/') == 真)
        {
            删除字符 (网址, 取文本长度 (网址) - 1, 1)

        }
        请求网址 = 网址 + "/api/user/sign_in"
        提交信息 = 取格式文本 ("username=%s&password=%s", 编辑框_用户名.内容, 编辑框_密码.内容)
        访问响应 = 网络访问.网页访问 (请求网址, 网页访问方式.POST, 提交信息)
        如果 (访问响应.响应码 == 200)
        {
            变量 Json <类型 = PivJSON>
            变量 cookie <类型 = 文本型>
            如果 (Json.解析UTF8 (访问响应.请求结果))
            {
                开始俘获异常 ()
                {
                    变量 错误码 <类型 = 文本型>
                    错误码 = Json.取成员 ("err").取文本 ()
                    如果 (错误码 == "ok")
                    {
                        结果 = "登录成功。"
                        访问响应.Cookies.枚举循环 ()
                        {
                            变量 当前值 <类型 = 文本型>
                            当前值 = 访问响应.Cookies.取枚举值 ()
                            如果 (是否以字符结束 (当前值, ';') == 假)
                            {
                                加入文本 (当前值, "; ")

                            }
                            加入文本 (cookie, 当前值)

                        }
                        删自身首尾空 (cookie)
                        取程序 ().主窗口对象.网站配置.成员 ("talebook").成员 ("url").置文本 (网址)
                        取程序 ().主窗口对象.网站配置.成员 ("talebook").成员 ("username").置文本 (编辑框_用户名.内容)
                        取程序 ().主窗口对象.网站配置.成员 ("talebook").成员 ("password").置文本 (编辑框_密码.内容)
                        取程序 ().主窗口对象.网站配置.成员 ("talebook").成员 ("nickname").置文本 (编辑框_昵称.内容)
                        取程序 ().主窗口对象.网站配置.成员 ("talebook").成员 ("email").置文本 (编辑框_邮箱.内容)
                        取程序 ().主窗口对象.网站配置.成员 ("cookies").置文本 (cookie)
                        返回 (真)
                    }
                    否则
                    {
                        结果 = "登录失败，返回错误: " + Json.成员 ("msg").取文本 ()
                    }

                }
                俘获异常 (PivJSON异常)
                {
                    结果 = "登录失败，网站API的返回值可能有改变。"
                    返回 (假)

                }
            }
            否则
            {
                结果 = "解析JSON失败。"

            }
        }
        否则
        {
            结果 = "网络请求失败。HTTP响应码为:" + 到文本 (访问响应.响应码)

        }
        返回 (假)
    }

    方法 注册账户 <类型 = 逻辑型>
    参数 结果 <类型 = 文本型>
    {
        变量 访问响应 <类型 = 网页访问响应类>
        变量 提交信息 <类型 = 文本型>
        变量 请求网址 <类型 = 文本型>
        如果 (文本是否为空 (网址))
        {
            结果 = "你还没有填写网站地址。"
            返回 (假)

        }
        如果 (文本是否为空 (编辑框_用户名.内容) || 文本是否为空 (编辑框_密码.内容) || 文本是否为空 (编辑框_昵称.内容) || 文本是否为空 (编辑框_邮箱.内容))
        {
            结果 = "用户名、密码、昵称和邮箱不能为空。"
            返回 (假)

        }
        如果 (是否以字符结束 (网址, '/') == 真)
        {
            删除字符 (网址, 取文本长度 (网址) - 1, 1)

        }
        请求网址 = 网址 + "/api/user/sign_up"
        提交信息 = 取格式文本 ("username=%s&password=%s&nickname=%s&email=%s", 编辑框_用户名.内容, 编辑框_密码.内容, 编辑框_昵称.内容, 编辑框_邮箱.内容)
        访问响应 = 网络访问.网页访问 (请求网址, 网页访问方式.POST, 提交信息)
        如果 (访问响应.响应码 == 200)
        {
            变量 Json <类型 = PivJSON>
            如果 (Json.解析UTF8 (访问响应.请求结果))
            {
                开始俘获异常 ()
                {
                    变量 注册结果 <类型 = 文本型>
                    注册结果 = Json.成员 ("err").取文本 ()
                    如果 (注册结果 == "ok")
                    {
                        结果 = "注册成功。"
                        取程序 ().主窗口对象.网站配置.成员 ("talebook").成员 ("url").置文本 (网址)
                        取程序 ().主窗口对象.网站配置.成员 ("talebook").成员 ("username").置文本 (编辑框_用户名.内容)
                        取程序 ().主窗口对象.网站配置.成员 ("talebook").成员 ("password").置文本 (编辑框_密码.内容)
                        取程序 ().主窗口对象.网站配置.成员 ("talebook").成员 ("nickname").置文本 (编辑框_昵称.内容)
                        取程序 ().主窗口对象.网站配置.成员 ("talebook").成员 ("email").置文本 (编辑框_邮箱.内容)
                        返回 (真)
                    }
                    否则
                    {
                        结果 = "注册失败，返回错误: " + 注册结果 + "\r\n请你自行访问网站尝试注册。"
                    }

                }
                俘获异常 (PivJSON异常)
                {
                    结果 = "注册失败，网站API的返回值可能有改变。"
                    返回 (假)

                }
            }
            否则
            {
                结果 = "解析JSON失败。"

            }
        }
        否则
        {
            结果 = "网络请求失败。HTTP响应码为:" + 到文本 (访问响应.响应码)

        }
        返回 (假)
    }

    方法 按钮_被单击 <接收事件 类型 = 整数 注释 = "当按钮被单击后发送此事件" 折叠>
    参数 来源对象 <类型 = 按钮 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    {
        如果 (来源对象 == 按钮_登录)
        {
            变量 结果 <类型 = 文本型>
            如果 (登录账户 (结果) == 假)
            {
                信息框 (结果, 信息框按钮.警告图标)
            }
            否则
            {
                关闭窗口 (1)  // 1 为成功登录
            }
        }
        否则 (来源对象 == 按钮_注册)
        {
            变量 结果 <类型 = 文本型>
            如果 (注册账户 (结果))
            {
                信息框 ("注册成功，请登录网站。", 信息框按钮.信息图标)
            }
            否则
            {
                信息框 (结果, 信息框按钮.警告图标)
            }

        }
        否则 (来源对象 == 按钮_取消)
        {
            关闭窗口 ()

        }
        返回 (0)
    }
}
