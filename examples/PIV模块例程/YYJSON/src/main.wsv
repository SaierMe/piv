<火山程序 类型 = "通常" 版本 = 1 />

包 火山.程序 <注释 = "未写完……">

类 启动类 <公开 基础类 = 程序类>
{
    方法 启动方法 <公开 类型 = 整数>
    {
        // 本yyjson库的默认内存分配器为火山内部的内存池,已经比new/malloc快;
        // 若需使用更快的mimalloc,需要配置官方或第三方的mimalloc模块(PIV模块不包含mimalloc)
        标准输出行 (, "是否使用mimolloc内存分配器?\r\n请按Y启用,或按任意键不启用...")
        变量 输入字 <类型 = 字符>
        输入字 = 标准输入字符 ()
        如果 (输入字 == 'y' || 输入字 == 'Y')
        {
            // 启用mimalloc
            YYJSON分配器.置偏好设置 (YYJSON分配器.mimalloc)

        }

        标准输出行 (, "\r\n即将执行JSON构造例子,按任意键继续...")
        标准输入字符 ()
        变量 文档 <类型 = 文本型>
        文档 = 构造 ()
        标准输出行 (, 文档)  // 输出构造的内容

        标准输出行 (, "\r\n即将执行JSON解析例子,按任意键继续...")
        标准输入字符 ()
        解析 (文档)

        标准输出行 (, "\r\n按任意键结束...")
        标准输入字符 ()
        返回 (1)
    }

    方法 构造 <类型 = 文本型 注释 = "生成JSON的基础例子" 折叠>
    {
        变量 json <类型 = YYJSON值>
        变量 是否成功 <类型 = 逻辑型>
        // 实例化后默认是null值
        是否成功 = json.到可读文本 () == "null"
        调试检查 (是否成功)

        // 如果当前值是null,使用"置入键值"会自动将它改为JSON对象;
        // 同样,使用"加入成员",也会自动将null值改为JSON数组,其他值类型则不变.
        是否成功 = json.置入键值 ("name", "yyjson test")
        调试检查 (是否成功 == 真)

        // 由于当前值类型为JSON对象,下面使用"加入成员"会返回失败
        是否成功 = json.加入成员 (真, 123)
        调试检查 (是否成功 == 假)

        // JSON数组 -----

        // 在根节点中插入一个数组值:
        json.置入键值 ("arr", json.创建数组 (4399, "火山", "视窗"), 假)  // 第三个参数设置为假就是浅拷贝
        // 深拷贝会将值复制多一份,虽然更安全,但低效;
        // 只要是由本对象"创建XX"方法创建的值,都可以安全的进行浅拷贝(推荐)
        // 但要注意,对于JSON对象和JSON数组,都只应浅拷贝一次,多次引用容易造成混乱

        // 部分方法支持链式调用,下面继续在数组中加入一些成员
        json.取成员 ("arr").加入成员 (3.14, 假, json.创建空值 (), json.创建空数组 (), 123, 456)

        // "加入成员"能一次加入多个成员,但只能深拷贝
        // 需要浅拷贝的要用"加入首成员"或"加入尾成员"
        json.取成员 ("arr").加入首成员 (json.创建对象 ("pos", 0, "type", "json.obj"), 假)

        // 替换成员值
        变量 被删值 <类型 = YYJSON值 注释 = "注意: 被\"删除/替换\"的值实际上还在JSON文档里保存着," 注释 = "直到JSON文档被释放才会彻底删除">
        被删值 = json.取成员 ("arr").替换成员 (1, "替换进来的值")  // 替换数组里的第二个成员
        调试检查 (被删值.取数值 (整数) == 4399)  // 被替换的是上面加入的 4399

        // 删除成员
        被删值 = json.取成员 ("arr").删除尾成员 ()
        调试检查 (被删值.取数值 (整数) == 456)
        被删值 = json.取成员 ("arr").删除成员 (json.取成员 ("arr").取数组成员数 () - 1)
        调试检查 (被删值.取数值 (整数) == 123)

        // JSON对象 -----

        // 下面通过JSON路径在根节点中插入一个对象值:
        // JOSN路径必须以'/'开头,路径中不存在的父节点会被自动创建
        json.置入键值 ("obj", json.创建对象 ("type", "json.obj"), 假)


        // JSON路径 -----
        json.置入路径 ("/path/type", "json.path")



        是否成功 = json.置入路径 ("/arr/1", "又被修改了")  // 使用"置入路径"也具备替换成员值的作用
        调试检查 (是否成功 == 真)


        返回 (json.到可读文本 (位或 (YYJSON序列化选项.缩进, YYJSON序列化选项.末尾换行)))
    }

    方法 解析 <注释 = "解析JSON文档的例子">
    参数 文档内容 <类型 = 文本型>
    {
        变量 json <类型 = YYJSON只读值>
        json.解析 (文档内容)

    }

    方法 "// 深拷贝和浅拷贝" <注释 = "[进阶]深拷贝和浅拷贝的用法" 折叠>
    {
        如果 (真)
        {
            // 由于内部使用了智能指针,赋值到新变量后,操作的仍是同一个JSON文档
            变量 浅引用 <类型 = YYJSON值>
            浅引用 = json.取成员 ("obj")
            浅引用.置入键值 ("pos", 2)
            浅引用.置入键值 ("num", 1024)
            // 上面对"浅引用"变量的修改会同步反映到"json"变量中

            变量 副本 <类型 = YYJSON值>
            // 使用"复制"可以将值深拷贝到当前JSON中,之后的修改不会影响来源的JSON
            副本.复制 (浅引用)  // 副本 = 浅引用
            结果 = 副本.清空对象 ()
            调试检查 (结果 == 真)  // 清空了对象,但不会影响原来的JSON
        }



        json.置入键值 ("/piv", "路径能访问到吗？")
        调试检查 (json.取成员文本 ("/piv") == "路径能访问到吗？")  // 取成员能
        // 路径不能
        变量 路径错误 <类型 = YYJSON路径错误>
        路径错误 = YYJSON路径错误.创建 ()
        json.取路径文本 ("/piv", 路径错误)
        调试检查 (路径错误.错误代码 != YYJSON路径错误码.成功)
        json.取路径文本 ("//piv", 路径错误)
        调试检查 (路径错误.错误代码 != YYJSON路径错误码.成功)



    }

    #
}
