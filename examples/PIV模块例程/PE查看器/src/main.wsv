<火山程序 类型 = "通常" 版本 = 1 />

包 火山.程序

类 启动类 <公开 基础类 = 窗口程序类 折叠>
{
    变量 主窗口对象 <类型 = 我的主窗口>
    变量 PE解析 <公开 类型 = PE文件操作类>

    方法 启动方法 <公开 类型 = 整数 折叠>
    {
        主窗口对象.创建主窗口 ()
        返回 (1)
    }
}

# ===

类 我的主窗口 <基础类 = 窗口 折叠 折叠2 @视窗.布局 = "client_size = \"650, 400\"" 标题 = "PE查看器" 允许文件拖放 = 真>
{
    变量 标签_文件名 <类型 = 标签 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 101\r\npos = \"20, 20, 100, 24\"" 标题 = "文件名:">
    变量 编辑框_文件名 <类型 = 编辑框 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 102\r\npos = \"20, 50, 495, 32\"" 左边空 = 5>
    变量 按钮_打开文件 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 103\r\npos = \"530, 50, 100, 32\"" 标题 = "打开文件">
    变量 按钮_打开模块 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 104\r\npos = \"530, 97, 100, 32\"" 标题 = "打开模块">
    变量 按钮_另存为 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 105\r\npos = \"530, 144, 100, 32\"" 标题 = "另存为" 禁止 = 真>
    变量 标签_子系统 <类型 = 标签 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 106\r\npos = \"249, 100, 200, 32\"" 标题 = "子系统: ">
    变量 标签_文件类型 <类型 = 标签 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 107\r\npos = \"20, 100, 200, 32\"" 标题 = "文件类型: ">
    变量 标签_入口点 <类型 = 标签 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 108\r\npos = \"188, 145, 100, 24\"" 标题 = "入口点:">
    变量 标签_映像基址 <类型 = 标签 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 109\r\npos = \"20, 145, 100, 24\"" 标题 = "映像基址:">
    变量 编辑框_入口点 <类型 = 编辑框 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 110\r\npos = \"185, 174, 140, 32\"" 对齐方式 = 居中
            输入方式 = 只读方式>
    变量 编辑框_基址 <类型 = 编辑框 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 111\r\npos = \"20, 175, 140, 32\"" 对齐方式 = 居中
            输入方式 = 只读方式>
    变量 按钮_HEX <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 112\r\npos = \"20, 297, 120, 32\"" 标题 = "十六进制" 禁止 = 真>
    变量 标签_映像大小 <类型 = 标签 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 113\r\npos = \"357, 147, 100, 24\"" 标题 = "映像大小:">
    变量 编辑框_映像大小 <类型 = 编辑框 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 114\r\npos = \"354, 176, 140, 32\"" 对齐方式 = 居中
            输入方式 = 只读方式>
    变量 按钮_导入表 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 115\r\npos = \"184, 297, 120, 32\"" 标题 = "导入表" 禁止 = 真>
    变量 按钮_导出表 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 116\r\npos = \"348, 297, 120, 32\"" 标题 = "导出表" 禁止 = 真>
    变量 按钮_节区表 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 117\r\npos = \"348, 247, 120, 32\"" 标题 = "节区表" 禁止 = 真>
    变量 按钮_DOS头 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 118\r\npos = \"20, 247, 120, 32\"" 标题 = "DOS头"
            禁止 = 真>
    变量 按钮_NT头 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 119\r\npos = \"184, 247, 120, 32\"" 标题 = "NT头" 禁止 = 真>
    变量 按钮_重定位表 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 120\r\npos = \"512, 297, 120, 32\"" 标题 = "×重定位表"
            禁止 = 真>
    变量 按钮_资源 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 121\r\npos = \"512, 247, 120, 32\"" 标题 = "×资源" 禁止 = 真>
    变量 按钮_调试表 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 122\r\npos = \"20, 347, 120, 32\"" 标题 = "×调试表" 禁止 = 真>
    变量 按钮_TLS <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 123\r\npos = \"184, 347, 120, 32\"" 标题 = "×TLS"
            禁止 = 真>
    变量 ""
    变量 导出表 <类型 = 导出表类>
    变量 导入表 <类型 = 导入表数组类>
    变量 ""
    变量 HEX查看器 <类型 = 十六进制查看器>
    变量 DOS窗口 <类型 = DOS头窗口类>
    变量 NT头窗口 <类型 = NT头窗口类>
    变量 导入表窗口 <类型 = 导入表窗口类>
    变量 导出表窗口 <类型 = 导出表窗口类>
    变量 节区表窗口 <类型 = 节区表窗口类>
    变量 ""
    变量 模块操作 <类型 = 模块操作类>

    方法 按钮_被单击 <接收事件 类型 = 整数 注释 = "当按钮被单击后发送此事件" 折叠>
    参数 来源对象 <类型 = 按钮 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    {
        如果 (来源对象 == 按钮_打开文件)
        {
            变量 文件对话框 <类型 = 通用对话框
                    过滤器 = "PE文件 (*.exe;*.dll)|*.exe;*.dll|可执行文件 (*.exe)|*.exe|动态链接库 (*.dll)|*.dll|所有文件 (*.*)|*.*">
            如果 (文件对话框.打开 (本对象) == 真)
            {
                编辑框_文件名.内容 = 文件对话框.文件名
                如果 (取程序 ().PE解析.打开文件 (文件对话框.文件名) == 假)
                {
                    信息框 (取程序 ().PE解析.取最后错误信息 (), 信息框按钮.警告图标, "警告")
                    清屏 ()
                }
                否则
                {
                    显示PE信息 ()
                }

            }
        }
        否则 (来源对象 == 按钮_打开模块)
        {
            变量 模块窗口 <类型 = 进程信息类>
            如果 (模块窗口.创建对话框 () == 1)
            {
                编辑框_文件名.内容 = 模块窗口.文件名
                // 打开模块的功能未写好,暂时改为打开文件
                // 如果 (取程序 ().PE解析.打开文件 (模块窗口.文件名) == 假)
                {
                    // 信息框 (取程序 ().PE解析.取最后错误信息 (), 信息框按钮.警告图标, "警告")
                    // 清屏 ()
                }
                // 否则
                {
                    // 显示PE信息 ()
                }
                如果 (取程序 ().PE解析.打开模块 (模块窗口.进程ID, 模块窗口.模块名称) == 假)
                {
                    信息框 (取程序 ().PE解析.取最后错误信息 (), 信息框按钮.警告图标, "警告")
                    清屏 ()
                }
                否则
                {
                    显示PE信息 ()

                }
            }

        }
        否则 (来源对象 == 按钮_另存为)
        {

            变量 文件对话框 <类型 = 通用对话框
                    过滤器 = "PE文件 (*.exe;*.dll)|*.exe;*.dll|可执行文件 (*.exe)|*.exe|动态链接库 (*.dll)|*.dll|所有文件 (*.*)|*.*"
                    "类型" = 保存文件>
            文件对话框.文件名 = 取文件名无路径部分 (编辑框_文件名.内容)
            如果 (文件对话框.打开 (本对象) == 真)
            {
                如果 (取程序 ().PE解析.保存数据 (文件对话框.文件名, 真) == 真)
                {
                    信息框 ("保存成功！", 信息框按钮.信息图标)
                }
                否则
                {
                    信息框 ("保存失败！", 信息框按钮.错误图标)

                }
            }

        }
        否则 (来源对象 == 按钮_DOS头)
        {
            DOS窗口.创建弹出子窗口 (本对象)

        }
        否则 (来源对象 == 按钮_HEX)
        {
            HEX查看器.创建弹出子窗口 (本对象)

        }
        否则 (来源对象 == 按钮_导入表)
        {
            导入表窗口.创建弹出子窗口 (本对象)

        }
        否则 (来源对象 == 按钮_导出表)
        {
            导出表窗口.创建弹出子窗口 (本对象)

        }
        否则 (来源对象 == 按钮_NT头)
        {
            NT头窗口.创建弹出子窗口 (本对象)

        }
        否则 (来源对象 == 按钮_节区表)
        {
            节区表窗口.创建弹出子窗口 (本对象)

        }
        返回 (0)
    }

    方法 显示PE信息 <折叠>
    {
        按钮_另存为.禁止 = 假
        按钮_DOS头.禁止 = 假
        按钮_NT头.禁止 = 假
        按钮_节区表.禁止 = 假
        按钮_HEX.禁止 = 假
        按钮_导入表.禁止 = 假

        变量 导出表头 <类型 = IMAGE_EXPORT_DIRECTORY>
        导出表头 = 取程序 ().PE解析.取导出表头 ()
        如果 (导出表头.NumberOfFunctions > 0)
        {
            按钮_导出表.禁止 = 假
            如果 (导出表窗口.取窗口句柄 () != 0)
            {
                导出表窗口.填表格 ()

            }
        }
        否则
        {
            如果 (导出表窗口.取窗口句柄 () != 0)
            {
                导出表窗口.关闭窗口 ()
            }

        }
        标签_文件类型.标题 = "文件类型: " + 选择 (取程序 ().PE解析.是否为64位 (), "64位PE", "32位PE")
        编辑框_入口点.内容 = 取十六进制文本 (取程序 ().PE解析.取入口点 (), 8)
        编辑框_基址.内容 = 取长整数十六进制文本 (取程序 ().PE解析.取映像基址 (), 选择 (取程序 ().PE解析.是否为64位 (), 16, 8))
        编辑框_映像大小.内容 = 取十六进制文本 (取程序 ().PE解析.取映像尺寸 (), 8)

        // 如果已经打开了子窗口,刷新内容
        如果 (HEX查看器.取窗口句柄 () != 0)
        {
            HEX查看器.填表格 ()
        }
        如果 (DOS窗口.取窗口句柄 () != 0)
        {
            DOS窗口.填表格 ()
        }
        如果 (NT头窗口.取窗口句柄 () != 0)
        {
            NT头窗口.填表格 ()
        }
        如果 (节区表窗口.取窗口句柄 () != 0)
        {
            节区表窗口.填表格 ()
        }
        如果 (导入表窗口.取窗口句柄 () != 0)
        {
            导入表窗口.填表格 ()
        }
        变量 子系统 <类型 = 整数>
        如果 (取程序 ().PE解析.是否为64位 ())
        {
            子系统 = (整数)取程序 ().PE解析.取NT头64 ().OptionalHeader.Subsystem
        }
        否则
        {
            子系统 = (整数)取程序 ().PE解析.取NT头32 ().OptionalHeader.Subsystem

        }
        分支判断 (子系统)
        {
            分支 (2)
            {
                标签_子系统.标题 = "子系统: WINDOWS GUI"
            }
            分支 (3)
            {
                标签_子系统.标题 = "子系统: WINDOWS CUI"
            }
            默认分支 ()
            {
                标签_子系统.标题 = "子系统: "
            }

        }

    }

    方法 清屏 <折叠>
    {
        标签_文件类型.标题 = "文件类型: "
        标签_子系统.标题 = "子系统: "
        编辑框_入口点.内容 = ""
        编辑框_基址.内容 = ""
        按钮_另存为.禁止 = 真
        按钮_DOS头.禁止 = 真
        按钮_NT头.禁止 = 真
        按钮_节区表.禁止 = 真
        按钮_HEX.禁止 = 真
        按钮_导入表.禁止 = 真
        按钮_导出表.禁止 = 真

    }

    方法 我的主窗口_文件被拖放 <接收事件 类型 = 整数 注释 = "当文件被拖放到本窗口组件上后,将发送本事件." 注释 = "注意: 仅当\"允许文件拖放\"属性被设置为真时,本事件才会被发送." 折叠>
    参数 来源对象 <类型 = 我的主窗口 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    参数 所拖放文件 <类型 = 文本数组类 注释 = "提供所有被拖放到本组件上的文件名,数组成员数必定大于0.">
    {
        编辑框_文件名.内容 = 所拖放文件.取成员 (0)
        如果 (取程序 ().PE解析.打开文件 (所拖放文件.取成员 (0)) == 假)
        {
            如果 (取最后错误 () == 0)  // 等于0说明系统API没报错,不是打开文件时出错,而是打开的不是PE文件
            {
                信息框 ("所打开的文件不是可执行文件", 信息框按钮.警告图标, "警告")
            }
            否则
            {
                信息框 ("打开文件失败!\r\n\r\n" + 取最后错误信息 (), 信息框按钮.错误图标, "错误")

            }
            清屏 ()
        }
        否则
        {
            显示PE信息 ()

        }
        返回 (0)
    }
}

类 DOS头窗口类 <公开 基础类 = 窗口 折叠 隐藏值属性 = "0" @视窗.布局 = "client_size = \"600, 420\"" 标题 = "DOS头信息" 最小化按钮 = 假>
{
    变量 表格_信息 <类型 = 表格 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 101\r\npos = \"20, 20, 561, 383\"" 表头行数 = 1 表头列数 = 0
            列数 = 6 行数 = 20 列宽 = 60 是否可编辑 = 假 允许调整行高 = 假 点燃色 = 0x8050FF>

    方法 填表格 <公开 类型 = 整数 折叠>
    {
        变量 DOS头 <类型 = IMAGE_DOS_HEADER>
        表格_信息.清空数据 ()
        表格_信息.置列宽 (0, 80)
        表格_信息.置列宽 (1, 140)
        表格_信息.置列宽 (5, 140)

        表格_信息.置数据 (0, 0, 1, "名称")
        表格_信息.置数据 (0, 1, 1, "备注")
        表格_信息.置数据 (0, 2, 1, "偏移")
        表格_信息.置数据 (0, 3, 1, "类型")
        表格_信息.置数据 (0, 4, 1, "值")

        DOS头 = 取程序 ().PE解析.取DOS头 ()

        表格_信息.置数据 (1, 0, 1, "e_magic")
        表格_信息.置数据 (1, 1, 1, "文件头标志")
        表格_信息.置数据 (1, 2, 1, 取短整数十六进制文本 (0, 4))
        表格_信息.置数据 (1, 3, 1, "WORD")
        表格_信息.置数据 (1, 4, 1, 取短整数十六进制文本 (DOS头.e_magic, 4))
        如果 (DOS头.e_magic == 0x5A4D)
        {
            表格_信息.置数据 (1, 5, 1, "IMAGE_DOS_SIGNATURE")
        }

        表格_信息.置数据 (2, 0, 1, "e_cblp")
        表格_信息.置数据 (2, 1, 1, "文件最后页字节数")
        表格_信息.置数据 (2, 2, 1, 取短整数十六进制文本 (2, 4))
        表格_信息.置数据 (2, 3, 1, "WORD")
        表格_信息.置数据 (2, 4, 1, 取短整数十六进制文本 (DOS头.e_cblp, 4))

        表格_信息.置数据 (3, 0, 1, "e_cp")
        表格_信息.置数据 (3, 1, 1, "文件页数")
        表格_信息.置数据 (3, 2, 1, 取短整数十六进制文本 (4, 4))
        表格_信息.置数据 (3, 3, 1, "WORD")
        表格_信息.置数据 (3, 4, 1, 取短整数十六进制文本 (DOS头.e_cp, 4))

        表格_信息.置数据 (4, 0, 1, "e_crlc")
        表格_信息.置数据 (4, 1, 1, "重定位个数")
        表格_信息.置数据 (4, 2, 1, 取短整数十六进制文本 (6, 4))
        表格_信息.置数据 (4, 3, 1, "WORD")
        表格_信息.置数据 (4, 4, 1, 取短整数十六进制文本 (DOS头.e_crlc, 4))

        表格_信息.置数据 (5, 0, 1, "e_cparhdr")
        表格_信息.置数据 (5, 1, 1, "头部尺寸(段落单位)")
        表格_信息.置数据 (5, 2, 1, 取短整数十六进制文本 (8, 4))
        表格_信息.置数据 (5, 3, 1, "WORD")
        表格_信息.置数据 (5, 4, 1, 取短整数十六进制文本 (DOS头.e_cparhdr, 4))

        表格_信息.置数据 (6, 0, 1, "e_minalloc")
        表格_信息.置数据 (6, 1, 1, "所需最小附加段")
        表格_信息.置数据 (6, 2, 1, 取短整数十六进制文本 (10, 4))
        表格_信息.置数据 (6, 3, 1, "WORD")
        表格_信息.置数据 (6, 4, 1, 取短整数十六进制文本 (DOS头.e_minalloc, 4))

        表格_信息.置数据 (7, 0, 1, "e_maxalloc")
        表格_信息.置数据 (7, 1, 1, "所需最大附加段")
        表格_信息.置数据 (7, 2, 1, 取短整数十六进制文本 (12, 4))
        表格_信息.置数据 (7, 3, 1, "WORD")
        表格_信息.置数据 (7, 4, 1, 取短整数十六进制文本 (DOS头.e_maxalloc, 4))

        表格_信息.置数据 (8, 0, 1, "e_ss")
        表格_信息.置数据 (8, 1, 1, "初始的SS值")
        表格_信息.置数据 (8, 2, 1, 取短整数十六进制文本 (14, 4))
        表格_信息.置数据 (8, 3, 1, "WORD")
        表格_信息.置数据 (8, 4, 1, 取短整数十六进制文本 (DOS头.e_ss, 4))

        表格_信息.置数据 (9, 0, 1, "e_sp")
        表格_信息.置数据 (9, 1, 1, "初始的SP值")
        表格_信息.置数据 (9, 2, 1, 取短整数十六进制文本 (16, 4))
        表格_信息.置数据 (9, 3, 1, "WORD")
        表格_信息.置数据 (9, 4, 1, 取短整数十六进制文本 (DOS头.e_sp, 4))

        表格_信息.置数据 (10, 0, 1, "e_csum")
        表格_信息.置数据 (10, 1, 1, "校验和")
        表格_信息.置数据 (10, 2, 1, 取短整数十六进制文本 (18, 4))
        表格_信息.置数据 (10, 3, 1, "WORD")
        表格_信息.置数据 (10, 4, 1, 取短整数十六进制文本 (DOS头.e_csum, 4))

        表格_信息.置数据 (11, 0, 1, "e_ip")
        表格_信息.置数据 (11, 1, 1, "初始的IP值")
        表格_信息.置数据 (11, 2, 1, 取短整数十六进制文本 (20, 4))
        表格_信息.置数据 (11, 3, 1, "WORD")
        表格_信息.置数据 (11, 4, 1, 取短整数十六进制文本 (DOS头.e_ip, 4))

        表格_信息.置数据 (12, 0, 1, "e_cs")
        表格_信息.置数据 (12, 1, 1, "初始的CS值")
        表格_信息.置数据 (12, 2, 1, 取短整数十六进制文本 (22, 4))
        表格_信息.置数据 (12, 3, 1, "WORD")
        表格_信息.置数据 (12, 4, 1, 取短整数十六进制文本 (DOS头.e_cs, 4))

        表格_信息.置数据 (13, 0, 1, "e_lfarlc")
        表格_信息.置数据 (13, 1, 1, "重定位表偏移地址")
        表格_信息.置数据 (13, 2, 1, 取短整数十六进制文本 (24, 4))
        表格_信息.置数据 (13, 3, 1, "WORD")
        表格_信息.置数据 (13, 4, 1, 取短整数十六进制文本 (DOS头.e_lfarlc, 4))

        表格_信息.置数据 (14, 0, 1, "e_ovno")
        表格_信息.置数据 (14, 1, 1, "覆盖号")
        表格_信息.置数据 (14, 2, 1, 取短整数十六进制文本 (26, 4))
        表格_信息.置数据 (14, 3, 1, "WORD")
        表格_信息.置数据 (14, 4, 1, 取短整数十六进制文本 (DOS头.e_ovno, 4))

        表格_信息.置数据 (15, 0, 1, "e_res")
        表格_信息.置数据 (15, 1, 1, "保留字")
        表格_信息.置数据 (15, 2, 1, 取短整数十六进制文本 (28, 4))
        表格_信息.置数据 (15, 3, 1, "WORD [4]")
        表格_信息.置数据 (15, 4, 1, 取短整数十六进制文本 (0, 4))

        表格_信息.置数据 (16, 0, 1, "e_oemid")
        表格_信息.置数据 (16, 1, 1, "OEM标识符")
        表格_信息.置数据 (16, 2, 1, 取短整数十六进制文本 (36, 4))
        表格_信息.置数据 (16, 3, 1, "WORD")
        表格_信息.置数据 (16, 4, 1, 取短整数十六进制文本 (DOS头.e_oemid, 4))

        表格_信息.置数据 (17, 0, 1, "e_oeminfo")
        表格_信息.置数据 (17, 1, 1, "OEM信息")
        表格_信息.置数据 (17, 2, 1, 取短整数十六进制文本 (38, 4))
        表格_信息.置数据 (17, 3, 1, "WORD")
        表格_信息.置数据 (17, 4, 1, 取短整数十六进制文本 (DOS头.e_oeminfo, 4))

        表格_信息.置数据 (18, 0, 1, "e_res2")
        表格_信息.置数据 (18, 1, 1, "保留字")
        表格_信息.置数据 (18, 2, 1, 取短整数十六进制文本 (40, 4))
        表格_信息.置数据 (18, 3, 1, "WORD [10]")
        表格_信息.置数据 (18, 4, 1, 取短整数十六进制文本 (0, 4))

        表格_信息.置数据 (19, 0, 1, "e_lfanew")
        表格_信息.置数据 (19, 1, 1, "NT头偏移地址")
        表格_信息.置数据 (19, 2, 1, 取短整数十六进制文本 (60, 4))
        表格_信息.置数据 (19, 3, 1, "DWORD")
        表格_信息.置数据 (19, 4, 1, 取十六进制文本 (DOS头.e_lfanew, 4))

        返回 (0)
    }

    方法 DOS头窗口类_创建完毕 <接收事件 类型 = 整数 注释 = "当本组件及其中所有子组件均被创建完毕后发送此事件." 折叠>
    参数 来源对象 <类型 = DOS头窗口类 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    {
        填表格 ()
        返回 (0)
    }
}

类 NT头窗口类 <公开 基础类 = 窗口 折叠 隐藏值属性 = "0" @视窗.布局 = "client_size = \"800, 420\"" 标题 = "NT头信息" 最小化按钮 = 假>
{
    变量 表格_信息 <类型 = 表格 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 101\r\npos = \"200, 20, 580, 380\"" 表头行数 = 1 表头列数 = 0
            列数 = 6 行数 = 1 列宽 = 60 点燃色 = 0x8050FF 允许调整行高 = 假 允许调整列宽 = 真 是否可编辑 = 假>
    变量 树形框_NT <类型 = 树形框 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 102\r\npos = \"20, 20, 170, 380\""
            项目 = "IMAGE_NT_HEADERS\n0\n-1\n0\n0\n1\n0\n1\nFileHeader\n0\n-1\n0\n0\n0\n0\n2\nOptionalHeader\n0\n-1\n0\n0\n1\n0\n2\nDataDirectory\n0\n-1\n0\n0\n0\n0\n3"
            行高 = 32 显示连线 = 真 显示加减框 = 真 始终显示选择项 = 真 允许编辑 = 假 显示根部线 = 假>
    变量 ""
    变量 NT头32 <类型 = IMAGE_NT_HEADERS32>
    变量 NT头64 <类型 = IMAGE_NT_HEADERS64>

    方法 填表格 <公开 类型 = 整数 折叠>
    {
        表格_信息.清空数据 ()
        表格_信息.置列宽 (0, 80)
        表格_信息.置列宽 (1, 140)
        表格_信息.置列宽 (2, 60)
        表格_信息.置列宽 (3, 80)
        表格_信息.置列宽 (4, 60)
        表格_信息.置列宽 (5, 140)

        表格_信息.置数据 (0, 0, 1, "名称")
        表格_信息.置数据 (0, 1, 1, "备注")
        表格_信息.置数据 (0, 2, 1, "偏移")
        表格_信息.置数据 (0, 3, 1, "类型")
        表格_信息.置数据 (0, 4, 1, "值")

        如果 (取程序 ().PE解析.是否为64位 ())
        {
            NT头64 = 取程序 ().PE解析.取NT头64 ()
        }
        否则
        {
            NT头32 = 取程序 ().PE解析.取NT头32 ()

        }
        分支判断 (树形框_NT.现行选中项)
        {
            分支 (0)
            {
                填NT头 ()

            }
            分支 (1)
            {
                填文件头 ()

            }
            分支 (2)
            {
                填可选头 ()

            }
            分支 (3)
            {
                填目录 ()
            }
        }
        返回 (0)
    }

    方法 填NT头 <折叠>
    {
        表格_信息.行数 = 4
        如果 (取程序 ().PE解析.是否为64位 () == 假)
        {
            表格_信息.置数据 (1, 0, 1, "Signature")
            表格_信息.置数据 (1, 1, 1, "PE文件的标识")
            表格_信息.置数据 (1, 2, 1, 取短整数十六进制文本 (0, 4))
            表格_信息.置数据 (1, 3, 1, "WORD")
            表格_信息.置数据 (1, 4, 1, 取十六进制文本 (NT头32.Signature, 8))
            分支判断 (NT头32.Signature)
            {
                分支 (0x5A4D)
                {
                    表格_信息.置数据 (1, 5, 1, "IMAGE_DOS_SIGNATURE")
                }
                分支 (0x454E)
                {
                    表格_信息.置数据 (1, 5, 1, "IMAGE_OS2_SIGNATURE")
                }
                分支 (0x454C)
                {
                    表格_信息.置数据 (1, 5, 1, "IMAGE_VXD_SIGNATURE")
                }
                分支 (0x00004550)
                {
                    表格_信息.置数据 (1, 5, 1, "IMAGE_NT_SIGNATURE")
                }

            }
            表格_信息.置数据 (2, 0, 1, "FileHeader")
            表格_信息.置数据 (2, 1, 1, "映像文件头结构体")
            表格_信息.置数据 (2, 2, 1, 取短整数十六进制文本 (4, 4))
            表格_信息.置数据 (2, 3, 1, "IMAGE_FILE_HEADER")
            表格_信息.置数据 (2, 4, 1, 取十六进制文本 (0, 8))

            表格_信息.置数据 (3, 0, 1, "OptionalHeader")
            表格_信息.置数据 (3, 1, 1, "映像可选头结构体")
            表格_信息.置数据 (3, 2, 1, 取短整数十六进制文本 (24, 4))
            表格_信息.置数据 (3, 3, 1, "IMAGE_OPTIONAL_HEADER32")
            表格_信息.置数据 (3, 4, 1, 取十六进制文本 (0, 8))

        }
        否则
        {
            表格_信息.置数据 (1, 0, 1, "Signature")
            表格_信息.置数据 (1, 1, 1, "PE文件的标识")
            表格_信息.置数据 (1, 2, 1, 取短整数十六进制文本 (0, 4))
            表格_信息.置数据 (1, 3, 1, "WORD")
            表格_信息.置数据 (1, 4, 1, 取十六进制文本 (NT头64.Signature, 8))
            分支判断 (NT头64.Signature)
            {
                分支 (0x5A4D)
                {
                    表格_信息.置数据 (1, 5, 1, "IMAGE_DOS_SIGNATURE")
                }
                分支 (0x454E)
                {
                    表格_信息.置数据 (1, 5, 1, "IMAGE_OS2_SIGNATURE")
                }
                分支 (0x454C)
                {
                    表格_信息.置数据 (1, 5, 1, "IMAGE_VXD_SIGNATURE")
                }
                分支 (0x00004550)
                {
                    表格_信息.置数据 (1, 5, 1, "IMAGE_NT_SIGNATURE")
                }

            }
            表格_信息.置数据 (2, 0, 1, "FileHeader")
            表格_信息.置数据 (2, 1, 1, "映像文件头结构体")
            表格_信息.置数据 (2, 2, 1, 取短整数十六进制文本 (4, 4))
            表格_信息.置数据 (2, 3, 1, "IMAGE_FILE_HEADER")
            表格_信息.置数据 (2, 4, 1, 取十六进制文本 (0, 8))

            表格_信息.置数据 (3, 0, 1, "OptionalHeader")
            表格_信息.置数据 (3, 1, 1, "映像可选头结构体")
            表格_信息.置数据 (3, 2, 1, 取短整数十六进制文本 (24, 4))
            表格_信息.置数据 (3, 3, 1, "IMAGE_OPTIONAL_HEADER64")
            表格_信息.置数据 (3, 4, 1, 取十六进制文本 (0, 8))

        }
    }

    方法 填文件头 <折叠>
    {
        表格_信息.行数 = 8
        如果 (取程序 ().PE解析.是否为64位 () == 假)
        {
            表格_信息.置数据 (1, 0, 1, "Machine")
            表格_信息.置数据 (1, 1, 1, "目标CPU类型")
            表格_信息.置数据 (1, 2, 1, 取短整数十六进制文本 (0, 4))
            表格_信息.置数据 (1, 3, 1, "WORD")
            表格_信息.置数据 (1, 4, 1, 取短整数十六进制文本 (NT头32.FileHeader.Machine, 4))
            分支判断 ((整数)NT头32.FileHeader.Machine)
            {
                分支 (0x014c)
                {
                    表格_信息.置数据 (1, 5, 1, "IMAGE_FILE_MACHINE_I386")
                }
                分支 (0x0200)
                {
                    表格_信息.置数据 (1, 5, 1, "IMAGE_FILE_MACHINE_IA64")
                }
                分支 (0x8664)
                {
                    表格_信息.置数据 (1, 5, 1, "IMAGE_FILE_MACHINE_AMD64")
                }

            }
            表格_信息.置数据 (2, 0, 1, "NumberOfSections")
            表格_信息.置数据 (2, 1, 1, "节区的数目")
            表格_信息.置数据 (2, 2, 1, 取短整数十六进制文本 (2, 4))
            表格_信息.置数据 (2, 3, 1, "WORD")
            表格_信息.置数据 (2, 4, 1, 取短整数十六进制文本 (NT头32.FileHeader.NumberOfSections, 4))

            表格_信息.置数据 (3, 0, 1, "TimeDateStamp")
            表格_信息.置数据 (3, 1, 1, "文件创建的时间戳")
            表格_信息.置数据 (3, 2, 1, 取短整数十六进制文本 (4, 4))
            表格_信息.置数据 (3, 3, 1, "DWORD")
            表格_信息.置数据 (3, 4, 1, 取十六进制文本 (NT头32.FileHeader.TimeDateStamp, 8))
            表格_信息.置数据 (3, 5, 1, 时间到文本 (时间戳到时间 (NT头32.FileHeader.TimeDateStamp)))

            表格_信息.置数据 (4, 0, 1, "PointerToSymbolTable")
            表格_信息.置数据 (4, 1, 1, "COFF符号表格位置")
            表格_信息.置数据 (4, 2, 1, 取短整数十六进制文本 (8, 4))
            表格_信息.置数据 (4, 3, 1, "DWORD")
            表格_信息.置数据 (4, 4, 1, 取十六进制文本 (NT头32.FileHeader.PointerToSymbolTable, 8))

            表格_信息.置数据 (5, 0, 1, "NumberOfSymbols")
            表格_信息.置数据 (5, 1, 1, "COFF符号表格数目")
            表格_信息.置数据 (5, 2, 1, 取短整数十六进制文本 (12, 4))
            表格_信息.置数据 (5, 3, 1, "DWORD")
            表格_信息.置数据 (5, 4, 1, 取十六进制文本 (NT头32.FileHeader.NumberOfSymbols, 8))

            表格_信息.置数据 (6, 0, 1, "SizeOfOptionalHeader")
            表格_信息.置数据 (6, 1, 1, "OptionalHeader结构体大小")
            表格_信息.置数据 (6, 2, 1, 取短整数十六进制文本 (16, 4))
            表格_信息.置数据 (6, 3, 1, "WORD")
            表格_信息.置数据 (6, 4, 1, 取短整数十六进制文本 (NT头32.FileHeader.SizeOfOptionalHeader, 8))

            表格_信息.置数据 (7, 0, 1, "Characteristics")
            表格_信息.置数据 (7, 1, 1, "文件属性标志")
            表格_信息.置数据 (7, 2, 1, 取短整数十六进制文本 (18, 4))
            表格_信息.置数据 (7, 3, 1, "WORD")
            表格_信息.置数据 (7, 4, 1, 取短整数十六进制文本 (NT头32.FileHeader.Characteristics, 8))

        }
        否则
        {
            表格_信息.置数据 (1, 0, 1, "Machine")
            表格_信息.置数据 (1, 1, 1, "目标CPU类型")
            表格_信息.置数据 (1, 2, 1, 取短整数十六进制文本 (0, 4))
            表格_信息.置数据 (1, 3, 1, "WORD")
            表格_信息.置数据 (1, 4, 1, 取短整数十六进制文本 (NT头64.FileHeader.Machine, 4))
            分支判断 ((整数)NT头64.FileHeader.Machine)
            {
                分支 (0x014c)
                {
                    表格_信息.置数据 (1, 5, 1, "IMAGE_FILE_MACHINE_I386")
                }
                分支 (0x0200)
                {
                    表格_信息.置数据 (1, 5, 1, "IMAGE_FILE_MACHINE_IA64")
                }
                分支 (0x8664)
                {
                    表格_信息.置数据 (1, 5, 1, "IMAGE_FILE_MACHINE_AMD64")
                }

            }
            表格_信息.置数据 (2, 0, 1, "NumberOfSections")
            表格_信息.置数据 (2, 1, 1, "节区的数目")
            表格_信息.置数据 (2, 2, 1, 取短整数十六进制文本 (2, 4))
            表格_信息.置数据 (2, 3, 1, "WORD")
            表格_信息.置数据 (2, 4, 1, 取短整数十六进制文本 (NT头64.FileHeader.NumberOfSections, 4))

            表格_信息.置数据 (3, 0, 1, "TimeDateStamp")
            表格_信息.置数据 (3, 1, 1, "文件创建的时间戳")
            表格_信息.置数据 (3, 2, 1, 取短整数十六进制文本 (4, 4))
            表格_信息.置数据 (3, 3, 1, "DWORD")
            表格_信息.置数据 (3, 4, 1, 取十六进制文本 (NT头64.FileHeader.TimeDateStamp, 8))
            表格_信息.置数据 (3, 5, 1, 时间到文本 (时间戳到时间 (NT头64.FileHeader.TimeDateStamp)))

            表格_信息.置数据 (4, 0, 1, "PointerToSymbolTable")
            表格_信息.置数据 (4, 1, 1, "COFF符号表格位置")
            表格_信息.置数据 (4, 2, 1, 取短整数十六进制文本 (8, 4))
            表格_信息.置数据 (4, 3, 1, "DWORD")
            表格_信息.置数据 (4, 4, 1, 取十六进制文本 (NT头64.FileHeader.PointerToSymbolTable, 8))

            表格_信息.置数据 (5, 0, 1, "NumberOfSymbols")
            表格_信息.置数据 (5, 1, 1, "COFF符号表格数目")
            表格_信息.置数据 (5, 2, 1, 取短整数十六进制文本 (12, 4))
            表格_信息.置数据 (5, 3, 1, "DWORD")
            表格_信息.置数据 (5, 4, 1, 取十六进制文本 (NT头64.FileHeader.NumberOfSymbols, 8))

            表格_信息.置数据 (6, 0, 1, "SizeOfOptionalHeader")
            表格_信息.置数据 (6, 1, 1, "OptionalHeader结构体大小")
            表格_信息.置数据 (6, 2, 1, 取短整数十六进制文本 (16, 4))
            表格_信息.置数据 (6, 3, 1, "WORD")
            表格_信息.置数据 (6, 4, 1, 取短整数十六进制文本 (NT头64.FileHeader.SizeOfOptionalHeader, 8))

            表格_信息.置数据 (7, 0, 1, "Characteristics")
            表格_信息.置数据 (7, 1, 1, "文件属性标志")
            表格_信息.置数据 (7, 2, 1, 取短整数十六进制文本 (18, 4))
            表格_信息.置数据 (7, 3, 1, "WORD")
            表格_信息.置数据 (7, 4, 1, 取短整数十六进制文本 (NT头64.FileHeader.Characteristics, 8))

        }
    }

    方法 填可选头 <折叠>
    {
        表格_信息.行数 = 32
        如果 (取程序 ().PE解析.是否为64位 () == 假)
        {
            表格_信息.置数据 (1, 0, 1, "Magic")
            表格_信息.置数据 (1, 1, 1, "目标CPU类型")
            表格_信息.置数据 (1, 2, 1, 取短整数十六进制文本 (0, 4))
            表格_信息.置数据 (1, 3, 1, "WORD")
            表格_信息.置数据 (1, 4, 1, 取短整数十六进制文本 (NT头32.OptionalHeader.Magic, 4))
            分支判断 ((整数)NT头32.OptionalHeader.Magic)
            {
                分支 (0x10b)
                {
                    表格_信息.置数据 (1, 5, 1, "IMAGE_NT_OPTIONAL_HDR32_MAGIC")
                }
                分支 (0x20b)
                {
                    表格_信息.置数据 (1, 5, 1, "IMAGE_NT_OPTIONAL_HDR64_MAGIC")
                }
                分支 (0x107)
                {
                    表格_信息.置数据 (1, 5, 1, "IMAGE_ROM_OPTIONAL_HDR_MAGIC")
                }

            }
            表格_信息.置数据 (2, 0, 1, "MajorLinkerVersion")
            表格_信息.置数据 (2, 1, 1, "链接器的主版本号")
            表格_信息.置数据 (2, 2, 1, 取短整数十六进制文本 (2, 4))
            表格_信息.置数据 (2, 3, 1, "BYTE")
            表格_信息.置数据 (2, 4, 1, 取字节十六进制文本 (NT头32.OptionalHeader.MajorLinkerVersion))

            表格_信息.置数据 (3, 0, 1, "MinorLinkerVersion")
            表格_信息.置数据 (3, 1, 1, "链接器的副版本号")
            表格_信息.置数据 (3, 2, 1, 取短整数十六进制文本 (3, 4))
            表格_信息.置数据 (3, 3, 1, "BYTE")
            表格_信息.置数据 (3, 4, 1, 取字节十六进制文本 (NT头32.OptionalHeader.MinorLinkerVersion))

            表格_信息.置数据 (4, 0, 1, "SizeOfCode")
            表格_信息.置数据 (4, 1, 1, "可执行代码的大小")
            表格_信息.置数据 (4, 2, 1, 取短整数十六进制文本 (4, 4))
            表格_信息.置数据 (4, 3, 1, "DWORD")
            表格_信息.置数据 (4, 4, 1, 取十六进制文本 (NT头32.OptionalHeader.SizeOfCode, 8))

            表格_信息.置数据 (5, 0, 1, "SizeOfInitializedData")
            表格_信息.置数据 (5, 1, 1, "已初始化数据大小")
            表格_信息.置数据 (5, 2, 1, 取短整数十六进制文本 (8, 4))
            表格_信息.置数据 (5, 3, 1, "DWORD")
            表格_信息.置数据 (5, 4, 1, 取十六进制文本 (NT头32.OptionalHeader.SizeOfInitializedData, 8))

            表格_信息.置数据 (6, 0, 1, "SizeOfUninitializedData")
            表格_信息.置数据 (6, 1, 1, "未初始化数据大小")
            表格_信息.置数据 (6, 2, 1, 取短整数十六进制文本 (12, 4))
            表格_信息.置数据 (6, 3, 1, "DWORD")
            表格_信息.置数据 (6, 4, 1, 取十六进制文本 (NT头32.OptionalHeader.SizeOfUninitializedData, 8))

            表格_信息.置数据 (7, 0, 1, "AddressOfEntryPoint")
            表格_信息.置数据 (7, 1, 1, "入口点偏移量")
            表格_信息.置数据 (7, 2, 1, 取短整数十六进制文本 (16, 4))
            表格_信息.置数据 (7, 3, 1, "DWORD")
            表格_信息.置数据 (7, 4, 1, 取十六进制文本 (NT头32.OptionalHeader.AddressOfEntryPoint, 8))

            表格_信息.置数据 (8, 0, 1, "BaseOfCode")
            表格_信息.置数据 (8, 1, 1, "可执行代码偏移量")
            表格_信息.置数据 (8, 2, 1, 取短整数十六进制文本 (20, 4))
            表格_信息.置数据 (8, 3, 1, "DWORD")
            表格_信息.置数据 (8, 4, 1, 取十六进制文本 (NT头32.OptionalHeader.BaseOfCode, 8))

            表格_信息.置数据 (9, 0, 1, "BaseOfData")
            表格_信息.置数据 (9, 1, 1, "已初始化数据偏移量")
            表格_信息.置数据 (9, 2, 1, 取短整数十六进制文本 (24, 4))
            表格_信息.置数据 (9, 3, 1, "DWORD")
            表格_信息.置数据 (9, 4, 1, 取十六进制文本 (NT头32.OptionalHeader.BaseOfData, 8))

            表格_信息.置数据 (10, 0, 1, "ImageBase")
            表格_信息.置数据 (10, 1, 1, "优先装载地址")
            表格_信息.置数据 (10, 2, 1, 取短整数十六进制文本 (28, 4))
            表格_信息.置数据 (10, 3, 1, "DWORD")
            表格_信息.置数据 (10, 4, 1, 取十六进制文本 (NT头32.OptionalHeader.ImageBase, 8))

            表格_信息.置数据 (11, 0, 1, "SectionAlignment")
            表格_信息.置数据 (11, 1, 1, "内存节对齐粒度")
            表格_信息.置数据 (11, 2, 1, 取短整数十六进制文本 (32, 4))
            表格_信息.置数据 (11, 3, 1, "DWORD")
            表格_信息.置数据 (11, 4, 1, 取十六进制文本 (NT头32.OptionalHeader.SectionAlignment, 8))

            表格_信息.置数据 (12, 0, 1, "FileAlignment")
            表格_信息.置数据 (12, 1, 1, "文件节对齐粒度")
            表格_信息.置数据 (12, 2, 1, 取短整数十六进制文本 (36, 4))
            表格_信息.置数据 (12, 3, 1, "DWORD")
            表格_信息.置数据 (12, 4, 1, 取十六进制文本 (NT头32.OptionalHeader.FileAlignment, 8))

            表格_信息.置数据 (13, 0, 1, "MajorOperatingSystemVersion")
            表格_信息.置数据 (13, 1, 1, "系统最低主版本号")
            表格_信息.置数据 (13, 2, 1, 取短整数十六进制文本 (38, 4))
            表格_信息.置数据 (13, 3, 1, "WORD")
            表格_信息.置数据 (13, 4, 1, 取短整数十六进制文本 (NT头32.OptionalHeader.MajorOperatingSystemVersion, 4))

            表格_信息.置数据 (14, 0, 1, "MinorOperatingSystemVersion")
            表格_信息.置数据 (14, 1, 1, "系统最低副版本号")
            表格_信息.置数据 (14, 2, 1, 取短整数十六进制文本 (40, 4))
            表格_信息.置数据 (14, 3, 1, "WORD")
            表格_信息.置数据 (14, 4, 1, 取短整数十六进制文本 (NT头32.OptionalHeader.MinorOperatingSystemVersion, 4))

            表格_信息.置数据 (15, 0, 1, "MajorImageVersion")
            表格_信息.置数据 (15, 1, 1, "主映像文件版本")
            表格_信息.置数据 (15, 2, 1, 取短整数十六进制文本 (42, 4))
            表格_信息.置数据 (15, 3, 1, "WORD")
            表格_信息.置数据 (15, 4, 1, 取短整数十六进制文本 (NT头32.OptionalHeader.MajorImageVersion, 4))

            表格_信息.置数据 (16, 0, 1, "MinorImageVersion")
            表格_信息.置数据 (16, 1, 1, "副映像文件版本")
            表格_信息.置数据 (16, 2, 1, 取短整数十六进制文本 (44, 4))
            表格_信息.置数据 (16, 3, 1, "WORD")
            表格_信息.置数据 (16, 4, 1, 取短整数十六进制文本 (NT头32.OptionalHeader.MinorImageVersion, 4))

            表格_信息.置数据 (17, 0, 1, "MajorSubsystemVersion")
            表格_信息.置数据 (17, 1, 1, "子系统主版本号")
            表格_信息.置数据 (17, 2, 1, 取短整数十六进制文本 (46, 4))
            表格_信息.置数据 (17, 3, 1, "WORD")
            表格_信息.置数据 (17, 4, 1, 取短整数十六进制文本 (NT头32.OptionalHeader.MajorSubsystemVersion, 4))

            表格_信息.置数据 (18, 0, 1, "MinorSubsystemVersion")
            表格_信息.置数据 (18, 1, 1, "子系统副版本号")
            表格_信息.置数据 (18, 2, 1, 取短整数十六进制文本 (48, 4))
            表格_信息.置数据 (18, 3, 1, "WORD")
            表格_信息.置数据 (18, 4, 1, 取短整数十六进制文本 (NT头32.OptionalHeader.MinorSubsystemVersion, 4))

            表格_信息.置数据 (19, 0, 1, "Win32VersionValue")
            表格_信息.置数据 (19, 1, 1, "Win32版本值")
            表格_信息.置数据 (19, 2, 1, 取短整数十六进制文本 (50, 4))
            表格_信息.置数据 (19, 3, 1, "DWORD")
            表格_信息.置数据 (19, 4, 1, 取十六进制文本 (NT头32.OptionalHeader.Win32VersionValue, 8))

            表格_信息.置数据 (20, 0, 1, "SizeOfImage")
            表格_信息.置数据 (20, 1, 1, "映像尺寸")
            表格_信息.置数据 (20, 2, 1, 取短整数十六进制文本 (54, 4))
            表格_信息.置数据 (20, 3, 1, "DWORD")
            表格_信息.置数据 (20, 4, 1, 取十六进制文本 (NT头32.OptionalHeader.SizeOfImage, 8))

            表格_信息.置数据 (21, 0, 1, "SizeOfHeaders")
            表格_信息.置数据 (21, 1, 1, "所有头的大小")
            表格_信息.置数据 (21, 2, 1, 取短整数十六进制文本 (58, 4))
            表格_信息.置数据 (21, 3, 1, "DWORD")
            表格_信息.置数据 (21, 4, 1, 取十六进制文本 (NT头32.OptionalHeader.SizeOfHeaders, 8))

            表格_信息.置数据 (22, 0, 1, "CheckSum")
            表格_信息.置数据 (22, 1, 1, "校验和")
            表格_信息.置数据 (22, 2, 1, 取短整数十六进制文本 (62, 4))
            表格_信息.置数据 (22, 3, 1, "DWORD")
            表格_信息.置数据 (22, 4, 1, 取十六进制文本 (NT头32.OptionalHeader.CheckSum, 8))

            表格_信息.置数据 (23, 0, 1, "Subsystem")
            表格_信息.置数据 (23, 1, 1, "子系统")
            表格_信息.置数据 (23, 2, 1, 取短整数十六进制文本 (66, 4))
            表格_信息.置数据 (23, 3, 1, "WORD")
            表格_信息.置数据 (23, 4, 1, 取十六进制文本 (NT头32.OptionalHeader.Subsystem, 8))
            分支判断 ((整数)NT头32.OptionalHeader.Subsystem)
            {
                分支 (2)
                {
                    表格_信息.置数据 (23, 5, 1, "IMAGE_SUBSYSTEM_WINDOWS_GUI")
                }
                分支 (3)
                {
                    表格_信息.置数据 (23, 5, 1, "IMAGE_SUBSYSTEM_WINDOWS_CUI")
                }
            }

            表格_信息.置数据 (24, 0, 1, "DllCharacteristics")
            表格_信息.置数据 (24, 1, 1, "DLL特性")
            表格_信息.置数据 (24, 2, 1, 取短整数十六进制文本 (70, 4))
            表格_信息.置数据 (24, 3, 1, "WORD")
            表格_信息.置数据 (24, 4, 1, 取十六进制文本 (NT头32.OptionalHeader.DllCharacteristics, 8))
            分支判断 ((整数)NT头32.OptionalHeader.DllCharacteristics)
            {
                分支 (0x0020)
                {
                    表格_信息.置数据 (24, 5, 1, "IMAGE_DLLCHARACTERISTICS_HIGH_ENTROPY_VA")
                }
                分支 (0x0040)
                {
                    表格_信息.置数据 (24, 5, 1, "IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE")
                }
                分支 (0x0080)
                {
                    表格_信息.置数据 (24, 5, 1, "IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY")
                }
                分支 (0x0100)
                {
                    表格_信息.置数据 (24, 5, 1, "IMAGE_DLLCHARACTERISTICS_NX_COMPAT")
                }
                分支 (0x0200)
                {
                    表格_信息.置数据 (24, 5, 1, "IMAGE_DLLCHARACTERISTICS_NO_ISOLATION")
                }
                分支 (0x0400)
                {
                    表格_信息.置数据 (24, 5, 1, "IMAGE_DLLCHARACTERISTICS_NO_SEH")
                }
                分支 (0x0800)
                {
                    表格_信息.置数据 (24, 5, 1, "IMAGE_DLLCHARACTERISTICS_NO_BIND")
                }
                分支 (0x1000)
                {
                    表格_信息.置数据 (24, 5, 1, "IMAGE_DLLCHARACTERISTICS_APPCONTAINER")
                }
                分支 (0x2000)
                {
                    表格_信息.置数据 (24, 5, 1, "IMAGE_DLLCHARACTERISTICS_WDM_DRIVER")
                }
                分支 (0x4000)
                {
                    表格_信息.置数据 (24, 5, 1, "IMAGE_DLLCHARACTERISTICS_GUARD_CF")
                }
                分支 (0x8000)
                {
                    表格_信息.置数据 (24, 5, 1, "IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE")
                }

            }

            表格_信息.置数据 (25, 0, 1, "SizeOfStackReserve")
            表格_信息.置数据 (25, 1, 1, "保留栈的大小")
            表格_信息.置数据 (25, 2, 1, 取短整数十六进制文本 (72, 4))
            表格_信息.置数据 (25, 3, 1, "DWORD")
            表格_信息.置数据 (25, 4, 1, 取十六进制文本 (NT头32.OptionalHeader.SizeOfStackReserve, 8))

            表格_信息.置数据 (26, 0, 1, "SizeOfStackCommit")
            表格_信息.置数据 (26, 1, 1, "初始时指定栈大小")
            表格_信息.置数据 (26, 2, 1, 取短整数十六进制文本 (76, 4))
            表格_信息.置数据 (26, 3, 1, "DWORD")
            表格_信息.置数据 (26, 4, 1, 取十六进制文本 (NT头32.OptionalHeader.SizeOfStackCommit, 8))

            表格_信息.置数据 (27, 0, 1, "SizeOfHeapReserve")
            表格_信息.置数据 (27, 1, 1, "保留堆的大小")
            表格_信息.置数据 (27, 2, 1, 取短整数十六进制文本 (80, 4))
            表格_信息.置数据 (27, 3, 1, "DWORD")
            表格_信息.置数据 (27, 4, 1, 取十六进制文本 (NT头32.OptionalHeader.SizeOfHeapReserve, 8))

            表格_信息.置数据 (28, 0, 1, "SizeOfHeapCommit")
            表格_信息.置数据 (28, 1, 1, "指定堆大小")
            表格_信息.置数据 (28, 2, 1, 取短整数十六进制文本 (84, 4))
            表格_信息.置数据 (28, 3, 1, "DWORD")
            表格_信息.置数据 (28, 4, 1, 取十六进制文本 (NT头32.OptionalHeader.SizeOfHeapCommit, 8))

            表格_信息.置数据 (29, 0, 1, "LoaderFlags")
            表格_信息.置数据 (29, 1, 1, "加载器标志(已废弃)")
            表格_信息.置数据 (29, 2, 1, 取短整数十六进制文本 (88, 4))
            表格_信息.置数据 (29, 3, 1, "DWORD")
            表格_信息.置数据 (29, 4, 1, 取十六进制文本 (NT头32.OptionalHeader.LoaderFlags, 8))

            表格_信息.置数据 (30, 0, 1, "NumberOfRvaAndSizes")
            表格_信息.置数据 (30, 1, 1, "Rva数和大小")
            表格_信息.置数据 (30, 2, 1, 取短整数十六进制文本 (92, 4))
            表格_信息.置数据 (30, 3, 1, "DWORD")
            表格_信息.置数据 (30, 4, 1, 取十六进制文本 (NT头32.OptionalHeader.NumberOfRvaAndSizes, 8))

            表格_信息.置数据 (31, 0, 1, "DataDirectory")
            表格_信息.置数据 (31, 1, 1, "映像文件数据目录")
            表格_信息.置数据 (31, 2, 1, 取短整数十六进制文本 (96, 4))
            表格_信息.置数据 (31, 3, 1, "IMAGE_DATA_DIRECTORY [16]")
            表格_信息.置数据 (31, 4, 1, 取十六进制文本 (0, 8))

        }
        否则
        {
            表格_信息.置数据 (1, 0, 1, "Magic")
            表格_信息.置数据 (1, 1, 1, "目标CPU类型")
            表格_信息.置数据 (1, 2, 1, 取短整数十六进制文本 (0, 4))
            表格_信息.置数据 (1, 3, 1, "WORD")
            表格_信息.置数据 (1, 4, 1, 取短整数十六进制文本 (NT头64.OptionalHeader.Magic, 4))
            分支判断 ((整数)NT头64.OptionalHeader.Magic)
            {
                分支 (0x10b)
                {
                    表格_信息.置数据 (1, 5, 1, "IMAGE_NT_OPTIONAL_HDR32_MAGIC")
                }
                分支 (0x20b)
                {
                    表格_信息.置数据 (1, 5, 1, "IMAGE_NT_OPTIONAL_HDR64_MAGIC")
                }
                分支 (0x107)
                {
                    表格_信息.置数据 (1, 5, 1, "IMAGE_ROM_OPTIONAL_HDR_MAGIC")
                }

            }
            表格_信息.置数据 (2, 0, 1, "MajorLinkerVersion")
            表格_信息.置数据 (2, 1, 1, "链接器的主版本号")
            表格_信息.置数据 (2, 2, 1, 取短整数十六进制文本 (2, 4))
            表格_信息.置数据 (2, 3, 1, "BYTE")
            表格_信息.置数据 (2, 4, 1, 取字节十六进制文本 (NT头64.OptionalHeader.MajorLinkerVersion))

            表格_信息.置数据 (3, 0, 1, "MinorLinkerVersion")
            表格_信息.置数据 (3, 1, 1, "链接器的副版本号")
            表格_信息.置数据 (3, 2, 1, 取短整数十六进制文本 (3, 4))
            表格_信息.置数据 (3, 3, 1, "BYTE")
            表格_信息.置数据 (3, 4, 1, 取字节十六进制文本 (NT头64.OptionalHeader.MinorLinkerVersion))

            表格_信息.置数据 (4, 0, 1, "SizeOfCode")
            表格_信息.置数据 (4, 1, 1, "可执行代码的大小")
            表格_信息.置数据 (4, 2, 1, 取短整数十六进制文本 (4, 4))
            表格_信息.置数据 (4, 3, 1, "DWORD")
            表格_信息.置数据 (4, 4, 1, 取十六进制文本 (NT头64.OptionalHeader.SizeOfCode, 8))

            表格_信息.置数据 (5, 0, 1, "SizeOfInitializedData")
            表格_信息.置数据 (5, 1, 1, "已初始化数据大小")
            表格_信息.置数据 (5, 2, 1, 取短整数十六进制文本 (8, 4))
            表格_信息.置数据 (5, 3, 1, "DWORD")
            表格_信息.置数据 (5, 4, 1, 取十六进制文本 (NT头64.OptionalHeader.SizeOfInitializedData, 8))

            表格_信息.置数据 (6, 0, 1, "SizeOfUninitializedData")
            表格_信息.置数据 (6, 1, 1, "未初始化数据大小")
            表格_信息.置数据 (6, 2, 1, 取短整数十六进制文本 (12, 4))
            表格_信息.置数据 (6, 3, 1, "DWORD")
            表格_信息.置数据 (6, 4, 1, 取十六进制文本 (NT头64.OptionalHeader.SizeOfUninitializedData, 8))

            表格_信息.置数据 (7, 0, 1, "AddressOfEntryPoint")
            表格_信息.置数据 (7, 1, 1, "入口点偏移量")
            表格_信息.置数据 (7, 2, 1, 取短整数十六进制文本 (16, 4))
            表格_信息.置数据 (7, 3, 1, "DWORD")
            表格_信息.置数据 (7, 4, 1, 取十六进制文本 (NT头64.OptionalHeader.AddressOfEntryPoint, 8))

            表格_信息.置数据 (8, 0, 1, "BaseOfCode")
            表格_信息.置数据 (8, 1, 1, "可执行代码偏移量")
            表格_信息.置数据 (8, 2, 1, 取短整数十六进制文本 (20, 4))
            表格_信息.置数据 (8, 3, 1, "DWORD")
            表格_信息.置数据 (8, 4, 1, 取十六进制文本 (NT头64.OptionalHeader.BaseOfCode, 8))

            // 9为空

            表格_信息.置数据 (10, 0, 1, "ImageBase")
            表格_信息.置数据 (10, 1, 1, "优先装载地址")
            表格_信息.置数据 (10, 2, 1, 取短整数十六进制文本 (24, 4))
            表格_信息.置数据 (10, 3, 1, "ULONGLONG")
            表格_信息.置数据 (10, 4, 1, 取长整数十六进制文本 (NT头64.OptionalHeader.ImageBase, 8))

            表格_信息.置数据 (11, 0, 1, "SectionAlignment")
            表格_信息.置数据 (11, 1, 1, "内存节对齐粒度")
            表格_信息.置数据 (11, 2, 1, 取短整数十六进制文本 (32, 4))
            表格_信息.置数据 (11, 3, 1, "DWORD")
            表格_信息.置数据 (11, 4, 1, 取十六进制文本 (NT头64.OptionalHeader.SectionAlignment, 8))

            表格_信息.置数据 (12, 0, 1, "FileAlignment")
            表格_信息.置数据 (12, 1, 1, "文件节对齐粒度")
            表格_信息.置数据 (12, 2, 1, 取短整数十六进制文本 (36, 4))
            表格_信息.置数据 (12, 3, 1, "DWORD")
            表格_信息.置数据 (12, 4, 1, 取十六进制文本 (NT头64.OptionalHeader.FileAlignment, 8))

            表格_信息.置数据 (13, 0, 1, "MajorOperatingSystemVersion")
            表格_信息.置数据 (13, 1, 1, "系统最低主版本号")
            表格_信息.置数据 (13, 2, 1, 取短整数十六进制文本 (38, 4))
            表格_信息.置数据 (13, 3, 1, "WORD")
            表格_信息.置数据 (13, 4, 1, 取短整数十六进制文本 (NT头64.OptionalHeader.MajorOperatingSystemVersion, 4))

            表格_信息.置数据 (14, 0, 1, "MinorOperatingSystemVersion")
            表格_信息.置数据 (14, 1, 1, "系统最低副版本号")
            表格_信息.置数据 (14, 2, 1, 取短整数十六进制文本 (40, 4))
            表格_信息.置数据 (14, 3, 1, "WORD")
            表格_信息.置数据 (14, 4, 1, 取短整数十六进制文本 (NT头64.OptionalHeader.MinorOperatingSystemVersion, 4))

            表格_信息.置数据 (15, 0, 1, "MajorImageVersion")
            表格_信息.置数据 (15, 1, 1, "主映像文件版本")
            表格_信息.置数据 (15, 2, 1, 取短整数十六进制文本 (42, 4))
            表格_信息.置数据 (15, 3, 1, "WORD")
            表格_信息.置数据 (15, 4, 1, 取短整数十六进制文本 (NT头64.OptionalHeader.MajorImageVersion, 4))

            表格_信息.置数据 (16, 0, 1, "MinorImageVersion")
            表格_信息.置数据 (16, 1, 1, "副映像文件版本")
            表格_信息.置数据 (16, 2, 1, 取短整数十六进制文本 (44, 4))
            表格_信息.置数据 (16, 3, 1, "WORD")
            表格_信息.置数据 (16, 4, 1, 取短整数十六进制文本 (NT头64.OptionalHeader.MinorImageVersion, 4))

            表格_信息.置数据 (17, 0, 1, "MajorSubsystemVersion")
            表格_信息.置数据 (17, 1, 1, "子系统主版本号")
            表格_信息.置数据 (17, 2, 1, 取短整数十六进制文本 (46, 4))
            表格_信息.置数据 (17, 3, 1, "WORD")
            表格_信息.置数据 (17, 4, 1, 取短整数十六进制文本 (NT头64.OptionalHeader.MajorSubsystemVersion, 4))

            表格_信息.置数据 (18, 0, 1, "MinorSubsystemVersion")
            表格_信息.置数据 (18, 1, 1, "子系统副版本号")
            表格_信息.置数据 (18, 2, 1, 取短整数十六进制文本 (48, 4))
            表格_信息.置数据 (18, 3, 1, "WORD")
            表格_信息.置数据 (18, 4, 1, 取短整数十六进制文本 (NT头64.OptionalHeader.MinorSubsystemVersion, 4))

            表格_信息.置数据 (19, 0, 1, "Win32VersionValue")
            表格_信息.置数据 (19, 1, 1, "Win32版本值")
            表格_信息.置数据 (19, 2, 1, 取短整数十六进制文本 (50, 4))
            表格_信息.置数据 (19, 3, 1, "DWORD")
            表格_信息.置数据 (19, 4, 1, 取十六进制文本 (NT头64.OptionalHeader.Win32VersionValue, 8))

            表格_信息.置数据 (20, 0, 1, "SizeOfImage")
            表格_信息.置数据 (20, 1, 1, "映像尺寸")
            表格_信息.置数据 (20, 2, 1, 取短整数十六进制文本 (54, 4))
            表格_信息.置数据 (20, 3, 1, "DWORD")
            表格_信息.置数据 (20, 4, 1, 取十六进制文本 (NT头64.OptionalHeader.SizeOfImage, 8))

            表格_信息.置数据 (21, 0, 1, "SizeOfHeaders")
            表格_信息.置数据 (21, 1, 1, "所有头的大小")
            表格_信息.置数据 (21, 2, 1, 取短整数十六进制文本 (58, 4))
            表格_信息.置数据 (21, 3, 1, "DWORD")
            表格_信息.置数据 (21, 4, 1, 取十六进制文本 (NT头64.OptionalHeader.SizeOfHeaders, 8))

            表格_信息.置数据 (22, 0, 1, "CheckSum")
            表格_信息.置数据 (22, 1, 1, "校验和")
            表格_信息.置数据 (22, 2, 1, 取短整数十六进制文本 (62, 4))
            表格_信息.置数据 (22, 3, 1, "DWORD")
            表格_信息.置数据 (22, 4, 1, 取十六进制文本 (NT头64.OptionalHeader.CheckSum, 8))

            表格_信息.置数据 (23, 0, 1, "Subsystem")
            表格_信息.置数据 (23, 1, 1, "子系统")
            表格_信息.置数据 (23, 2, 1, 取短整数十六进制文本 (66, 4))
            表格_信息.置数据 (23, 3, 1, "WORD")
            表格_信息.置数据 (23, 4, 1, 取十六进制文本 (NT头64.OptionalHeader.Subsystem, 8))
            分支判断 ((整数)NT头64.OptionalHeader.Subsystem)
            {
                分支 (2)
                {
                    表格_信息.置数据 (23, 5, 1, "IMAGE_SUBSYSTEM_WINDOWS_GUI")
                }
                分支 (3)
                {
                    表格_信息.置数据 (23, 5, 1, "IMAGE_SUBSYSTEM_WINDOWS_CUI")
                }
            }

            表格_信息.置数据 (24, 0, 1, "DllCharacteristics")
            表格_信息.置数据 (24, 1, 1, "DLL特性")
            表格_信息.置数据 (24, 2, 1, 取短整数十六进制文本 (70, 4))
            表格_信息.置数据 (24, 3, 1, "WORD")
            表格_信息.置数据 (24, 4, 1, 取十六进制文本 (NT头64.OptionalHeader.DllCharacteristics, 8))
            分支判断 ((整数)NT头64.OptionalHeader.DllCharacteristics)
            {
                分支 (0x0020)
                {
                    表格_信息.置数据 (24, 5, 1, "IMAGE_DLLCHARACTERISTICS_HIGH_ENTROPY_VA")
                }
                分支 (0x0040)
                {
                    表格_信息.置数据 (24, 5, 1, "IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE")
                }
                分支 (0x0080)
                {
                    表格_信息.置数据 (24, 5, 1, "IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY")
                }
                分支 (0x0100)
                {
                    表格_信息.置数据 (24, 5, 1, "IMAGE_DLLCHARACTERISTICS_NX_COMPAT")
                }
                分支 (0x0200)
                {
                    表格_信息.置数据 (24, 5, 1, "IMAGE_DLLCHARACTERISTICS_NO_ISOLATION")
                }
                分支 (0x0400)
                {
                    表格_信息.置数据 (24, 5, 1, "IMAGE_DLLCHARACTERISTICS_NO_SEH")
                }
                分支 (0x0800)
                {
                    表格_信息.置数据 (24, 5, 1, "IMAGE_DLLCHARACTERISTICS_NO_BIND")
                }
                分支 (0x1000)
                {
                    表格_信息.置数据 (24, 5, 1, "IMAGE_DLLCHARACTERISTICS_APPCONTAINER")
                }
                分支 (0x2000)
                {
                    表格_信息.置数据 (24, 5, 1, "IMAGE_DLLCHARACTERISTICS_WDM_DRIVER")
                }
                分支 (0x4000)
                {
                    表格_信息.置数据 (24, 5, 1, "IMAGE_DLLCHARACTERISTICS_GUARD_CF")
                }
                分支 (0x8000)
                {
                    表格_信息.置数据 (24, 5, 1, "IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE")
                }

            }

            表格_信息.置数据 (25, 0, 1, "SizeOfStackReserve")
            表格_信息.置数据 (25, 1, 1, "保留栈的大小")
            表格_信息.置数据 (25, 2, 1, 取短整数十六进制文本 (72, 4))
            表格_信息.置数据 (25, 3, 1, "ULONGLONG")
            表格_信息.置数据 (25, 4, 1, 取长整数十六进制文本 (NT头64.OptionalHeader.SizeOfStackReserve, 8))

            表格_信息.置数据 (26, 0, 1, "SizeOfStackCommit")
            表格_信息.置数据 (26, 1, 1, "初始时指定栈大小")
            表格_信息.置数据 (26, 2, 1, 取短整数十六进制文本 (80, 4))
            表格_信息.置数据 (26, 3, 1, "ULONGLONG")
            表格_信息.置数据 (26, 4, 1, 取长整数十六进制文本 (NT头64.OptionalHeader.SizeOfStackCommit, 8))

            表格_信息.置数据 (27, 0, 1, "SizeOfHeapReserve")
            表格_信息.置数据 (27, 1, 1, "保留堆的大小")
            表格_信息.置数据 (27, 2, 1, 取短整数十六进制文本 (88, 4))
            表格_信息.置数据 (27, 3, 1, "ULONGLONG")
            表格_信息.置数据 (27, 4, 1, 取长整数十六进制文本 (NT头64.OptionalHeader.SizeOfHeapReserve, 8))

            表格_信息.置数据 (28, 0, 1, "SizeOfHeapCommit")
            表格_信息.置数据 (28, 1, 1, "指定堆大小")
            表格_信息.置数据 (28, 2, 1, 取短整数十六进制文本 (96, 4))
            表格_信息.置数据 (28, 3, 1, "ULONGLONG")
            表格_信息.置数据 (28, 4, 1, 取长整数十六进制文本 (NT头64.OptionalHeader.SizeOfHeapCommit, 8))

            表格_信息.置数据 (29, 0, 1, "LoaderFlags")
            表格_信息.置数据 (29, 1, 1, "加载器标志(已废弃)")
            表格_信息.置数据 (29, 2, 1, 取短整数十六进制文本 (104, 4))
            表格_信息.置数据 (29, 3, 1, "DWORD")
            表格_信息.置数据 (29, 4, 1, 取十六进制文本 (NT头64.OptionalHeader.LoaderFlags, 8))

            表格_信息.置数据 (30, 0, 1, "NumberOfRvaAndSizes")
            表格_信息.置数据 (30, 1, 1, "Rva数和大小")
            表格_信息.置数据 (30, 2, 1, 取短整数十六进制文本 (108, 4))
            表格_信息.置数据 (30, 3, 1, "DWORD")
            表格_信息.置数据 (30, 4, 1, 取十六进制文本 (NT头64.OptionalHeader.NumberOfRvaAndSizes, 8))

            表格_信息.置数据 (31, 0, 1, "DataDirectory")
            表格_信息.置数据 (31, 1, 1, "映像文件数据目录")
            表格_信息.置数据 (31, 2, 1, 取短整数十六进制文本 (112, 4))
            表格_信息.置数据 (31, 3, 1, "IMAGE_DATA_DIRECTORY [16]")
            表格_信息.置数据 (31, 4, 1, 取十六进制文本 (0, 8))

        }
    }

    方法 填目录
    {
        表格_信息.清空数据 ()
        表格_信息.置列宽 (0, 35)
        表格_信息.置列宽 (1, 120)
        表格_信息.置列宽 (2, 120)
        表格_信息.置列宽 (3, 80)
        表格_信息.置列宽 (4, 60)
        表格_信息.置列宽 (5, 140)
        表格_信息.置数据 (0, 0, 1, "索引")
        表格_信息.置数据 (0, 1, 1, "名称")
        表格_信息.置数据 (0, 2, 1, "备注")
        表格_信息.置数据 (0, 3, 1, "地址")
        表格_信息.置数据 (0, 4, 1, "大小")

        表格_信息.行数 = 18

        表格_信息.置数据 (1, 1, 1, "EXPORT")
        表格_信息.置数据 (2, 1, 1, "IMPORT")
        表格_信息.置数据 (3, 1, 1, "RESOURCE")
        表格_信息.置数据 (4, 1, 1, "EXCEPTION")
        表格_信息.置数据 (5, 1, 1, "SECURITY")
        表格_信息.置数据 (6, 1, 1, "BASERELOC")
        表格_信息.置数据 (7, 1, 1, "DEBUG")
        表格_信息.置数据 (8, 1, 1, "COPYRIGHT")
        表格_信息.置数据 (9, 1, 1, "ARCHITECTURE")
        表格_信息.置数据 (10, 1, 1, "GLOBALPTR")
        表格_信息.置数据 (11, 1, 1, "TLS")
        表格_信息.置数据 (12, 1, 1, "LOAD_CONFIG")
        表格_信息.置数据 (13, 1, 1, "BOUND_IMPORT")
        表格_信息.置数据 (14, 1, 1, "IAT")
        表格_信息.置数据 (15, 1, 1, "DELAY_IMPORT")
        表格_信息.置数据 (16, 1, 1, "COM_DESCRIPTOR")
        表格_信息.置数据 (17, 1, 1, "RESERVED")

        表格_信息.置数据 (1, 2, 1, "导出表")
        表格_信息.置数据 (2, 2, 1, "导入表")
        表格_信息.置数据 (3, 2, 1, "资源表")
        表格_信息.置数据 (4, 2, 1, "异常表")
        表格_信息.置数据 (5, 2, 1, "属性证书表")
        表格_信息.置数据 (6, 2, 1, "基址重定位表")
        表格_信息.置数据 (7, 2, 1, "调试信息表")
        表格_信息.置数据 (8, 2, 1, "版权信息表")
        表格_信息.置数据 (9, 2, 1, "特殊结构表")
        表格_信息.置数据 (10, 2, 1, "全局指针表")
        表格_信息.置数据 (11, 2, 1, "线程局部存储表")
        表格_信息.置数据 (12, 2, 1, "加载配置表")
        表格_信息.置数据 (13, 2, 1, "绑定导入表")
        表格_信息.置数据 (14, 2, 1, "导入函数地址表")
        表格_信息.置数据 (15, 2, 1, "延迟加载导入表")
        表格_信息.置数据 (16, 2, 1, "COM表")
        表格_信息.置数据 (17, 2, 1, "预留")

        如果 (取程序 ().PE解析.是否为64位 () == 假)
        {
            计次循环 (16)
            {
                表格_信息.置数据 (取循环索引 () + 1, 0, 1, 到文本 (取循环索引 ()))
                表格_信息.置数据 (取循环索引 () + 1, 3, 1, 取十六进制文本 (NT头32.OptionalHeader.DataDirectory [取循环索引 ()].VirtualAddress, 8))
                表格_信息.置数据 (取循环索引 () + 1, 4, 1, 取十六进制文本 (NT头32.OptionalHeader.DataDirectory [取循环索引 ()].Size, 8))

            }
        }
        否则
        {
            计次循环 (16)
            {
                表格_信息.置数据 (取循环索引 () + 1, 0, 1, 到文本 (取循环索引 ()))
                表格_信息.置数据 (取循环索引 () + 1, 3, 1, 取十六进制文本 (NT头64.OptionalHeader.DataDirectory [取循环索引 ()].VirtualAddress, 8))
                表格_信息.置数据 (取循环索引 () + 1, 4, 1, 取十六进制文本 (NT头64.OptionalHeader.DataDirectory [取循环索引 ()].Size, 8))
            }


        }
    }

    方法 NT头窗口类_创建完毕 <接收事件 类型 = 整数 注释 = "当本组件及其中所有子组件均被创建完毕后发送此事件." 折叠>
    参数 来源对象 <类型 = NT头窗口类 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    {
        填表格 ()
        返回 (0)
    }

    方法 树形框_项目被选择 <接收事件 类型 = 整数 注释 = "当前选择项目被改变时产生此事件" 折叠>
    参数 来源对象 <类型 = 树形框 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    参数 选择方式 <类型 = 整数 注释 = "提供是如何操作导致当前选择项目被改变的:  0:键盘; 1:鼠标;  2:其它">
    {
        如果 (来源对象 == 树形框_NT)
        {
            填表格 ()

        }
        返回 (0)
    }
}

类 导出表窗口类 <公开 基础类 = 窗口 折叠 隐藏值属性 = "0" @视窗.布局 = "client_size = \"725, 590\"" 标题 = "导出表" 最小化按钮 = 假>
{
    变量 表格_信息 <类型 = 表格 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 101\r\npos = \"20, 20, 680, 250\"" 表头行数 = 1 表头列数 = 0
            列数 = 6 行数 = 1 列宽 = 60 允许调整列宽 = 真 允许调整行高 = 假 是否可编辑 = 假 点燃色 = 0x8050FF>
    变量 表格_函数 <类型 = 表格 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 102\r\npos = \"20, 287, 680, 280\"" 点燃色 = 0x8050FF
            允许调整行高 = 假 允许调整列宽 = 真 列宽 = 60 列数 = 4 表头列数 = 1 表头行数 = 1 是否可编辑 = 假 行数 = 1>
    变量 导出表 <类型 = 导出表类>

    方法 填表格 <公开 类型 = 整数 折叠>
    {
        表格_信息.清空数据 ()
        表格_信息.置列宽 (0, 140)
        表格_信息.置列宽 (1, 150)
        表格_信息.置列宽 (2, 60)
        表格_信息.置列宽 (3, 60)
        表格_信息.置列宽 (4, 80)
        表格_信息.置列宽 (5, 170)
        表格_信息.置数据 (0, 0, 1, "名称")
        表格_信息.置数据 (0, 1, 1, "备注")
        表格_信息.置数据 (0, 2, 1, "偏移")
        表格_信息.置数据 (0, 3, 1, "类型")
        表格_信息.置数据 (0, 4, 1, "值")
        表格_信息.行数 = 12

        表格_函数.清空数据 ()
        表格_函数.置列宽 (0, 35)
        表格_函数.置列宽 (1, 65)
        表格_函数.置列宽 (2, 100)
        表格_函数.置列宽 (3, 460)
        表格_函数.置数据 (0, 1, 1, "函数序号")
        表格_函数.置数据 (0, 2, 1, "函数地址(RVA)")
        表格_函数.置数据 (0, 3, 1, "函数名称")

        变量 函数数量 <类型 = 整数>
        变量 导出表头 <类型 = IMAGE_EXPORT_DIRECTORY>
        导出表头 = 取程序 ().PE解析.取导出表头 ()
        函数数量 = 取程序 ().PE解析.取导出表 (导出表)


        表格_信息.置数据 (1, 0, 1, "Characteristics")
        表格_信息.置数据 (1, 1, 1, "未使用")
        表格_信息.置数据 (1, 2, 1, 取短整数十六进制文本 (0, 4))
        表格_信息.置数据 (1, 3, 1, "DWORD")
        表格_信息.置数据 (1, 4, 1, 取十六进制文本 (导出表头.Characteristics, 8))

        表格_信息.置数据 (2, 0, 1, "TimeDateStamp")
        表格_信息.置数据 (2, 1, 1, "文件创建时间戳")
        表格_信息.置数据 (2, 2, 1, 取短整数十六进制文本 (4, 4))
        表格_信息.置数据 (2, 3, 1, "DWORD")
        表格_信息.置数据 (2, 4, 1, 取十六进制文本 (导出表头.TimeDateStamp, 8))
        表格_信息.置数据 (2, 5, 1, 时间到文本 (时间戳到时间 (导出表头.TimeDateStamp)))

        表格_信息.置数据 (3, 0, 1, "MajorVersion")
        表格_信息.置数据 (3, 1, 1, "未使用")
        表格_信息.置数据 (3, 2, 1, 取短整数十六进制文本 (8, 4))
        表格_信息.置数据 (3, 3, 1, "WORD")
        表格_信息.置数据 (3, 4, 1, 取短整数十六进制文本 (导出表头.MajorVersion, 4))

        表格_信息.置数据 (4, 0, 1, "MinorVersion")
        表格_信息.置数据 (4, 1, 1, "未使用")
        表格_信息.置数据 (4, 2, 1, 取短整数十六进制文本 (10, 4))
        表格_信息.置数据 (4, 3, 1, "WORD")
        表格_信息.置数据 (4, 4, 1, 取短整数十六进制文本 (导出表头.MajorVersion, 4))

        表格_信息.置数据 (5, 0, 1, "Name")
        表格_信息.置数据 (5, 1, 1, "模块的内部名称地址")
        表格_信息.置数据 (5, 2, 1, 取短整数十六进制文本 (12, 4))
        表格_信息.置数据 (5, 3, 1, "DWORD")
        表格_信息.置数据 (5, 4, 1, 取十六进制文本 (导出表头.Name, 8))
        表格_信息.置数据 (5, 5, 1, 导出表.模块名称)

        表格_信息.置数据 (6, 0, 1, "Base")
        表格_信息.置数据 (6, 1, 1, "函数的起始序号")
        表格_信息.置数据 (6, 2, 1, 取短整数十六进制文本 (16, 4))
        表格_信息.置数据 (6, 3, 1, "DWORD")
        表格_信息.置数据 (6, 4, 1, 取十六进制文本 (导出表头.Base, 8))

        表格_信息.置数据 (7, 0, 1, "NumberOfFunctions")
        表格_信息.置数据 (7, 1, 1, "导出函数的个数")
        表格_信息.置数据 (7, 2, 1, 取短整数十六进制文本 (20, 4))
        表格_信息.置数据 (7, 3, 1, "DWORD")
        表格_信息.置数据 (7, 4, 1, 取十六进制文本 (导出表头.NumberOfFunctions, 8))

        表格_信息.置数据 (8, 0, 1, "NumberOfNames")
        表格_信息.置数据 (8, 1, 1, "以名称导出的函数")
        表格_信息.置数据 (8, 2, 1, 取短整数十六进制文本 (24, 4))
        表格_信息.置数据 (8, 3, 1, "DWORD")
        表格_信息.置数据 (8, 4, 1, 取十六进制文本 (导出表头.NumberOfNames, 8))

        表格_信息.置数据 (9, 0, 1, "AddressOfFunctions")
        表格_信息.置数据 (9, 1, 1, "导出地址列表")
        表格_信息.置数据 (9, 2, 1, 取短整数十六进制文本 (28, 4))
        表格_信息.置数据 (9, 3, 1, "DWORD")
        表格_信息.置数据 (9, 4, 1, 取十六进制文本 (导出表头.AddressOfFunctions, 8))

        表格_信息.置数据 (10, 0, 1, "AddressOfNames")
        表格_信息.置数据 (10, 1, 1, "导出名称列表")
        表格_信息.置数据 (10, 2, 1, 取短整数十六进制文本 (32, 4))
        表格_信息.置数据 (10, 3, 1, "DWORD")
        表格_信息.置数据 (10, 4, 1, 取十六进制文本 (导出表头.AddressOfNames, 8))

        表格_信息.置数据 (11, 0, 1, "AddressOfNameOrdinals")
        表格_信息.置数据 (11, 1, 1, "导出序号列表")
        表格_信息.置数据 (11, 2, 1, 取短整数十六进制文本 (36, 4))
        表格_信息.置数据 (11, 3, 1, "DWORD")
        表格_信息.置数据 (11, 4, 1, 取十六进制文本 (导出表头.AddressOfNameOrdinals, 8))

        如果 (函数数量 <= 0)
        {
            返回 (0)
        }
        表格_函数.行数 = 函数数量 + 1
        计次循环 (函数数量)
        {
            表格_函数.置数据 (取循环索引 () + 1, 0, 1, 到文本 (取循环索引 ()))
            表格_函数.置数据 (取循环索引 () + 1, 1, 1, 取十六进制文本 (导出表.函数列表.取成员 (取循环索引 ()).函数序号, 4))
            表格_函数.置数据 (取循环索引 () + 1, 2, 1, 取长整数十六进制文本 (导出表.函数列表.取成员 (取循环索引 ()).函数地址, 8))
            表格_函数.置数据 (取循环索引 () + 1, 3, 1, 导出表.函数列表.取成员 (取循环索引 ()).函数名称)

        }
        返回 (0)
    }

    方法 导出表窗口类_创建完毕 <接收事件 类型 = 整数 注释 = "当本组件及其中所有子组件均被创建完毕后发送此事件." 折叠>
    参数 来源对象 <类型 = 导出表窗口类 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    {
        填表格 ()
        返回 (0)
    }
}

类 导入表窗口类 <公开 基础类 = 窗口 折叠 隐藏值属性 = "0" @视窗.布局 = "client_size = \"725, 590\"" 标题 = "导入表" 最小化按钮 = 假>
{
    变量 表格_信息 <类型 = 表格 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 101\r\npos = \"20, 20, 680, 250\"" 表头行数 = 1 表头列数 = 1
            列数 = 7 行数 = 1 列宽 = 60 行高 = 32 允许调整列宽 = 真 允许调整行高 = 假 是否可编辑 = 假 点燃色 = 0x8050FF 选择整行 = 真>
    变量 表格_函数 <类型 = 表格 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 102\r\npos = \"20, 287, 680, 280\"" 点燃色 = 0x8050FF
            允许调整行高 = 假 允许调整列宽 = 真 列宽 = 60 列数 = 4 表头列数 = 1 表头行数 = 1 是否可编辑 = 假 行数 = 1>
    变量 导入表数组 <类型 = 导入表数组类>

    方法 填表格 <公开 类型 = 整数>
    {
        表格_信息.清空数据 ()
        表格_信息.置列宽 (0, 35)
        表格_信息.置列宽 (1, 135)
        表格_信息.置列宽 (2, 100)
        表格_信息.置列宽 (3, 110)
        表格_信息.置列宽 (4, 65)
        表格_信息.置列宽 (5, 80)
        表格_信息.置列宽 (6, 135)
        表格_信息.置数据 (0, 1, 1, "OriginalFirstThunk")
        表格_信息.置数据 (0, 2, 1, "TimeDateStamp")
        表格_信息.置数据 (0, 3, 1, "ForwarderChain")
        表格_信息.置数据 (0, 4, 1, "Name")
        表格_信息.置数据 (0, 5, 1, "FirstThunk")
        变量 导入表描述符数组 <类型 = 导入表描述符数组类>
        变量 表数量 <类型 = 整数>
        取程序 ().PE解析.取导入表描述符 (导入表描述符数组)
        表数量 = 取程序 ().PE解析.取导入表 (导入表数组)
        如果 (表数量 <= 0)
        {
            返回 (0)

        }
        表格_信息.行数 = 表数量 + 1
        计次循环 (表数量)
        {
            表格_信息.置数据 (取循环索引 () + 1, 0, 1, 到文本 (取循环索引 ()))
            表格_信息.置数据 (取循环索引 () + 1, 1, 1, 取十六进制文本 (导入表描述符数组.取成员 (取循环索引 ()).OriginalFirstThunk, 8))
            表格_信息.置数据 (取循环索引 () + 1, 2, 1, 取十六进制文本 (导入表描述符数组.取成员 (取循环索引 ()).TimeDateStamp, 8))
            表格_信息.置数据 (取循环索引 () + 1, 3, 1, 取短整数十六进制文本 (导入表描述符数组.取成员 (取循环索引 ()).ForwarderChain, 4))
            表格_信息.置数据 (取循环索引 () + 1, 4, 1, 取十六进制文本 (导入表描述符数组.取成员 (取循环索引 ()).Name, 8))
            表格_信息.置数据 (取循环索引 () + 1, 5, 1, 取十六进制文本 (导入表描述符数组.取成员 (取循环索引 ()).FirstThunk, 8))
            表格_信息.置数据 (取循环索引 () + 1, 6, 1, 导入表数组.取成员 (取循环索引 ()).模块名称)

        }
        表格_信息.置光标 (1, 1)
        返回 (0)
    }

    方法 导入表窗口类_创建完毕 <接收事件 类型 = 整数 注释 = "当本组件及其中所有子组件均被创建完毕后发送此事件." 折叠>
    参数 来源对象 <类型 = 导入表窗口类 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    {
        填表格 ()
        返回 (0)
    }

    方法 表格_光标位置改变 <接收事件 类型 = 整数 注释 = "当用户更改了当前被选择单元时会产生本事件">
    参数 来源对象 <类型 = 表格 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    {
        如果 (来源对象 == 表格_信息)
        {
            表格_函数.清空数据 ()
            变量 行号 <类型 = 整数>
            行号 = 表格_信息.取光标行号 ()
            表格_函数.置列宽 (0, 35)
            表格_函数.置列宽 (1, 65)
            表格_函数.置列宽 (2, 100)
            表格_函数.置列宽 (3, 460)
            表格_函数.置数据 (0, 1, 1, "函数序号")
            表格_函数.置数据 (0, 2, 1, "函数地址(VA)")
            表格_函数.置数据 (0, 3, 1, "函数名称")
            变量 索引 <类型 = 整数>
            索引 = (整数)导入表数组.取成员 (行号 - 1).函数列表.取成员数 ()
            如果 (索引 > 0)
            {
                表格_函数.行数 = 索引 + 1
                计次循环 (索引)
                {
                    表格_函数.置数据 (取循环索引 () + 1, 0, 1, 到文本 (取循环索引 ()))
                    表格_函数.置数据 (取循环索引 () + 1, 1, 1, 取十六进制文本 (导入表数组.取成员 (行号 - 1).函数列表.取成员 (取循环索引 ()).函数序号, 4))
                    表格_函数.置数据 (取循环索引 () + 1, 2, 1, 取长整数十六进制文本 (导入表数组.取成员 (行号 - 1).函数列表.取成员 (取循环索引 ()).函数地址, 8))
                    表格_函数.置数据 (取循环索引 () + 1, 3, 1, 导入表数组.取成员 (行号 - 1).函数列表.取成员 (取循环索引 ()).函数名称)
                }

            }

        }
        返回 (0)
    }
}

类 节区表窗口类 <公开 基础类 = 窗口 折叠 隐藏值属性 = "0" @视窗.布局 = "client_size = \"800, 340\"" 标题 = "节区表" 最小化按钮 = 假>
{
    变量 表格_节区表 <类型 = 表格 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 101\r\npos = \"20, 20, 760, 300\"" 点燃色 = 0x8050FF
            允许调整行高 = 假 表头行数 = 1 表头列数 = 1 列数 = 11 行数 = 1 是否可编辑 = 假>

    方法 填表格 <公开 类型 = 整数 折叠>
    {
        表格_节区表.清空数据 ()
        表格_节区表.置列宽 (0, 30)
        表格_节区表.置列宽 (1, 60)
        表格_节区表.置列宽 (2, 80)
        表格_节区表.置列宽 (3, 90)
        表格_节区表.置列宽 (4, 85)
        表格_节区表.置列宽 (5, 120)
        表格_节区表.置列宽 (6, 130)
        表格_节区表.置列宽 (7, 130)
        表格_节区表.置列宽 (8, 130)
        表格_节区表.置列宽 (9, 130)
        表格_节区表.置列宽 (10, 100)

        表格_节区表.置数据 (0, 1, 1, "Name")
        表格_节区表.置数据 (0, 2, 1, "VirtualSize")
        表格_节区表.置数据 (0, 3, 1, "VirtualAddress")
        表格_节区表.置数据 (0, 4, 1, "SizeOfRawData")
        表格_节区表.置数据 (0, 5, 1, "PointerToRawData")
        表格_节区表.置数据 (0, 6, 1, "PointerToRelocations")
        表格_节区表.置数据 (0, 7, 1, "PointerToLinenumbers")
        表格_节区表.置数据 (0, 8, 1, "NumberOfRelocations")
        表格_节区表.置数据 (0, 9, 1, "NumberOfLinenumbers")
        表格_节区表.置数据 (0, 10, 1, "Characteristics")

        变量 节区数量 <类型 = 整数>
        变量 节区表数组 <类型 = 节区表数组类>
        节区数量 = 取程序 ().PE解析.取节区表 (节区表数组)
        如果 (节区数量 <= 0)
        {
            返回 (0)

        }
        表格_节区表.行数 = 节区数量 + 1
        计次循环 (节区数量)
        {
            表格_节区表.置数据 (取循环索引 () + 1, 0, 1, 到文本 (取循环索引 ()))
            表格_节区表.置数据 (取循环索引 () + 1, 1, 1, 多字节到文本 (数组到字节集 (节区表数组.取成员 (取循环索引 ()).Name)))
            表格_节区表.置数据 (取循环索引 () + 1, 2, 1, 取十六进制文本 (节区表数组.取成员 (取循环索引 ()).VirtualSize, 8))
            表格_节区表.置数据 (取循环索引 () + 1, 3, 1, 取十六进制文本 (节区表数组.取成员 (取循环索引 ()).VirtualAddress, 8))
            表格_节区表.置数据 (取循环索引 () + 1, 4, 1, 取十六进制文本 (节区表数组.取成员 (取循环索引 ()).SizeOfRawData, 8))
            表格_节区表.置数据 (取循环索引 () + 1, 5, 1, 取十六进制文本 (节区表数组.取成员 (取循环索引 ()).PointerToRawData, 8))
            表格_节区表.置数据 (取循环索引 () + 1, 6, 1, 取十六进制文本 (节区表数组.取成员 (取循环索引 ()).PointerToRelocations, 8))
            表格_节区表.置数据 (取循环索引 () + 1, 7, 1, 取十六进制文本 (节区表数组.取成员 (取循环索引 ()).PointerToLinenumbers, 8))
            表格_节区表.置数据 (取循环索引 () + 1, 8, 1, 取十六进制文本 (节区表数组.取成员 (取循环索引 ()).NumberOfRelocations, 8))
            表格_节区表.置数据 (取循环索引 () + 1, 9, 1, 取十六进制文本 (节区表数组.取成员 (取循环索引 ()).NumberOfLinenumbers, 8))
            表格_节区表.置数据 (取循环索引 () + 1, 10, 1, 取十六进制文本 (节区表数组.取成员 (取循环索引 ()).Characteristics, 8))

        }
        返回 (0)
    }

    方法 节区表窗口类_创建完毕 <接收事件 类型 = 整数 注释 = "当本组件及其中所有子组件均被创建完毕后发送此事件." 折叠>
    参数 来源对象 <类型 = 节区表窗口类 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    {
        填表格 ()
        返回 (0)
    }
}

类 十六进制查看器 <公开 基础类 = 窗口 折叠 隐藏值属性 = "0" @视窗.布局 = "client_size = \"670, 470\"" 标题 = "十六进制查看器" 最小化按钮 = 假>
{
    变量 标签_当前位置 <类型 = 标签 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 101\r\npos = \"20, 428, 300, 24\""
            标题 = "位置: 00000000H, 0">
    变量 标签_状态 <类型 = 标签 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 102\r\npos = \"566, 428, 80, 24\"" 标题 = "只读"
            横向对齐方式 = 右边>
    变量 超级列表框_HEX <类型 = 超级列表框 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 103\r\npos = \"20, 25, 630, 391\"" 虚拟化数据 = 真
            "类型" = 报表列表框
            报表列 = "0\n-1\n0\n80\n\n0\n-1\n1\n24\n0\n0\n-1\n1\n24\n1\n0\n-1\n1\n24\n2\n0\n-1\n1\n24\n3\n0\n-1\n1\n24\n4\n0\n-1\n1\n24\n5\n0\n-1\n1\n24\n6\n0\n-1\n1\n24\n7\n0\n-1\n1\n24\n8\n0\n-1\n1\n24\n9\n0\n-1\n1\n24\na\n0\n-1\n1\n24\nb\n0\n-1\n1\n24\nc\n0\n-1\n1\n24\nd\n0\n-1\n1\n24\ne\n0\n-1\n1\n24\nf\n0\n-1\n0\n150\n"
            整行选择 = 真>
    变量 ""
    变量 数据指针 <类型 = 变整数>
    变量 最后列数 <类型 = 整数>

    方法 填表格 <公开 类型 = 整数 折叠>
    {
        数据指针 = 取程序 ().PE解析.取数据指针 ()
        超级列表框_HEX.虚拟表项数 = 取程序 ().PE解析.取数据尺寸 () / 16
        最后列数 = 取程序 ().PE解析.取数据尺寸 () % 16
        如果 (最后列数 > 0)
        {
            超级列表框_HEX.虚拟表项数 = 超级列表框_HEX.虚拟表项数 + 1
        }

        返回 (0)
    }

    方法 十六进制查看器_创建完毕 <接收事件 类型 = 整数 注释 = "当本组件及其中所有子组件均被创建完毕后发送此事件." 折叠>
    参数 来源对象 <类型 = 十六进制查看器 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    {
        填表格 ()
        返回 (0)
    }

    方法 超级列表框_虚拟表项填充 <接收事件 类型 = 整数 注释 = "  在超级列表框即将绘制某虚拟项目之前被发送,用户可以修改所提供参数中的\"项目文本\"、\"表项数值\"、"
            注释 = "\"图片索引\"和\"检查框状态\"成员值以修改在绘制时所实际使用的表项数据." 注释 = "  本事件仅当\"虚拟化数据\"属性为真时才会发送.">
    参数 来源对象 <类型 = 超级列表框 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    参数 表项参数 <类型 = 超级列表框表项填充 注释 = "  用户可以修改本参数中的\"项目文本\"、\"表项数值\"、\"图片索引\"和\"检查框状态\"成员值以修改在绘制"
            注释 = "时所实际使用的表项数据." 注释 = "  注意: 如果修改了本参数中的\"项目文本\"、\"表项数值\"、\"图片索引\"和\"检查框状态\"成员值,将会对"
            注释 = "当前表项的当前列及其后所有列均造成影响.">
    {
        如果 (来源对象 == 超级列表框_HEX)
        {
            如果 (表项参数.列索引 == 0)
            {
                表项参数.项目文本 = 取十六进制文本 (表项参数.表项索引 * 16, 8) + "h:"
            }
            否则 (表项参数.列索引 == 17)
            {
                变量 行数据 <类型 = 字节集类>
                变量 当前字节 <类型 = 字节>
                行数据 = 指针到字节集 (数据指针 + 表项参数.表项索引 * 16, 选择 (表项参数.表项索引 == 来源对象.虚拟表项数, 最后列数, 16))
                计次循环 (行数据.取字节集长度 ())
                {
                    当前字节 = 行数据.取字节集数据 (取循环索引 (), 字节)
                    如果 (当前字节 < 0x20 || 当前字节 > 0x7E)
                    {
                        行数据.置字节集值 (取循环索引 (), (字节)0x2E)
                    }

                }
                表项参数.项目文本 = 多字节到文本 (行数据)

            }
            否则
            {
                如果 (表项参数.表项索引 == 来源对象.虚拟表项数 && 表项参数.列索引 > 最后列数 + 1)
                {
                    表项参数.项目文本 = ""

                }
                表项参数.项目文本 = 取十六进制文本 (无符号字节到整数 (读指针处值 (数据指针 + 表项参数.表项索引 * 16 + 表项参数.列索引 - 1, 字节)), 2)

            }

        }
        返回 (0)
    }

    方法 超级列表框_当前表项被改变 <接收事件 类型 = 整数 注释 = "  如果当前焦点所处表项被改变即产生此事件,接收到此事件后读取" 注释 = "\"现行选中项\"属性即可获得当前表项的索引." 折叠>
    参数 来源对象 <类型 = 超级列表框 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    {
        如果 (来源对象 == 超级列表框_HEX)
        {
            变量 格式文本 <类型 = 文本型 值 = "位置: %08XH, %d">
            变量 光标位置 <类型 = 整数>
            光标位置 = 来源对象.现行选中项 * 16
            标签_当前位置.标题 = 取格式文本 (格式文本, 光标位置, 光标位置)

        }
        返回 (0)
    }
}

类 进程信息类 <基础类 = 窗口 折叠 @视窗.布局 = "client_size = \"740, 390\"" 标题 = "打开内存模块" 最小化按钮 = 假>
{
    变量 按钮_取消 <类型 = 按钮 隐藏值属性 = "0" @视窗.布局 = "id = 101\r\npos = \"604, 338, 120, 32\"" 标题 = "取消">
    变量 按钮_刷新 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 102\r\npos = \"604, 251, 120, 32\"" 标题 = "刷新进程">
    变量 按钮_打开 <类型 = 按钮 隐藏值属性 = "0" @视窗.布局 = "id = 103\r\npos = \"604, 294, 120, 32\"" 标题 = "打开模块">
    变量 超级列表框_进程 <类型 = 超级列表框 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 104\r\npos = \"20, 20, 270, 350\"" "类型" = 报表列表框
            报表列 = "0\n-1\n0\n65\nPID\n0\n-1\n0\n200\n名称" 整行选择 = 真 显示表格线 = 真>
    变量 超级列表框_模块 <类型 = 超级列表框 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 105\r\npos = \"306, 20, 280, 350\"" "类型" = 报表列表框
            整行选择 = 真 显示表格线 = 真 报表列 = "0\n-1\n0\n100\n模块句柄\n0\n-1\n0\n175\n名称">
    变量 ""
    变量 进程数组 <类型 = 进程快照数组类>
    变量 模块数组 <类型 = NT模块信息数组类>
    变量 ""
    变量 文件名 <公开 类型 = 文本型>
    变量 进程ID <公开 类型 = 整数>
    变量 模块名称 <公开 类型 = 文本型>

    方法 按钮_被单击 <接收事件 类型 = 整数 注释 = "当按钮被单击后发送此事件" 折叠>
    参数 来源对象 <类型 = 按钮 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    {
        如果 (来源对象 == 按钮_打开)
        {
            如果 (超级列表框_模块.现行选中项 == -1)
            {
                信息框 ("未选择要打开的模块！", 信息框按钮.警告图标, "警告")
                返回 (0)
            }
            文件名 = 模块数组.取成员 (超级列表框_模块.现行选中项).FullDllName
            进程ID = 进程数组.取成员 (超级列表框_进程.现行选中项).进程ID
            模块名称 = 模块数组.取成员 (超级列表框_模块.现行选中项).BaseDllName

            关闭窗口 (1)
        }
        否则 (来源对象 == 按钮_取消)
        {
            关闭窗口 (0)
        }
        否则 (来源对象 == 按钮_刷新)
        {
            枚举进程信息 ()

        }
        返回 (0)
    }

    方法 进程信息类_创建完毕 <接收事件 类型 = 整数 注释 = "当本组件及其中所有子组件均被创建完毕后发送此事件." 折叠>
    参数 来源对象 <类型 = 进程信息类 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    {
        枚举进程信息 ()
        返回 (0)
    }

    方法 枚举进程信息 <类型 = 整数 折叠>
    {
        超级列表框_进程.全部删除 ()
        如果 (快照辅助类.枚举进程信息 (进程数组) > 0)
        {
            进程数组.枚举循环 ()
            {
                变量 表项索引 <类型 = 整数>
                变量 ID <类型 = 整数>
                ID = 进程数组.取枚举值 ().进程ID
                表项索引 = 超级列表框_进程.插入表项 (-1, 到文本 (ID))
                超级列表框_进程.置标题 (表项索引, 1, 进程数组.取枚举值 ().进程名称)
            }
            超级列表框_进程.现行选中项 = 0
        }
        返回 (0)
    }

    方法 超级列表框_当前表项被改变 <接收事件 类型 = 整数 注释 = "  如果当前焦点所处表项被改变即产生此事件,接收到此事件后读取" 注释 = "\"现行选中项\"属性即可获得当前表项的索引." 折叠>
    参数 来源对象 <类型 = 超级列表框 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    {
        如果 (来源对象 == 超级列表框_进程)
        {
            超级列表框_模块.全部删除 ()
            变量 PID <类型 = 整数>
            PID = 进程数组.取成员 (超级列表框_进程.现行选中项).进程ID
            如果 (PID == 0)  // 系统进程
            {
                返回 (0)
            }
            变量 进程 <类型 = NT进程操作类>
            如果 (进程.打开进程 (PID) == 真)
            {
                如果 (进程.枚举模块信息 (模块数组) > 0)
                {
                    模块数组.枚举循环 ()
                    {
                        变量 表项索引 <类型 = 整数>
                        表项索引 = 超级列表框_模块.插入表项 (-1, 到文本 (模块数组.取枚举值 ().lpBaseOfDll))
                        超级列表框_模块.置标题 (表项索引, 1, 模块数组.取枚举值 ().BaseDllName)
                    }

                }

            }
        }
        返回 (0)
    }
}
