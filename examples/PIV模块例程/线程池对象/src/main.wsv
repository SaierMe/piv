<火山程序 类型 = "通常" 版本 = 1 />

包 火山.程序

类 启动类 <公开 基础类 = 窗口程序类 折叠>
{
    变量 主窗口对象 <类型 = 我的主窗口>

    方法 启动方法 <公开 类型 = 整数 折叠>
    {
        主窗口对象.创建主窗口 ()
        返回 (1)
    }
}

# ===
# 注意: 火山本身的语法检查不能检查出线程对象中的部分错误
# 比如提供的参数类型和数量和绑定的方法不一致,此时会出现大量的英文报错
# 如果遇到这种情况,请自己检查好代码

类 我的主窗口 <基础类 = 窗口 @视窗.布局 = "client_size = \"421, 243\"" 标题 = "线程池测试">
{
    变量 按钮_创建 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 101\r\npos = \"232, 20, 80, 27\"" 标题 = "创建线程池">
    变量 按钮_销毁 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 102\r\npos = \"326, 20, 80, 27\"" 标题 = "温柔销毁" 禁止 = 真>
    变量 按钮_暂停 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 103\r\npos = \"232, 64, 80, 27\"" 标题 = "暂停线程池" 禁止 = 真>
    变量 按钮_继续 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 104\r\npos = \"326, 64, 80, 27\"" 标题 = "继续线程池" 禁止 = 真>
    变量 按钮_清空 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 105\r\npos = \"232, 108, 80, 27\"" 标题 = "清空任务" 禁止 = 真>
    变量 按钮_投递 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 106\r\npos = \"326, 108, 80, 27\"" 标题 = "投递任务" 禁止 = 真>
    变量 按钮_调整 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 107\r\npos = \"232, 199, 80, 27\"" 标题 = "调整线程池" 禁止 = 真>
    变量 标签_线程数量 <类型 = 标签 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 108\r\npos = \"20, 20, 200, 21\"" 标题 = "总线程数量: "
            纵向对齐方式 = 居中>
    变量 标签_执行任务数 <类型 = 标签 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 109\r\npos = \"20, 50, 200, 21\"" 标题 = "执行任务数: "
            纵向对齐方式 = 居中>
    变量 标签_队列任务数 <类型 = 标签 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 110\r\npos = \"20, 80, 200, 21\"" 标题 = "队列任务数: "
            纵向对齐方式 = 居中>
    变量 标签_空闲线程 <类型 = 标签 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 111\r\npos = \"20, 110, 200, 21\"" 标题 = "空闲线程数: "
            纵向对齐方式 = 居中>
    变量 标签_完成任务数 <类型 = 标签 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 112\r\npos = \"20, 140, 200, 21\"" 标题 = "完成任务数: "
            纵向对齐方式 = 居中>
    变量 标签_工作状态 <类型 = 标签 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 113\r\npos = \"20, 170, 200, 21\"" 标题 = "线程池状态: "
            纵向对齐方式 = 居中>
    变量 标签_新线程数 <类型 = 标签 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 114\r\npos = \"20, 201, 67, 21\"" 标题 = "新的线程数:"
            纵向对齐方式 = 居中>
    变量 编辑框_新线程数 <类型 = 编辑框 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 115\r\npos = \"92, 201, 128, 23\"" 输入方式 = 整数文本输入>
    变量 时钟1 <类型 = 时钟 隐藏值属性 = "0" @视窗.布局 = "id = 116\r\npos = \"366, 205, 17, 17\"">
    变量 按钮_强制销毁 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 117\r\npos = \"232, 152, 80, 27\"" 标题 = "强制销毁"
            禁止 = 真>
    变量 ""
    变量 线程池 <静态 类型 = 线程池对象类 注释 = "为了在静态方法中调用\"是否需要退出\",所以要设置为静态."
            注释 = "跟需要用接收事件的\"线程池类\"不同,\"线程池对象类\"设置为静态无任何不良影响">

    方法 我的主窗口_创建完毕 <接收事件 类型 = 整数 注释 = "当本组件及其中所有子组件均被创建完毕后发送此事件." 折叠>
    参数 来源对象 <类型 = 我的主窗口 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    {
        时钟1.时钟周期 = 1000  // 每隔一秒刷新显示
        编辑框_新线程数.内容 = 到文本 (线程池.CPU核心数)
        返回 (0)
    }

    方法 按钮_被单击 <接收事件 类型 = 整数 注释 = "当按钮被单击后发送此事件" 折叠>
    参数 来源对象 <类型 = 按钮 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    {
        如果 (来源对象 == 按钮_创建)
        {
            如果 (线程池.创建 () == 真)
            {
                按钮_创建.禁止 = 真
                按钮_调整.禁止 = 假
                按钮_暂停.禁止 = 假
                按钮_投递.禁止 = 假
                按钮_清空.禁止 = 假
                按钮_销毁.禁止 = 假
                按钮_强制销毁.禁止 = 假
            }
            否则
            {
                调试输出 (取最后错误信息 ())
                信息框 ("无法创建线程池！", 信息框按钮.错误图标, "错误")

            }

        }
        否则 (来源对象 == 按钮_投递)
        {
            计次循环 (1000)
            {
                变量 信息 <类型 = 子频道分组信息>
                信息.分组Id = 取循环索引 ()
                信息.分组名 = "自定义分组"
                信息.子频道Id列表.重置数组 (3, 假)
                线程池.投递静态方法 (静态执行函数, 取循环索引 (), 信息)
                线程池.投递动态方法 (本对象, "workfun", 取循环索引 (), 信息)
            }

        }
        否则 (来源对象 == 按钮_清空)
        {
            线程池.清空任务 ()

        }
        否则 (来源对象 == 按钮_调整)
        {
            线程池.调整线程池 (文本到整数 (编辑框_新线程数.内容))

        }
        否则 (来源对象 == 按钮_暂停)
        {
            如果 (线程池.暂停 () == 真)
            {
                按钮_暂停.禁止 = 真
                按钮_继续.禁止 = 假
            }

        }
        否则 (来源对象 == 按钮_继续)
        {
            如果 (线程池.继续 () == 真)
            {
                按钮_暂停.禁止 = 假
                按钮_继续.禁止 = 真
            }

        }
        否则 (来源对象 == 按钮_销毁)
        {
            按钮_创建.禁止 = 真
            按钮_调整.禁止 = 真
            按钮_暂停.禁止 = 真
            按钮_继续.禁止 = 真
            按钮_投递.禁止 = 真
            按钮_清空.禁止 = 真
            按钮_销毁.禁止 = 真
            按钮_强制销毁.禁止 = 真
            // 等待队列任务全部完成后销毁
            如果 (线程池.销毁 (假, 3000) == 真)  // 3秒后销毁线程池
            {
                按钮_创建.禁止 = 假
            }
            否则
            {
                如果 (线程池.工作状态 == 5)
                {
                    按钮_暂停.禁止 = 真
                    按钮_继续.禁止 = 假
                }
                否则
                {
                    按钮_暂停.禁止 = 假
                    按钮_继续.禁止 = 真

                }
                按钮_调整.禁止 = 假
                按钮_投递.禁止 = 假
                按钮_清空.禁止 = 假
                按钮_销毁.禁止 = 假
                按钮_强制销毁.禁止 = 假

            }

        }
        否则 (来源对象 == 按钮_强制销毁)
        {
            按钮_创建.禁止 = 真
            按钮_调整.禁止 = 真
            按钮_暂停.禁止 = 真
            按钮_继续.禁止 = 真
            按钮_投递.禁止 = 真
            按钮_清空.禁止 = 真
            按钮_销毁.禁止 = 真
            按钮_强制销毁.禁止 = 真
            // 立即销毁线程池
            如果 (线程池.销毁 (真) == 真)
            {
                按钮_创建.禁止 = 假
            }
            否则
            {
                如果 (线程池.工作状态 == 5)
                {
                    按钮_暂停.禁止 = 真
                    按钮_继续.禁止 = 假
                }
                否则
                {
                    按钮_暂停.禁止 = 假
                    按钮_继续.禁止 = 真

                }
                按钮_调整.禁止 = 假
                按钮_投递.禁止 = 假
                按钮_清空.禁止 = 假
                按钮_销毁.禁止 = 假
                按钮_强制销毁.禁止 = 假
            }
        }
        返回 (0)
    }

    方法 我的主窗口_将被销毁 <接收事件 类型 = 整数 注释 = "当本组件被销毁前发送此事件" 折叠>
    参数 来源对象 <类型 = 我的主窗口 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    {
        时钟1.时钟周期 = 0
        // 如果调用了非强制销毁线程池,且等待时间为 -1
        // 关闭窗口后程序可能仍驻留在进程,直到队列任务执行完才退出
        // 这是因为关闭窗口后不会立即调用线程池的类"类_清理"
        // 所以在这里加上强制销毁,就可以马上结束程序
        线程池.销毁 (假, 2000)
        返回 (0)
    }

    方法 时钟_周期事件 <接收事件 类型 = 整数 注释 = "每当经过了指定的时钟周期,将发送本事件." 折叠>
    参数 来源对象 <类型 = 时钟 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    {
        如果 (来源对象 == 时钟1)
        {
            标签_线程数量.标题 = "总线程数量: " + 到文本 (线程池.现行线程数)
            标签_空闲线程.标题 = "空闲线程数: " + 到文本 (线程池.空闲线程数)
            标签_执行任务数.标题 = "执行任务数: " + 到文本 (线程池.执行任务数)
            标签_队列任务数.标题 = "队列任务数: " + 到文本 (线程池.队列任务数)
            标签_完成任务数.标题 = "完成任务数: " + 到文本 (线程池.已完成任务数)
            标签_工作状态.标题 = "线程池状态: " + 多项选择 (线程池.工作状态, "未创建", "正在销毁", "正在创建", "正常工作", "正在调整", "暂停中", "正在清空任务")

        }
        返回 (0)
    }

    方法 静态执行函数 <静态 类型 = 整数 折叠>
    参数 索引 <类型 = 整数>
    参数 信息 <类型 = 子频道分组信息>
    {
        延时 (500)  // 给线程加些耗时
        // 将第一个提交的任务设置为死循环
        如果 (索引 == 0)
        {
            // 只调试输出第一个任务
            调试输出 (信息)
            判断循环 (真)  // 死循环的线程,就算程序关闭了,进程还会卡在后台里
            {
                如果 (线程池.是否需要退出 (0) == 真)  // 参数的等待时间可以作为"延时"使用
                {
                    // 销毁线程池时才会返回真,这时应该结束线程
                    返回 (0)  // 返回就会结束线程
                }
                延时 (1000)  // 模拟耗时操作
            }

        }
        返回 (0)
    }

    方法 动态执行函数 <类型 = 整数 折叠 @输出名 = "workfun" @强制输出 = 真>
    参数 索引 <类型 = 整数>
    参数 信息 <类型 = 子频道分组信息>
    {
        延时 (500)  // 给线程加些耗时

        如果 (索引 == 0)  // 将第一个提交的任务设置为死循环
        {
            // 只调试输出第一个任务
            调试输出 (信息)
            判断循环 (真)  // 死循环的线程,就算程序关闭了,进程还会卡在后台里
            {
                如果 (线程池.是否需要退出 (0) == 真)  // 参数的等待时间可以作为"延时"使用
                {
                    // 销毁线程池时才会返回真,这时应该结束线程
                    返回 (0)  // 返回就会结束线程
                }
                延时 (1000)  // 模拟耗时操作
            }

        }
        返回 (0)
    }
}

类 子频道分组信息 <公开 折叠 "">
{
    变量 分组名 <公开 类型 = 文本型>
    变量 分组Id <公开 类型 = 整数>
    变量 子频道Id列表 <公开 类型 = 长整数数组类>

    方法 取展示内容 <公开 注释 = "将本对象中的所有数据用文本方式填入到所提供的文本参数中,用作调试或其它场合展示时使用." 折叠2 @虚拟方法 = 可覆盖 @输出名 = "GetDumpString"
            @视窗.后缀文本 = "override">
    参数 展示内容 <类型 = 文本型 注释 = "用作填入本对象中所有数据的展示文本">
    参数 最大展示数据尺寸 <类型 = 整数 注释 = "提供用户所指定的最大允许展示数据尺寸,小于0表示全部展示,等于0表示展示默认尺寸数据.">
    {
        展示内容 = "<子频道分组信息> 总共 3 个成员:\r\n"
        加入文本 (展示内容, "1. 分组名: " + 取调试文本2 (最大展示数据尺寸, 分组名) + "\r\n")
        加入文本 (展示内容, "2. 分组Id: " + 取调试文本2 (最大展示数据尺寸, 分组Id) + "\r\n")
        加入文本 (展示内容, "3. 子频道Id列表: " + 取调试文本2 (最大展示数据尺寸, 子频道Id列表) + "\r\n")
    }
}
