<火山程序 类型 = "通常" 版本 = 1 />

包 火山.程序

类 全局 <注释 = "虽然个人不推荐,但很多人这样用静态变量写程序,就举个例子">
{
    变量 日志 <公开 静态 类型 = Quill日志类>

    方法 初始化 <公开>
    {
        挂接事件 (日志)  // 静态变量需要手动挂接事件
        变量 选项 <类型 = Quill轮替文件选项>
        变量 结果 <类型 = 整数>
        选项.每日轮替时间 = "00:00"  // 每天的零时零分切换文件
        选项.轮替命名方案 = Quill轮替命名方案.日期  // 比如当前文件是log.txt,到第二天旧文件会改成 log.20250429.txt
        结果 = 日志.打开轮替文件 (取运行目录 () + "log\\Daily.txt", 选项)
        调试检查 (结果 == 1)  // 打开了新文件
        日志.开启记录器 ("Daily", 真, 真)  // 第二个参数设置为真,才能接收事件,第三个建议只在控制台使用
        日志.日志级别 = Quill日志级别.Trace_L3  // 默认只输出信息以上的级别,这里改成允许所有级别,必须在开启之后切换级别
    }

    方法 销毁 <公开 注释 = "静态变量建议在退出程序前取消挂接,和释放数据" 折叠>
    {
        取消事件挂接 (日志)
        日志.关闭 ()
    }

    方法 Quill日志类_日志输出 <接收事件 类型 = 整数 注释 = "当Quill后端线程处理了当前事件接收器的日志消息,触发本事件."
            注释 = "注意: 必须在\"开启记录器\"时将\"输出到事件\"设置为真,才能接收到本事件.">
    参数 来源对象 <类型 = Quill日志类 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    参数 元数据 <类型 = Quill元数据 注释 = "日志元数据,含有源文件名、行号、方法名、日志级别等信息.">
    参数 时间戳 <类型 = 长整数 注释 = "纳秒级别的日志记录时间戳">
    参数 记录器名称 <类型 = 文本视图类U 注释 = "输出这条日志的记录器名称">
    参数 日志消息 <类型 = 文本视图类U 注释 = "日志消息的正文">
    参数 日志语句 <类型 = 文本视图类U 注释 = "完整的日志行,包括时间、源语句位置等日志格式和正文,以换行符结尾.">
    {
        如果 (来源对象 == 日志)
        {
            // 调试输出不支持别名类型,需要转换到文本型才能输出
            调试输出 (元数据.可跳转源位置, 纳秒时间戳到文本 (时间戳), 记录器名称.取文本 (), 日志消息.取文本 ())
        }
        返回 (0)
    }
}

类 启动类 <公开 基础类 = 程序类>
{
    变量 日志 <类型 = Quill日志类>
    变量 全局实例 <类型 = 全局 注释 = "要使用里面的接收事件和成员方法,必须实例化;" 注释 = "而且放在启动类,确保实例的生命周期足够长.">

    方法 启动方法 <公开 类型 = 整数>
    {
        如果 (真)
        {
            // 开启记录器也会自动启动后端,如果你想自定义选项,就手动调用
            // 下面演示了将日志级别的描述改成中文
            变量 选项 <类型 = Quill后端选项>
            调试输出Ex (选项.日志级别描述)
            选项.日志级别描述.取成员 (3).置字面量 ("调试")
            选项.日志级别描述.取成员 (4).置字面量 ("信息")
            选项.日志级别描述.取成员 (5).置字面量 ("通知")
            选项.日志级别描述.取成员 (6).置字面量 ("警告")
            选项.日志级别描述.取成员 (7).置字面量 ("错误")
            选项.日志级别描述.取成员 (8).置字面量 ("致命")
            选项.日志级别描述.取成员 (9).置字面量 ("回溯")
            调试输出Ex (选项.日志级别描述)
            Quill后端.启动 (选项)
        }

        全局实例.初始化 ()  // 初始化全局的日志记录器

        // 设置日志的格式
        调试输出Ex (日志.格式选项.日志格式, 日志.格式选项.日志格式)
        // 下面去掉了原格式的长度对齐
        日志.格式选项.日志格式.值 = "%(time) [%(thread_id)] %(short_source_location) %(log_level) %(logger) %(message)"

        // 必须在"开启记录器"之前打开文件,一个Quill日志类可以打开多个文件
        如果 (真)
        {
            变量 文件选项 <类型 = Quill文件选项>
            变量 格式选项 <类型 = Quill格式选项>
            // 这种文件启动后会一直写日志到同一个文件中,不会轮替切换文件
            // 但加上附加日期格式后,可以确保每次启动都创建一个新的日志文件
            文件选项.附加日期格式 = ".%Y-%m-%d_%H%M"  // 注意文件里不能有:号
            文件选项.重写模式 = 假  // 这是默认选项,如果为真,将在写入前清空文件原有的内容

            // 文件默认使用记录器的格式选项,但你也可以给每个文件设置独立的格式
            格式选项.日志格式.置文本 ("%(time) %(short_source_location) %(log_level) %(message)")
            格式选项.时间戳格式.置字面量 ("%Y-%m-%d %H:%M:%S")  // 加上日期,去掉后面纳秒时间
            文件选项.覆盖日志格式选项 = 格式选项
            日志.打开日志文件 (取运行目录 () + "log\\info.txt", 文件选项)

        }
        // 打开更多文件
        打开每日文件 ()
        打开分钟轮替文件 ()
        打开小时轮替文件 ()

        日志.开启记录器 ("root", 真, 真)  // 记录器的名称不要重复
        日志.日志级别 = Quill日志级别.调试  // 允许输出调试以上的级别,默认为"信息"级别

        // 开始输出日志
        日志.加入跟踪日志_L3 ("这条日志不会被处理")  // 低于记录器"日志级别"的日志不会被处理
        间隔输出示例 ()
        回溯日志示例 ()

        // 默认情况下,后端线程将按一定的间隔时间自动刷新日志
        // 执行下面的方法可以手动刷新(输出显示)所有的日志
        日志.刷新日志 ()

        // 线程中循环输出日志
        启动静态线程 (持续输出, 3000)
        启动无参数无返回值动态线程 (本对象, 持续输出2)

        标准输出行 (, "\r\n开始持续日志,可按任意键退出...")
        标准输入字符 ()

        全局实例.销毁 ()  // 退出前取消事件挂接和关闭日志
        返回 (1)
    }

    方法 打开每日文件 <注释 = "两个Quill日志类可以同时给一个文件写日志" 折叠 "">
    {
        变量 选项 <类型 = Quill轮替文件选项>
        变量 结果 <类型 = 整数>
        选项.每日轮替时间 = "00:00"  // 每天的零时零分切换文件
        选项.轮替命名方案 = Quill轮替命名方案.日期  // 比如当前文件是log.txt,到第二天旧文件会改成 log.20250429.txt
        结果 = 日志.打开轮替文件 (取运行目录 () + "log\\Daily.txt", 选项)
        调试检查 (结果 == 0)  // 因为另一个记录器已经打开了同样的文件,这里应该返回0;
    }

    方法 打开分钟轮替文件 <折叠>
    {
        变量 选项 <类型 = Quill轮替文件选项>
        变量 结果 <类型 = 整数>
        选项.分钟轮替间隔 = 10  // 每十分钟切换一次文件
        选项.轮替命名方案 = Quill轮替命名方案.日期时间
        结果 = 日志.打开轮替文件 (取运行目录 () + "log\\Minutely.txt", 选项)
        调试检查 (结果 == 1)  // 新文件
    }

    方法 打开小时轮替文件 <折叠>
    {
        变量 选项 <类型 = Quill轮替文件选项>
        变量 结果 <类型 = 整数>
        选项.小时轮替间隔 = 1  // 每1小时切换一次文件
        选项.轮替命名方案 = Quill轮替命名方案.日期  // 如果加上日期仍会重名,后面会加上序号,如".20250429.1"

        // 时间轮替可以和文件大小轮替同时使用
        // 下面限制日志文件的尺寸为1MB大小
        // 当日志文件大于此尺寸,就会切换文件
        选项.最大文件尺寸 = 1024 * 1024

        结果 = 日志.打开轮替文件 (取运行目录 () + "log\\Hourly.txt", 选项)
        调试检查 (结果 == 1)  // 新文件
    }

    方法 回溯日志示例 <折叠>
    {
        // 要使用回溯日志必须先初始化,第一个参数为回溯日志的最大数量
        日志.初始化回溯 (2, Quill日志级别.错误)  // 第二个参数决定了触发回溯的时机
        // 由于只设置了2条消息的容量,所以下面的第1和第2条会被后两条覆盖
        日志.加入回溯日志 ("回溯信息: {}", 1)  // 将被覆盖
        日志.加入回溯日志 ("回溯信息: {}", 2)  // 将被覆盖
        日志.加入回溯日志 ("回溯信息: {}", 3)
        日志.加入回溯日志 ("回溯信息: {}", 4)
        // 回溯日志不会立即输出,需要等到有指定级别以上的日志时才输出
        日志.加入调试日志 ("插入调试日志")
        日志.加入信息日志 ("插入信息日志")
        // 遇到错误以上级别触发回溯
        日志.加入错误日志 ("加入错误信息后,立即触发回溯")
        如果 (假)
        {
            日志.刷新回溯 ()  // 也可以这样立即输出
        }
    }

    方法 间隔输出示例 <折叠>
    {
        计次循环 (500)
        {
            // 这里最小间隔1000纳秒(1微秒)
            // 后面会显示跟上一条隔了多少条被丢弃的日志,如: (25x)
            日志.加入调试日志_间隔 (1000, "间隔输出,序号: {}.", 取循环索引 ())

        }
    }

    方法 持续输出 <静态 折叠>
    参数 延迟时间 <类型 = 整数>
    {
        判断循环 (真)
        {
            延时 (延迟时间)
            全局.日志.加入调试日志 ("这是一条调试日志")
            全局.日志.加入信息日志 ("这是一条信息日志")
            全局.日志.加入警告日志 ("这是一条警告日志")
            全局.日志.加入错误日志 ("这是一条错误日志")

        }
    }

    方法 持续输出2 <折叠>
    {
        判断循环 (真)
        {
            延时 (6000)
            日志.加入调试日志 ("这是一条调试日志")
            日志.加入信息日志 ("这是一条信息日志")
            日志.加入警告日志 ("这是一条警告日志")
            日志.加入错误日志 ("这是一条错误日志")

        }
    }

    方法 Quill日志类_日志输出 <接收事件 类型 = 整数 注释 = "当Quill后端线程处理了当前事件接收器的日志消息,触发本事件."
            注释 = "注意: 必须在\"开启记录器\"时将\"输出到事件\"设置为真,才能接收到本事件.">
    参数 来源对象 <类型 = Quill日志类 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    参数 元数据 <类型 = Quill元数据 注释 = "日志元数据,含有源文件名、行号、方法名、日志级别等信息.">
    参数 时间戳 <类型 = 长整数 注释 = "纳秒级别的日志记录时间戳">
    参数 记录器名称 <类型 = 文本视图类U 注释 = "输出这条日志的记录器名称">
    参数 日志消息 <类型 = 文本视图类U 注释 = "日志消息的正文">
    参数 日志语句 <类型 = 文本视图类U 注释 = "完整的日志行,包括时间、源语句位置等日志格式和正文,以换行符结尾.">
    {
        如果 (来源对象 == 日志)
        {
            // 调试输出Ex是PIV模块的方法,可以输出STL类型和各种无符号数值
            调试输出Ex (元数据.源语句位置简写, 元数据.源方法名, 元数据.日志级别, 时间戳, 记录器名称, 日志消息)

        }
        返回 (0)
    }
}
