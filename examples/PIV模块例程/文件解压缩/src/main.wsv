<火山程序 类型 = "通常" 版本 = 1 />

包 火山.程序

类 启动类 <公开 基础类 = 窗口程序类 折叠>
{
    变量 主窗口对象 <类型 = 我的主窗口>

    方法 启动方法 <公开 类型 = 整数>
    {
        主窗口对象.创建主窗口 ()
        返回 (1)
    }
}

# ===

类 我的主窗口 <基础类 = 窗口 注释 = "样例主窗口" @视窗.布局 = "client_size = \"700, 532\"" 标题 = "文件解压缩">
{
    变量 按钮_压缩 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 101\r\npos = \"28, 11, 120, 36\"" 标题 = "创建压缩包">
    变量 按钮_查看 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 102\r\npos = \"193, 11, 120, 36\"" 标题 = "查看压缩包" 禁止 = 真>
    变量 按钮_解压 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 103\r\npos = \"358, 11, 120, 36\"" 标题 = "解压" 禁止 = 真>
    变量 按钮_编辑 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 104\r\npos = \"525, 11, 120, 36\"" 标题 = "编辑压缩包" 禁止 = 真>
    变量 超级列表框1 <类型 = 超级列表框 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 105\r\npos = \"29, 67, 648, 384\"" "类型" = 报表列表框
            报表列 = "0\n-1\n0\n200\n路径\n0\n-1\n0\n80\n大小\n0\n-1\n0\n80\n压缩后大小\n0\n-1\n0\n80\n类型\n0\n-1\n0\n120\n修改时间\n0\n-1\n0\n80\nCRC32"
            显示表格线 = 假>
    变量 进度条1 <类型 = 进度条 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 106\r\npos = \"29, 490, 648, 24\"" 最小位置 = 0 最大位置 = 100>
    变量 标签_进度 <类型 = 标签 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 107\r\npos = \"33, 460, 643, 24\"" 标题 = "进度: ">
    变量 ""
    变量 存档压缩 <类型 = 存档压缩类>
    变量 存档解压 <类型 = 存档解压类 "">
    变量 存档编辑 <类型 = 存档编辑类>

    方法 按钮_被单击 <接收事件 类型 = 整数 注释 = "当按钮被单击后发送此事件">
    参数 来源对象 <类型 = 按钮 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    {
        如果 (来源对象 == 按钮_压缩)
        {
            来源对象.禁止 = 真
            如果 (创建压缩包 () == 真)
            {
                按钮_查看.禁止 = 假
            }
            来源对象.禁止 = 假

        }
        否则 (来源对象 == 按钮_查看)
        {
            如果 (查看压缩包 () == 真)
            {
                按钮_解压.禁止 = 假
                按钮_编辑.禁止 = 假

            }

        }
        否则 (来源对象 == 按钮_解压)
        {
            来源对象.禁止 = 真
            解压压缩包 ()
            来源对象.禁止 = 假

        }
        否则 (来源对象 == 按钮_编辑)
        {
            来源对象.禁止 = 真
            编辑压缩包 ()
            来源对象.禁止 = 假

        }
        返回 (0)
    }

    方法 创建压缩包 <类型 = 逻辑型>
    {
        如果 (存档压缩.创建自文件 (取运行目录 () + "temp.7z", 真, 存档输出格式.SevenZip) == 假)
        {
            信息框 (存档压缩.取最后错误 ())
            返回 (假)
        }

        // 设置一些压缩参数
        存档压缩.设置密码 ("abc123", 假)  // 第二个参数为真后就需要输入密码才能看到文件名之类的信息
        存档压缩.更新方式 = 存档更新方式.添加并替换文件
        存档压缩.压缩等级 = 存档压缩等级.快速压缩
        存档压缩.线程数 = 取CPU核心数 ()

        // 添加单个文件
        存档压缩.添加文件 (取运行目录 () + "7z.dll", "项目文件\\7z.dll")

        // 添加字节集(随机生成一个1MB大的字节集)
        变量 标准随机 <类型 = 标准随机数类>
        如果 (存档压缩.添加字节集 (标准随机.取随机字节集 (1024 * 1024, 真), "随机数据.txt") == 假)
        {
            调试输出 ("添加字节集", 存档压缩.取最后错误 ())
            存档压缩.关闭 ()
            信息框 (存档压缩.取最后错误 ())
            返回 (假)

        }

        // 获取整个例程的路径
        变量 例程目录 <类型 = 文本型>
        例程目录 = 取当前目录 ()
        删除字符 (例程目录, 取文本长度 (例程目录) - 取文本长度 ("文件解压缩"), 取文本长度 ("文件解压缩"))

        // 添加文件数组
        变量 文件数组 <类型 = 文本数组类>
        文件枚举类.枚举文件 (例程目录, "*.vprj", 文件数组, 真, 真)  // 枚举所有 vprj 文件
        存档压缩.添加文件数组 (文件数组)  // 这个添加之后,文件都在压缩包的根目录里

        // 通过筛选添加所有的 v 文件,添加到压缩包后带子目录
        存档压缩.添加匹配文件 (例程目录, "*.v", 真)

        存档解压.关闭 ()  // 压缩前需要确保目标文件未被占用
        // 开始压缩
        如果 (存档压缩.压缩到文件 (取运行目录 () + "temp.7z") == 假)
        {
            存档压缩.关闭 ()
            信息框 (存档压缩.取最后错误 ())
            返回 (假)
        }
        // 压缩结束后关闭
        存档压缩.关闭 ()
        返回 (真)
    }

    方法 查看压缩包 <类型 = 逻辑型>
    {
        // 首先打开文件,最后一个参数"自动",意思是根据文件头和扩展名识别格式
        // 但如果遇到一些格式没有文件头,扩展名也错误的话,就会识别失败,需要你手动输入正确的格式
        如果 (存档解压.打开文件 (取运行目录 () + "temp.7z", 真, "abc123", 存档输入格式.自动) == 假)
        {
            信息框 (存档解压.取最后错误 ())
            返回 (假)
            运行控制台程序
        }
        存档解压.压缩密码 = "abc123"
        // 获取所有项目到列表框
        超级列表框1.全部删除 ()
        存档解压.枚举循环 ()
        {
            变量 表项索引 <类型 = 整数>
            表项索引 = 超级列表框1.插入表项 (-1, 存档解压.取枚举路径 ())
            超级列表框1.置标题 (表项索引, 1, 到文本 (存档解压.取枚举项目长度 ()))
            超级列表框1.置标题 (表项索引, 2, 到文本 (存档解压.取枚举打包长度 ()))
            如果 (存档解压.取枚举是否目录 () == 真)
            {
                超级列表框1.置标题 (表项索引, 3, "文件夹")
            }
            否则
            {
                超级列表框1.置标题 (表项索引, 3, "文件")
                如果 (存档解压.取枚举属性 (存档属性名.CRC).是否为无符号整数 ())
                {
                    超级列表框1.置标题 (表项索引, 5, 取长整数十六进制文本 (存档解压.取枚举属性 (存档属性名.CRC).取无符号整数 (), 8))
                }
                否则
                {
                    调试输出 (存档解压.取枚举属性 (存档属性名.CRC).取类型 ())

                }

            }
            超级列表框1.置标题 (表项索引, 4, 存档解压.取枚举修改时间 ().取格式时间 ("%F %T"))

        }
        // 先不关闭文件
        返回 (真)
    }

    方法 解压压缩包 <折叠>
    {
        // 解压全部文件
        如果 (存档解压.是否为空 () == 假)
        {
            存档解压.解压到 (取运行目录 () + "解压目录")

            // 解压部分文件,更多自己看吧
            // 存档解压.解压匹配文件 ("*.v", 取运行目录 () + "解压目录2")

        }
    }

    方法 编辑压缩包
    {
        // 文件打开后就禁止其他类写入,所以要先关闭
        存档解压.关闭 ()

        如果 (存档编辑.打开文件 (取运行目录 () + "temp.7z", 真, 存档输出格式.SevenZip, 存档更新方式.添加并替换文件, "abc123") == 真)
        {
            // 项目改名
            存档编辑.路径项目更名 ("随机数据.txt", "数据.data")
            // 替换项目数据
            变量 标准随机 <类型 = 标准随机数类>
            存档编辑.更新路径项目自字节集 ("文件解压缩.vprj", 标准随机.取随机字节集 (1024 * 512, 真))
            // 删除项目
            存档编辑.删除路径项目 ("线程池测试.vprj")
            存档编辑.删除路径项目 ("CMD管道测试.vprj")
            存档编辑.删除路径项目 ("HOOK.vprj")
            存档编辑.删除路径项目 ("PE查看器.vprj")
            存档编辑.删除路径项目 ("talebook下载器.vprj")
            // 提交所有更改
            存档编辑.应用更改 ()
            存档编辑.关闭 ()

            // 重新将项目列出在列表框中
            查看压缩包 ()

        }
    }

    方法 存档压缩类_压缩进度改变 <接收事件 类型 = 整数 注释 = "当解压进度发生改变时,本事件将被多次触发直到解压结束." 注释 = " 1. 请勿在此执行耗时操作,否则将拖慢解压进度;"
            注释 = " 2. 通过返回值可以停止解压;" 注释 = " 3. 如果是在主线程调用解压,可以直接在本事件中操作界面;"
            注释 = " 4. 若是在多线程中调用解压,则应该尽量使用\"高级主线程处理器\"" 注释 = "等方式在子线程中操作界面组件;" 返回值注释 = "返回0表示继续压缩,返回其他任意值停止压缩.">
    参数 来源对象 <类型 = 存档压缩类 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    参数 文件路径 <类型 = 文本型 注释 = "当前正在压缩的文件路径.">
    参数 压缩进度 <类型 = 整数 注释 = "整体的压缩百分比进度,范围为[0-100].">
    参数 总压缩大小 <类型 = 长整数 注释 = "所有待压缩的文件大小(解压后大小).">
    参数 已压缩大小 <类型 = 长整数 注释 = "目前已压缩的大小.">
    参数 整体压缩比 <类型 = 整数 注释 = "当前已压缩数据的压缩比(0-100),该值会随压缩进度变化.">
    {
        如果 (来源对象 == 存档压缩)
        {
            进度条1.位置 = 压缩进度
            标签_进度.标题 = 取格式文本 ("进度: %03d%%  %I64d/%I64d  路径: %s, 压缩比: %d", 压缩进度, 已压缩大小, 总压缩大小, 文件路径, 整体压缩比)
            处理事件 ()
        }
        返回 (0)
    }

    方法 存档解压类_解压进度改变 <接收事件 类型 = 整数 注释 = "当压缩进度发生改变时,本事件将被多次触发直到压缩结束." 注释 = " 1. 请勿在此执行耗时操作,否则将拖慢压缩进度;"
            注释 = " 2. 通过返回值可以停止压缩;" 注释 = " 3. 如果是在主线程调用压缩,可以直接在本事件中操作界面;"
            注释 = " 4. 若是在多线程中调用压缩,则应该尽量使用\"高级主线程处理器\"" 注释 = "等方式在子线程中操作界面组件;" 返回值注释 = "返回0表示继续解压,返回其他任意值停止解压.">
    参数 来源对象 <类型 = 存档解压类 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    参数 文件路径 <类型 = 文本型 注释 = "当前正在解压的文件路径.">
    参数 解压进度 <类型 = 整数 注释 = "整体的解压百分比进度,范围为[0-100].">
    参数 总解压大小 <类型 = 长整数 注释 = "所有待解压的文件大小(解压后大小).">
    参数 已解压大小 <类型 = 长整数 注释 = "目前已解压的大小.">
    参数 整体压缩比 <类型 = 整数 注释 = "当前已解压数据的压缩比(0-100),该值会随解压进度变化.">
    {
        如果 (来源对象 == 存档解压)
        {
            进度条1.位置 = 解压进度
            标签_进度.标题 = 取格式文本 ("进度: %03d%%  %I64d/%I64d  路径: %s, 压缩比: %d", 解压进度, 已解压大小, 总解压大小, 文件路径, 整体压缩比)
            处理事件 ()
        }
        返回 (0)
    }
}
