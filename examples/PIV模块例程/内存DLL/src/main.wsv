<火山程序 类型 = "通常" 版本 = 1 />

包 火山.程序 <"">

类 启动类 <公开 基础类 = 窗口程序类 折叠>
{
    变量 主窗口对象 <类型 = 我的主窗口>

    方法 启动方法 <公开 类型 = 整数 折叠>
    {
        主窗口对象.创建主窗口 ()
        返回 (1)
    }
}

# ===

类 我的主窗口 <基础类 = 窗口 @视窗.布局 = "client_size = \"750, 420\"" 标题 = "内存DLL和远程注入" 允许文件拖放 = 真>
{
    变量 按钮_本地 <类型 = 按钮 隐藏值属性 = "0" @视窗.布局 = "id = 101\r\npos = \"605, 68, 120, 32\"" 标题 = "本地加载">
    变量 按钮_刷新 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 102\r\npos = \"605, 20, 120, 32\"" 标题 = "刷新进程">
    变量 按钮_远程 <类型 = 按钮 隐藏值属性 = "0" @视窗.布局 = "id = 103\r\npos = \"605, 360, 120, 32\"" 标题 = "远程注入">
    变量 按钮_释放 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 104\r\npos = \"605, 308, 120, 32\"" 标题 = "释放DLL"
            禁止 = 真>
    变量 按钮_函数1 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 105\r\npos = \"605, 116, 120, 32\"" 标题 = "执行函数1"
            禁止 = 真>
    变量 按钮_函数2 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 106\r\npos = \"605, 164, 120, 32\"" 标题 = "执行函数2"
            禁止 = 真>
    变量 按钮_函数3 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 107\r\npos = \"605, 212, 120, 32\"" 标题 = "执行函数3"
            禁止 = 真>
    变量 按钮_函数4 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 108\r\npos = \"605, 260, 120, 32\"" 标题 = "执行函数4"
            禁止 = 真>
    变量 超级列表框_进程 <类型 = 超级列表框 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 109\r\npos = \"20, 20, 270, 320\"" "类型" = 报表列表框
            报表列 = "0\n-1\n0\n65\nPID\n0\n-1\n0\n200\n名称" 整行选择 = 真 显示表格线 = 真>
    变量 超级列表框_模块 <类型 = 超级列表框 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 110\r\npos = \"306, 20, 280, 320\"" "类型" = 报表列表框
            整行选择 = 真 显示表格线 = 真 报表列 = "0\n-1\n0\n100\n模块句柄\n0\n-1\n0\n175\n名称">
    变量 编辑框_文件名 <类型 = 编辑框 隐藏值属性 = "0" @视窗.布局 = "id = 111\r\npos = \"20, 360, 470, 32\"">
    变量 按钮_浏览 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 112\r\npos = \"507, 360, 80, 32\"" 标题 = "浏览">
    变量 ""
    变量 "// 内存DLL" <类型 = 内存DLL加载类>
    变量 内存DLL <类型 = 内存模块PP>
    变量 远程注入 <类型 = 远程注入类>
    变量 进程数组 <类型 = 进程快照数组类>
    变量 文件拖放 <类型 = 文件拖放类>

    方法 按钮_被单击 <接收事件 类型 = 整数 注释 = "当按钮被单击后发送此事件" 折叠>
    参数 来源对象 <类型 = 按钮 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    {
        如果 (来源对象 == 按钮_本地)
        {
            变量 加载结果 <类型 = 逻辑型 值 = 假>
            如果 (为64位程序 ())
            {
                变量 DLL数据 <类型 = 字节集类 @视窗.值文件 = "..\\..\\测试DLL\\测试DLL64.dll">
                加载结果 = 内存DLL.从字节集加载 (DLL数据)
            }
            否则
            {
                变量 DLL数据 <类型 = 字节集类 @视窗.值文件 = "..\\..\\测试DLL\\测试DLL32.dll">
                如果 (为调试版 ())
                {
                    信息框 ("“内存模块PP”在32位调试版下无法正常运行，请编译发布版后测试。")
                    返回 (0)
                }
                否则
                {
                    加载结果 = 内存DLL.从字节集加载 (DLL数据)
                }

            }
            如果 (加载结果 == 假)
            {
                信息框 ("加载失败", 信息框按钮.警告图标, "警告")
            }
            否则
            {
                按钮_本地.禁止 = 真
                按钮_远程.禁止 = 真
                按钮_释放.禁止 = 假
                按钮_函数1.禁止 = 假
                按钮_函数2.禁止 = 假
                按钮_函数3.禁止 = 假
                按钮_函数4.禁止 = 假

            }
        }
        否则 (来源对象 == 按钮_远程)
        {
            如果 (超级列表框_进程.现行选中项 == -1)
            {
                信息框 ("请选择你要远程注入的进程！", 信息框按钮.警告图标, "警告")
                返回 (0)
            }
            如果 (远程注入.注入DLL (进程数组.取成员 (超级列表框_进程.现行选中项).进程ID, 编辑框_文件名.内容) == 假)
            {
                信息框 ("注入失败!\r\n\r\n" + 取最后错误信息 (), 信息框按钮.错误图标, "错误")

            }
            否则
            {
                调试输出 (远程注入.是否已注入 ())

                按钮_本地.禁止 = 真
                按钮_远程.禁止 = 真
                按钮_释放.禁止 = 假

            }
        }
        否则 (来源对象 == 按钮_浏览)
        {
            变量 文件对话框 <类型 = 通用对话框 过滤器 = "动态链接库 (*.dll)|*.dll" "类型" = 打开文件>
            文件对话框.文件名 = 编辑框_文件名.内容
            如果 (文件对话框.打开 (本对象) == 真)
            {
                编辑框_文件名.内容 = 文件对话框.文件名

            }

        }
        否则 (来源对象 == 按钮_释放)
        {
            如果 (内存DLL.是否已加载 ())
            {
                内存DLL.释放模块 ()

            }
            如果 (远程注入.是否已注入 ())
            {
                远程注入.释放DLL ()

            }
            按钮_本地.禁止 = 假
            按钮_远程.禁止 = 假
            按钮_释放.禁止 = 真
            按钮_函数1.禁止 = 真
            按钮_函数2.禁止 = 真
            按钮_函数3.禁止 = 真
            按钮_函数4.禁止 = 真

        }
        否则 (来源对象 == 按钮_函数1)
        {
            变量 函数指针 <类型 = 变整数>
            函数指针 = 内存DLL.取函数指针 ("method1")
            如果 (函数指针 != 0)
            {
                调用无参数无返回值静态方法 (函数指针)
            }
            否则
            {
                信息框 ("找不到指定的函数!", 信息框按钮.警告图标, "警告")
            }

        }
        否则 (来源对象 == 按钮_函数2)
        {
            变量 函数指针 <类型 = 变整数>
            函数指针 = 内存DLL.取函数指针 ("method2")
            如果 (函数指针 != 0)
            {
                调用无返回值静态方法 (函数指针, 200)
            }
            否则
            {
                信息框 ("找不到指定的函数!", 信息框按钮.警告图标, "警告")
            }


        }
        否则 (来源对象 == 按钮_函数3)
        {
            变量 函数指针 <类型 = 变整数>
            函数指针 = 内存DLL.取函数指针 ("method3")
            如果 (函数指针 != 0)
            {
                调用静态方法 (函数指针, 整数, 500, 250)
            }
            否则
            {
                信息框 ("找不到指定的函数!", 信息框按钮.警告图标, "警告")
            }


        }
        否则 (来源对象 == 按钮_函数4)
        {
            变量 函数指针 <类型 = 变整数>
            函数指针 = 内存DLL.取函数指针 ("method4")
            如果 (函数指针 != 0)
            {
                变量 文本长度 <类型 = 整数>
                变量 文本变量 <类型 = 文本型>
                文本长度 = 调用静态方法 (函数指针, 整数, 0)
                如果 (文本长度 > 0)
                {
                    置文本长度 (文本变量, 文本长度)
                    调用静态方法 (函数指针, 整数, 取文本指针 (文本变量))
                    信息框 (文本变量)
                }
                否则
                {
                    信息框 ("因为参数错误，执行函数4失败。", 信息框按钮.警告图标, "警告")

                }
            }
            否则
            {
                信息框 ("找不到指定的函数!", 信息框按钮.警告图标, "警告")
            }

        }
        否则 (来源对象 == 按钮_刷新)
        {
            枚举进程信息 ()

        }
        返回 (0)
    }

    方法 我的主窗口_创建完毕 <接收事件 类型 = 整数 注释 = "当本组件及其中所有子组件均被创建完毕后发送此事件." 折叠 "">
    参数 来源对象 <类型 = 我的主窗口 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    {
        枚举进程信息 ()
        返回 (0)
    }

    方法 枚举进程信息 <类型 = 整数 折叠>
    {
        超级列表框_进程.全部删除 ()
        如果 (快照辅助类.枚举进程信息 (进程数组) > 0)
        {
            进程数组.枚举循环 ()
            {
                变量 表项索引 <类型 = 整数>
                表项索引 = 超级列表框_进程.插入表项 (-1, 到文本 (进程数组.取枚举值 ().进程ID))
                超级列表框_进程.置标题 (表项索引, 1, 进程数组.取枚举值 ().进程名称)
            }
            超级列表框_进程.现行选中项 = 0
        }
        返回 (0)
    }

    方法 超级列表框_当前表项被改变 <接收事件 类型 = 整数 注释 = "  如果当前焦点所处表项被改变即产生此事件,接收到此事件后读取" 注释 = "\"现行选中项\"属性即可获得当前表项的索引.">
    参数 来源对象 <类型 = 超级列表框 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    {
        如果 (来源对象 == 超级列表框_进程)
        {
            超级列表框_模块.全部删除 ()
            变量 进程ID <类型 = 整数>
            进程ID = 进程数组.取成员 (超级列表框_进程.现行选中项).进程ID
            如果 (进程ID == 0)  // 系统进程
            {
                返回 (0)
            }
            变量 进程 <类型 = NT进程操作类>
            如果 (进程.打开进程 (进程ID))
            {
                变量 模块数组 <类型 = NT模块信息数组类>
                如果 (进程.枚举模块信息 (模块数组) > 0)
                {
                    模块数组.枚举循环 ()
                    {
                        变量 表项索引 <类型 = 整数>
                        表项索引 = 超级列表框_模块.插入表项 (-1, 到文本 (模块数组.取枚举值 ().lpBaseOfDll))
                        超级列表框_模块.置标题 (表项索引, 1, 模块数组.取枚举值 ().BaseDllName)
                    }
                }
            }
        }
        返回 (0)
    }

    方法 我的主窗口_文件被拖放 <接收事件 类型 = 整数 注释 = "当文件被拖放到本窗口组件上后,将发送本事件." 注释 = "注意: 仅当\"允许文件拖放\"属性被设置为真时,本事件才会被发送.">
    参数 来源对象 <类型 = 我的主窗口 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    参数 所拖放文件 <类型 = 文本数组类 注释 = "提供所有被拖放到本组件上的文件名,数组成员数必定大于0.">
    {
        编辑框_文件名.内容 = 所拖放文件.取成员 (0)
        返回 (0)
    }
}
