<火山程序 类型 = "通常" 版本 = 1 />

包 火山.程序.播放器示例2 <注释 = "修改日期: 2023-05-07" 注释 = "本例子主要是演示如何使用WASAPI独占模式."
        注释 = "BASS本身支持WASAPI,并在Vista以上系统默认使用WASAPI输出,但只支持共享模式." 注释 = "使用BASSWASAPI扩展后,可以支持完整的WASAPI特性."
        注释 = "独占模式下,其他程序不能再用这个声卡播放音乐,排除其他干扰,所以理论上WASAPI独占模式的音质更好.">

类 启动类 <公开 基础类 = 窗口程序类>
{
    变量 主窗口对象 <类型 = 我的主窗口>

    方法 启动方法 <公开 类型 = 整数>
    {
        BASS音频类.加载动态库 (取运行目录 () + "abc\\bass.dll")
        主窗口对象.创建主窗口 ()  // 不用"创建有菜单主窗口",主要是这种方法创建的菜单没有实例化,不好修改菜单项
        返回 (1)
    }
}

# ===

类 我的主窗口 <基础类 = 窗口 @视窗.布局 = "client_size = \"500, 520\"" 标题 = "播放器">
{
    变量 组合框_输出设备 <类型 = 组合框 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 101\r\npos = \"20, 10, 350, 24\"" "类型" = 不可编辑下拉式>
    变量 按钮_播放 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 102\r\npos = \"20, 50, 80, 32\"" 标题 = "播放">
    变量 按钮_停止 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 103\r\npos = \"110, 50, 80, 32\"" 标题 = "停止" 禁止 = 真>
    变量 按钮_上一首 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 104\r\npos = \"200, 50, 80, 32\"" 标题 = "上一首">
    变量 按钮_下一首 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 105\r\npos = \"290, 50, 80, 32\"" 标题 = "下一首">
    变量 组合框_播放次序 <类型 = 组合框 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 106\r\npos = \"381, 54, 100, 24\"" "类型" = 不可编辑下拉式
            列表项目 = "默认\n0\n循环\n0\n单曲循环\n0\n乱序\n0">
    变量 滑块条_播放位置 <类型 = 滑块条 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 107\r\npos = \"20, 92, 350, 40\"" 刻度类型 = 下或右
            最小位置 = 0 最大位置 = 100 允许选择 = 假 位置 = 0 禁止 = 真 单位刻度值 = 2>
    变量 滑块条_音量 <类型 = 滑块条 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 108\r\npos = \"362, 92, 120, 40\"" 最小位置 = 0
            最大位置 = 100 位置 = 100 刻度类型 = 下或右 允许选择 = 假 单位刻度值 = 10>
    变量 播放列表框 <类型 = 超级列表框 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 109\r\npos = \"20, 142, 460, 340\""
            报表列 = "0\n-1\n0\n40\n项目\n0\n-1\n0\n150\n标题\n0\n-1\n0\n116\n艺术家\n0\n-1\n0\n130\n专辑" 显示表格线 = 真
            "类型" = 报表列表框 始终显示选择项 = 真 允许编辑 = 假 排序方式 = 不排序 整行选择 = 真 单一选择 = 假 允许文件拖放 = 真>
    变量 时钟1 <类型 = 时钟 隐藏值属性 = "0" @视窗.布局 = "id = 110\r\npos = \"469, 491, 26, 26\"">
    变量 选择框_事件驱动 <类型 = 选择框 注释 = "选中为WASAPI事件模式,不选为WASAPI推送模式,更改在重新播放后生效" 折叠2 隐藏值属性 = "0"
            @视窗.布局 = "id = 111\r\npos = \"382, 9, 100, 24\"" 标题 = "事件模式">
    变量 菜单 <类型 = 播放器菜单>
    变量 ""
    变量 ""
    变量 BASS <类型 = BASS音频类>
    变量 WASAPI <类型 = BASS_WASAPI类>
    变量 混合器 <类型 = BASS混合器类>
    变量 混合句柄 <类型 = 整数 注释 = "全局的混合句柄">
    变量 音频句柄 <类型 = 整数 注释 = "全局的音频句柄">
    变量 音效句柄 <类型 = 整数 注释 = "全局的音效句柄">
    变量 音频标志 <类型 = 整数 注释 = "打开音频文件时使用的标志">
    变量 音频列表 <类型 = 文本数组类 注释 = "播放列表中的音频文件名数组">
    变量 当前设备 <类型 = 整数 注释 = "当前使用的输出设备,为\"组合框_输出设备\"中的序号">
    变量 当前播放 <类型 = 整数 注释 = "当前播放音频在播放列表中的序号">
    变量 音频长度 <类型 = 长整数 注释 = "当前播放音频的总长度">
    变量 ""
    变量 是否已初始化 <类型 = 逻辑型>

    方法 我的主窗口_创建完毕 <接收事件 类型 = 整数 注释 = "当本组件及其中所有子组件均被创建完毕后发送此事件.">
    参数 来源对象 <类型 = 我的主窗口 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    {
        置实例菜单 (菜单)  // 载入菜单, 和"置菜单"的区别是,"置菜单"填"播放器菜单",而"置实例菜单"填"播放器菜单"类的实例变量"菜单"
        // 通过拖放可以把音频文件添加到播放列表,播放列表里按Delete键可删除选中的文件

        // 获取所有可用的WASAPI设备
        变量 设备信息 <类型 = BASS_WASAPI_设备信息数组>
        WASAPI.置通知 (真)
        如果 (WASAPI.取所有设备信息 (设备信息) == 0)
        {
            信息框 ("找不到输出设备，即将退出。")
            结束 ()
        }

        // 将设备添加到组合框里以便切换输出设备
        组合框_输出设备.加入项目 ("WASAPI(独占): 默认设备", -1)  // 先手动加入系统的默认设备,设备号为-1
        // 组合框的项目索引和设备号不对应,用相关数值来记录
        设备信息.枚举循环 ()
        {
            如果 (WASAPI.是否可用设备 (设备信息.取枚举值 ().标志, 1, 真) == 真)
            {
                组合框_输出设备.加入项目 ("WASAPI(独占): " + 设备信息.取枚举值 ().名称, 设备信息.取枚举索引 ())

            }

        }
        当前设备 = -1  // WASAPI的-1为默认输出设备,映射了系统当前选择的输出设备;-2为默认输入设备;-3为环回输入设备
        组合框_输出设备.现行选中项 = 0

        // 使用WASAPI扩展后,仍需要使用"BASS音频库"做解码,这里必须加上解码和浮点数标志,否则将不能播放
        音频标志 = 连续位或 (BASS_音频标志.BASS_STREAM_DECODE, BASS_音频标志.BASS_SAMPLE_FLOAT)

        组合框_播放次序.现行选中项 = 0  // 默认的播放次序(按列表顺序播放一次)
        菜单.选中菜单项 (播放器菜单.默认, 真)

        BASS.置配置选项 (BASS_配置选项.BASS_CONFIG_UPDATEPERIOD, 0)  // 不使用BASS输出,所以不需要更新缓冲区
        BASS.初始化 (0, 48000)  // 即使只用BASS音频库做解码,也必须初始化设备,这里我们使用0的"无声音"

        // 加载整个文件夹里的插件,请注意这些插件都是提供格式支持,其他一些提供功能的插件不能用这个方法加载
        // 插件可以在官方下载,我在压缩包里已提供
        // 编译版你自己注意修改路径和复制文件
        变量 插件信息 <类型 = BASS_插件信息数组 注释 = "返回所有加载成功的插件信息,以便之后获取可用的格式名.">
        如果 (为64位程序 () == 真)
        {
            BASS.加载插件目录 (选择 (为调试版 (), 取当前目录 () + "\\plugin64\\", 取运行目录 () + "plugin64\\"), 插件信息)
        }
        否则
        {
            BASS.加载插件目录 (选择 (为调试版 (), 取当前目录 () + "\\plugin32\\", 取运行目录 () + "plugin32\\"), 插件信息)
        }

        // 因为WASAPI的独占模式,只要初始化设备后便会一直独占设备,所以应该在播放之前初始化,停止播放后释放
        // 所以WASAPI 接下来的代码请看"初始化设备"、"开始播放"、"停止播放"等

        载入播放列表 (取运行目录 () + "playlist.m3u8")  // 读取本地的默认播放列表

        返回 (0)
    }

    方法 我的主窗口_将被销毁 <接收事件 类型 = 整数 注释 = "当本组件被销毁前发送此事件" 折叠>
    参数 来源对象 <类型 = 我的主窗口 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    {
        保存播放列表 (取运行目录 () + "playlist.m3u8")  // 退出前保存播放列表
        返回 (0)
    }

    方法 我的主窗口_接收到命令 <接收事件 类型 = 整数 注释 = "当本窗口上的菜单项(包括弹出子菜单)/工具条按钮被单击或者对应快捷键被按下时,发送此事件."
            返回值注释 = "所通知的对应命令被处理返回1,否则返回0.">
    参数 来源对象 <类型 = 我的主窗口 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    参数 命令代码 <类型 = 整数 注释 = "  提供所对应命令的ID值,对于菜单项或其快捷键来说,就是对应菜单项设计时提供的引用常量ID值,"
            注释 = "对于工具条来说,就是对应按钮设计时提供的引用常量ID值." 折叠2>
    {
        分支判断 (命令代码)  // 当判断条件较多时,分支判断肯定是比如果否则要快
        {
            分支 (播放器菜单.添加文件)
            {
                变量 文件数组 <类型 = 文本数组类>
                BASS.浏览音乐文件 (本对象.取窗口句柄 (), 文件数组)
                导入音频文件 (文件数组)

            }
            分支 (播放器菜单.移除文件)
            {
                移除文件 ()

            }
            分支 (播放器菜单.载入播放列表)
            {
                变量 文件名 <类型 = 文本型>
                文件名 = 浏览_打开文件 (本对象.取窗口句柄 (), "载入播放列表", "播放列表文件(*.m3u8)|*.m3u8")
                如果 (文本是否为空 (文件名) == 假)
                {
                    载入播放列表 (文件名)

                }

            }
            分支 (播放器菜单.保存播放列表)
            {
                变量 文件名 <类型 = 文本型>
                文件名 = 浏览_保存文件 (本对象.取窗口句柄 (), "保存播放列表", "播放列表文件(*.m3u8)|*.m3u8", , , "m3u8", 真)
                如果 (文本是否为空 (文件名) == 假)
                {
                    保存播放列表 (文件名)

                }

            }
            分支 (播放器菜单.退出)
            {
                关闭窗口 ()

            }
            分支 (播放器菜单.播放)
            {
                开始播放 ()

            }
            分支 (播放器菜单.暂停)
            {
                暂停播放 ()

            }
            分支 (播放器菜单.停止)
            {
                停止播放 ()

            }
            分支 (播放器菜单.上一首)
            {
                播放上一首 ()

            }
            分支 (播放器菜单.下一首)
            {
                播放下一首 ()

            }
            分支 (播放器菜单.随机)
            {
                当前播放 = 取随机数 (0, 音频列表.取成员数 () - 1)
                开始播放 ()

            }
            分支 (播放器菜单.默认)
            {
                菜单.选中菜单项 (播放器菜单.默认, 真)
                菜单.选中菜单项 (播放器菜单.循环播放, 假)
                菜单.选中菜单项 (播放器菜单.单曲循环, 假)
                菜单.选中菜单项 (播放器菜单.乱序, 假)
                组合框_播放次序.现行选中项 = 0

            }
            分支 (播放器菜单.循环播放)
            {
                菜单.选中菜单项 (播放器菜单.默认, 假)
                菜单.选中菜单项 (播放器菜单.循环播放, 真)
                菜单.选中菜单项 (播放器菜单.单曲循环, 假)
                菜单.选中菜单项 (播放器菜单.乱序, 假)
                组合框_播放次序.现行选中项 = 1

            }
            分支 (播放器菜单.单曲循环)
            {
                菜单.选中菜单项 (播放器菜单.默认, 假)
                菜单.选中菜单项 (播放器菜单.循环播放, 假)
                菜单.选中菜单项 (播放器菜单.单曲循环, 真)
                菜单.选中菜单项 (播放器菜单.乱序, 假)
                组合框_播放次序.现行选中项 = 2

            }
            分支 (播放器菜单.乱序)
            {
                菜单.选中菜单项 (播放器菜单.默认, 假)
                菜单.选中菜单项 (播放器菜单.循环播放, 假)
                菜单.选中菜单项 (播放器菜单.单曲循环, 假)
                菜单.选中菜单项 (播放器菜单.乱序, 真)
                组合框_播放次序.现行选中项 = 3

            }
            分支 (播放器菜单.混响)
            {
                如果 (菜单.是否被选中 (播放器菜单.混响) == 真)  // 检查是否已开启混响音效
                {
                    BASS.移除通道音效 (音频句柄, 音效句柄)  // 如果已开启就移除
                    菜单.选中菜单项 (播放器菜单.混响, 假)  // 修改菜单项的选择状态
                }
                否则
                {
                    变量 混响设置 <类型 = BASS_DX8_REVERB 注释 = "根据音效使用不同类型,具体看\"BASS_音效类型\"中的常量备注">
                    音效句柄 = BASS.置通道音效 (音频句柄, BASS_音效类型.BASS_FX_DX8_REVERB)  // 先设置音效类型并返回音效句柄,你可以在一条通道里设置多个音效

                    // 下面随便修改一下参数,能听出差别就行,懒得写设置窗口了
                    混响设置.输入增益 = 0
                    混响设置.混响混合 = 0
                    混响设置.混响时间 = 1500
                    混响设置.高频混响时间比 = 0.005
                    BASS.置音效参数 (音效句柄, 混响设置.取地址 ())  // 最后应用音效的参数,注意这里要用"取变整数地址"方法,返回的是结构体指针

                    // 播放缓冲区刷新后就能听到改变
                    菜单.选中菜单项 (播放器菜单.混响, 真)  // 修改菜单项的选择状态

                }

            }
            分支 (播放器菜单.二倍速)
            {
                如果 (菜单.是否被选中 (播放器菜单.二倍速) == 真)  // 检查是否已开启二倍速播放
                {
                    // 这里把采样率参数值设置为0就是原始采样率,每种属性的具体参数都不一样,具体看相关备注或文档
                    BASS.置通道属性 (音频句柄, BASS_通道属性.BASS_ATTRIB_FREQ, 0)
                    菜单.选中菜单项 (播放器菜单.二倍速, 假)  // 修改菜单项的选择状态
                }
                否则
                {
                    变量 采样率设置 <类型 = 单精度小数类>
                    // 通过修改采样率来变速,这里我们用通道属性
                    BASS.取通道属性 (音频句柄, BASS_通道属性.BASS_ATTRIB_FREQ, 采样率设置)  // 先获取通道默认的采样率
                    // 下面可以用"置通道属性"或"置通道滑动属性",前者会立即应用变更,后者是在一定时间内平滑地从现在的参数值变化为新值,这里我设置1秒时间让你们感受一下
                    BASS.置通道滑动属性 (音频句柄, BASS_通道属性.BASS_ATTRIB_FREQ, 采样率设置.值 * 2, 1000)  // 简单地把采样率*2就是两倍速,也可以减慢
                    菜单.选中菜单项 (播放器菜单.二倍速, 真)  // 修改菜单项的选择状态

                }

            }

        }
        返回 (0)
    }

    方法 组合框_列表项被选择 <接收事件 类型 = 整数 注释 = "当某列表项被选择后发送此事件" 折叠>
    参数 来源对象 <类型 = 组合框 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    {
        如果 (来源对象 == 组合框_输出设备)
        {
            如果 (当前设备 != 来源对象.取项目数值 (来源对象.现行选中项))  // 简单判断一下,选择项非当前设备才切换
            {
                当前设备 = (整数)来源对象.取项目数值 (来源对象.现行选中项)
                停止播放 ()  // 切换设备之前先释放音乐和设备
                // 开始播放会初始化到新设备

            }
        }
        否则 (来源对象 == 组合框_播放次序)
        {
            如果 (来源对象.现行选中项 == 2)  // 如果为单曲循环
            {
                音频标志 = 位或 (音频标志, BASS_音频标志.BASS_SAMPLE_LOOP)  // 在全局标志里加上循环,切换歌曲后仍可单曲循环
                BASS.置取通道标志 (音频句柄, BASS_音频标志.BASS_SAMPLE_LOOP, BASS_音频标志.BASS_SAMPLE_LOOP)  // 设置循环播放的标志
            }
            否则
            {
                // 位异或可以移除用位或添加的标志,但如果音频标志根本就没有位或过那个标志,那么位异或和位或的结果是一样的,所以我们这里要先加个判断
                如果 (位与 (音频标志, BASS_音频标志.BASS_SAMPLE_LOOP) == BASS_音频标志.BASS_SAMPLE_LOOP)
                {
                    音频标志 = 位异或 (音频标志, BASS_音频标志.BASS_SAMPLE_LOOP)  // 移除全局的循环标志

                }
                BASS.置取通道标志 (音频句柄, 0, BASS_音频标志.BASS_SAMPLE_LOOP)  // 移除循环播放的标志

            }

        }
        返回 (0)
    }

    方法 按钮_被单击 <接收事件 类型 = 整数 注释 = "当按钮被单击后发送此事件" 折叠>
    参数 来源对象 <类型 = 按钮 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    {
        如果 (来源对象 == 按钮_播放)
        {
            如果 (WASAPI.是否已启动 () == 真)  // 如果正在播放
            {
                暂停播放 ()
            }
            否则
            {
                开始播放 ()

            }
        }
        否则 (来源对象 == 按钮_停止)
        {
            停止播放 ()

        }
        否则 (来源对象 == 按钮_上一首)
        {
            播放上一首 ()

        }
        否则 (来源对象 == 按钮_下一首)
        {
            播放下一首 ()

        }
        返回 (0)
    }

    方法 超级列表框_双击表项 <接收事件 类型 = 整数 注释 = "  当用鼠标双击某表项时即产生此事件,接收到此事件后读取" 注释 = "\"现行选中项\"属性即可获得被单击表项的索引." 折叠 折叠2>
    参数 来源对象 <类型 = 超级列表框 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    {
        如果 (来源对象 == 播放列表框)  // 播放列表框里双击播放音乐
        {
            BASS.释放流 (音频句柄)  // 先尝试释放之前的文件流
            当前播放 = 来源对象.现行选中项
            开始播放 ()

        }
        返回 (0)
    }

    方法 滑块条_位置被改变 <接收事件 类型 = 整数 注释 = "当滑块条位置被改变后本事件被发送">
    参数 来源对象 <类型 = 滑块条 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    {
        如果 (来源对象 == 滑块条_播放位置)
        {
            BASS.置播放位置 (音频句柄, 音频长度 * 来源对象.位置 / 100)  // 更改播放位置
        }

        否则 (来源对象 == 滑块条_音量)
        {
            // BASS.置音量 (来源对象.位置 / 100.0)  // 这个设置的是系统音量,如果要改通道的音量,还是得用通道属性
            BASS.置通道属性 (音频句柄, BASS_通道属性.BASS_ATTRIB_VOL, 来源对象.位置 / (单精度小数)100.0)  // 这个就不会改动系统右下角里的音量

        }
        返回 (0)
    }

    方法 时钟_周期事件 <接收事件 类型 = 整数 注释 = "每当经过了指定的时钟周期,将发送本事件." 折叠>
    参数 来源对象 <类型 = 时钟 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    {
        如果 (BASS.取通道状态 (音频句柄) > 0)  // 大于0表示音频还没播放完
        {
            变量 播放位置 <类型 = 长整数>
            播放位置 = BASS.取播放位置 (音频句柄)
            滑块条_播放位置.位置 = 取整 ((小数)播放位置 / (小数)音频长度 * 100.0)  // 刷新滑块条的播放位置
            // 在标题显示播放进度+歌曲标题
            本对象.标题 = BASS辅助类.秒格式化 (BASS.位置_字节到秒 (音频句柄, 播放位置)) + " / " + BASS辅助类.秒格式化 (BASS.位置_字节到秒 (音频句柄, 音频长度)) + " " + 播放列表框.取标题 (当前播放, 1) + " - 播放器"
        }
        否则  // 当前音频已经播放完毕,该停止播放或切换到下一首歌
        {
            播放下一首 ()

        }
        返回 (0)
    }

    方法 BASS_WASAPI类_输出输入 <接收事件 类型 = 整数 注释 = "用户在本事件中处理输出/输入的回调函数."
            注释 = "输出/输入处理方法应该尽可能快,以避免缓冲区不足(输出)或溢出(输入). 使用更大的缓冲区会降低这一点的重要性."
            注释 = "\"取数据(BASS_DATA_AVAILABLE)\"可用于检查缓冲了多少数据." 注释 = "如果输出设备初始化为独占模式,且返回的数据少于请求的数据,则缓冲区的其余部分将被静默填充."
            返回值注释 = "对于输出设备,返回写入缓冲区的字节数.如果该值为负值(高位设置),则该值将被视为0." 返回值注释 = "对于输入设备,0=停止设备,否则继续." 折叠>
    参数 来源对象 <类型 = BASS_WASAPI类 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    参数 缓冲区 <类型 = 变整数 注释 = " 缓冲区的指针,用于存放输出设备的样本数据,或从输入设备获取数据." 注释 = " 样本数据始终为32位浮点数.">
    参数 数据长度 <类型 = 整数 注释 = "缓冲区的数据长度">
    {
        // 将混合器的数据通过缓冲区输出
        变量 返回值 <类型 = 整数>
        返回值 = BASS.取通道数据 (混合句柄, 缓冲区, 数据长度)
        如果 (返回值 == -1)
        {
            返回 (0)
        }
        返回 (返回值)
    }

    方法 初始化设备 <类型 = 逻辑型 折叠>
    {
        // 初始化 WASAPI 输出设备,使用独占模式,有三种初始化方式,这里使用最自由的一种,完全由用户自定义
        // 初始化时加上 BASS_WASAPI_EVENT 标志,可能就是等于Foobar 2000的事件模式,否则为推送模式; 事件模式是由设备决定何时从缓冲区获取数据,推送模式则是程序主动往缓冲区写入数据
        // 这两种模式对音质没有影响,推送模式的兼容性会好一些,我在 Foobar 2000用事件模式会出现缓冲区欠载
        变量 初始化标志 <类型 = 整数>
        初始化标志 = 连续位或 (BASS_WASAPI_标志.BASS_WASAPI_AUTOFORMAT, BASS_WASAPI_标志.BASS_WASAPI_EXCLUSIVE)

        如果 (WASAPI.初始化 (当前设备, 0, 0, 选择 (选择框_事件驱动.选中 == 真, 位或 (初始化标志, BASS_WASAPI_标志.BASS_WASAPI_EVENT), 初始化标志)) == 真)
        {
            是否已初始化 = 真
        }
        否则
        {
            信息框 ("无法初始化“" + 组合框_输出设备.取项目文本 (组合框_输出设备.现行选中项) + "”。\r\n可能是此设备被其他应用独占了，请退出其他应用再切换到此设备。", 信息框按钮.警告图标, "警告")
            返回 (假)

        }
        // "初始化_通道"只需要在初始化之前使用"混合器.创建混合流",然后把混合句柄填进参数里,无视"输出输入"事件,其他代码基本可以不改
        // WASAPI.初始化_通道 (当前设备, 混合句柄, 选择 (选择框_事件驱动.选中 == 真, 位或 (初始化标志, BASS_WASAPI_标志.BASS_WASAPI_EVENT), 初始化标志))

        // "初始化_推送"需要配合"BASS.创建流数据 ()"和"BASS.推送流数据 ()",这个模式不能使用事件驱动
        // WASAPI.初始化_推送 (当前设备, 0, 0, 初始化标志)

        变量 信息 <类型 = BASS_WASAPI_信息>

        WASAPI.取信息 (信息)  // 获取当前所用的信息
        // 调试输出 (信息)

        如果 (混合句柄 == 0)
        {
            // 创建一个混合器,这也是一个插件,WASAPI配合这个使用更方便,特别是"初始化_通道"模式
            混合句柄 = 混合器.创建混合流 (信息.采样率, 信息.声道数, 音频标志)


        }
        返回 (真)
    }

    方法 开始播放 <类型 = 逻辑型>
    {
        如果 (是否已初始化 == 假)
        {
            如果 (初始化设备 () == 假)  // 开始播放前初始化设备
            {
                返回 (假)

            }
        }
        如果 (WASAPI.是否已启动 () == 假)
        {
            WASAPI.开启设备 ()  // 跟BASS不一样,WASAPI的初始化不会自动开启设备,需要手动开启,这也可以用来恢复暂停
        }

        如果 (BASS.取通道状态 (音频句柄) == 0)  // 如果通道状态等于0,说明之前的流被释放了,加载新的流
        {
            如果 (音频列表.取成员数 () <= 0)
            {
                返回 (假)
            }
            当前播放 = 取较大值 (当前播放, 0)  // 验证当前播放的值,确保不会数组越界
            当前播放 = 取较小值 (当前播放, 音频列表.取成员数 () - 1)  // 验证当前播放的值,确保不会数组越界
            音频句柄 = BASS.打开流文件 (音频列表.取成员 (当前播放), 0, 0, 音频标志)  // 打开新的流

            混合器.加入通道 (混合句柄, 音频句柄)  // 将新流加入到混合器

            计次循环 (播放列表框.取表项数 ())
            {
                如果 (取循环索引 () == 当前播放)
                {
                    播放列表框.置标题 (当前播放, 0, "*")  // 将当前播放的项目改成星号,超级列表框不能改变某个表项的颜色,还是不好用
                }
                否则
                {
                    播放列表框.置标题 (取循环索引 (), 0, 到文本 (取循环索引 ()))  // 重新排序其他项目
                }

            }
            音频长度 = BASS.取通道长度 (音频句柄)  // 通道长度只有切换歌曲后才会变化,所以把它放到全局变量中,每次播放音乐获取一次就够了(如果你改了影响长度的通道属性,那就得换一个写法了)

        }
        BASS.置通道属性 (音频句柄, BASS_通道属性.BASS_ATTRIB_VOL, 滑块条_音量.位置 / (单精度小数)100.0)

        是否已初始化 = 真

        // 以下修改按钮状态和标题
        按钮_播放.标题 = "暂停"
        滑块条_播放位置.禁止 = 假
        按钮_停止.禁止 = 假

        // 以下修改菜单项的状态
        菜单.选中菜单项 (播放器菜单.播放, 真)
        菜单.选中菜单项 (播放器菜单.暂停, 假)
        菜单.选中菜单项 (播放器菜单.停止, 假)

        菜单.选中菜单项 (播放器菜单.混响, 假)
        菜单.选中菜单项 (播放器菜单.二倍速, 假)

        菜单.允许菜单项 (播放器菜单.暂停, 真)
        菜单.允许菜单项 (播放器菜单.停止, 真)
        菜单.允许菜单项 (播放器菜单.混响, 真)
        菜单.允许菜单项 (播放器菜单.二倍速, 真)
        时钟1.时钟周期 = 100  // 开始播放后打开时钟,周期获取当前的播放位置等

        返回 (真)
    }

    方法 暂停播放 <类型 = 逻辑型 折叠>
    {
        WASAPI.停止设备 (真)  // 停止设备就会暂停播放,因为没有释放设备,所以处于独占状态
        // 修改按钮状态和标题
        按钮_播放.标题 = "播放"
        // 以下修改菜单项的状态
        菜单.选中菜单项 (播放器菜单.播放, 假)
        菜单.选中菜单项 (播放器菜单.暂停, 真)
        菜单.选中菜单项 (播放器菜单.停止, 假)
        菜单.允许菜单项 (播放器菜单.暂停, 真)
        菜单.允许菜单项 (播放器菜单.停止, 真)
        时钟1.时钟周期 = 0
        返回 (真)
    }

    方法 停止播放 <类型 = 逻辑型 折叠>
    {
        混合器.删除通道 (音频句柄)
        BASS.释放流 (音频句柄)

        // WASAPI.停止设备 (真) // 释放会自动停止设备,所以不需要使用
        WASAPI.释放 ()  // 独占模式下,开启设备后就会一直占用,因此应该在不播放的时候释放
        是否已初始化 = 假

        // 以下修改按钮状态
        本对象.标题 = "播放器"
        按钮_播放.标题 = "播放"
        滑块条_播放位置.位置 = 0
        滑块条_播放位置.禁止 = 真  // 停止时禁用播放位置
        按钮_停止.禁止 = 真
        // 以下修改菜单项的状态
        菜单.选中菜单项 (播放器菜单.播放, 假)
        菜单.选中菜单项 (播放器菜单.暂停, 假)
        菜单.选中菜单项 (播放器菜单.停止, 真)
        菜单.允许菜单项 (播放器菜单.暂停, 假)
        菜单.允许菜单项 (播放器菜单.停止, 假)
        菜单.允许菜单项 (播放器菜单.混响, 假)
        菜单.允许菜单项 (播放器菜单.二倍速, 假)

        时钟1.时钟周期 = 0  // 时钟只在播放状态下使用,所以把它停了
        返回 (真)
    }

    方法 播放上一首 <折叠>
    {
        混合器.删除通道 (音频句柄)
        BASS.释放流 (音频句柄)  // 切换音乐之前要先停止之前的

        分支判断 (组合框_播放次序.现行选中项)
        {
            分支 (0)  // 默认
            {
                如果 (当前播放 != 0)  // 如果是第一首,就不切换到上一首了
                {
                    当前播放 = 当前播放 - 1
                    开始播放 ()
                }
                否则
                {
                    停止播放 ()

                }
            }
            分支 (1)  // 循环(播放列表)
            {
                如果 (当前播放 == 0)  // 如果是第一首,切换到最后一首
                {
                    当前播放 = 音频列表.取成员数 () - 1
                }
                否则
                {
                    当前播放 = 当前播放 - 1
                }
                开始播放 ()

            }
            分支 (2)  // 单曲循环时,仍正常切换到上一首
            {
                如果 (当前播放 != 0)  // 如果是第一首,就不切换到上一首了
                {
                    当前播放 = 当前播放 - 1
                    开始播放 ()
                }
                否则
                {
                    开始播放 ()  // 继续播放第一首

                }

            }
            分支 (3)  // 乱序
            {
                变量 乱序 <类型 = 整数>
                乱序 = 取随机数 (0, 音频列表.取成员数 () - 1)
                判断循环 (当前播放 == 乱序)
                {
                    乱序 = 取随机数 (0, 音频列表.取成员数 () - 1)

                }
                当前播放 = 乱序
                开始播放 ()

            }

        }

    }

    方法 播放下一首 <折叠>
    {
        混合器.删除通道 (音频句柄)
        BASS.释放流 (音频句柄)  // 切换音乐之前要先停止之前的流

        分支判断 (组合框_播放次序.现行选中项)
        {
            分支 (0)  // 默认
            {
                如果 (当前播放 != 音频列表.取成员数 () - 1)  // 如果已经是最后一首,就不切换到下一首了
                {
                    当前播放 = 当前播放 + 1
                    开始播放 ()
                }
                否则
                {
                    停止播放 ()

                }
            }
            分支 (1)  // 循环(播放列表)
            {
                如果 (当前播放 == 音频列表.取成员数 () - 1)  // 如果已经是最后一首,切换到第一首
                {
                    当前播放 = 0
                }
                否则
                {
                    当前播放 = 当前播放 + 1
                }
                开始播放 ()

            }
            分支 (2)  // 单曲循环时,仍正常切换到上一首
            {
                如果 (当前播放 != 音频列表.取成员数 () - 1)  // 如果已经是最后一首,就不切换到下一首了
                {
                    当前播放 = 当前播放 + 1
                    开始播放 ()
                }
                否则
                {
                    开始播放 ()  // 继续播放最后一首

                }

            }
            分支 (3)  // 乱序
            {
                变量 乱序 <类型 = 整数>
                乱序 = 取随机数 (0, 音频列表.取成员数 () - 1)
                判断循环 (当前播放 == 乱序)
                {
                    乱序 = 取随机数 (0, 音频列表.取成员数 () - 1)

                }
                当前播放 = 乱序
                开始播放 ()

            }

        }
    }

    方法 移除文件 <类型 = 逻辑型 折叠>
    {
        变量 被选择表项 <类型 = 整数数组类>
        变量 成员数 <类型 = 整数>
        播放列表框.取被选择表项 (被选择表项)  // 获取所有被选择的项目
        成员数 = 被选择表项.取成员数 ()
        如果 (成员数 == 0)  // 当前未选择音乐就返回,不继续下面的操作
        {
            返回 (假)
        }
        逆向计次循环 (成员数)  // 循环删除项目的时候,必须用逆向
        {
            播放列表框.删除表项 (被选择表项.取成员 (取循环索引 ()))
            音频列表.删除成员 (被选择表项.取成员 (取循环索引 ()))

        }
        成员数 = 播放列表框.取表项数 ()  // 重新排列播放列表的项目索引标题
        计次循环 (成员数)
        {
            如果 (取循环索引 () == 当前播放)
            {
                播放列表框.置标题 (当前播放, 0, "*")  // 将当前播放的项目改成星号
            }
            否则
            {
                播放列表框.置标题 (取循环索引 (), 0, 到文本 (取循环索引 ()))  // 重新排序其他项目
            }

        }
        返回 (真)
    }

    方法 导入音频文件
    参数 文件列表 <类型 = 文本数组类>
    {
        变量 无效文件 <类型 = 文本数组类>
        文件列表.枚举循环 ()
        {
            处理事件 ()  // 暂时转让控制权防止界面卡死
            变量 流句柄 <类型 = 整数>
            变量 标签信息 <类型 = 音频标签信息类>
            流句柄 = BASS.打开流文件 (文件列表.取枚举值 (), , , BASS_音频标志.BASS_STREAM_DECODE)  // 使用 BASS_STREAM_DECODE 表示只解码,不播放
            如果 (流句柄 != 0)  // 表示创建流成功
            {
                音频标签类.取标签信息 (流句柄, 标签信息)  // 获取音频文件的标签信息
                变量 表项索引 <类型 = 整数>
                表项索引 = 播放列表框.插入表项 (-1, "")  // 先插入一个表项,然后下面更改列的标题
                播放列表框.置标题 (表项索引, 0, 到文本 (表项索引))
                播放列表框.置标题 (表项索引, 1, 选择 (文本是否为空 (标签信息.标题), BASS辅助类.取文件名无路径无后缀部分 (文件列表.取枚举值 ()), 标签信息.标题))  // 如果音频的标题是空的,则使用音乐的文件名
                播放列表框.置标题 (表项索引, 2, 标签信息.艺术家)
                播放列表框.置标题 (表项索引, 3, 标签信息.专辑)
                BASS.释放流 (流句柄)  // 导入完之后释放流占用的资源
                音频列表.加入成员 (文件列表.取枚举值 ())  // 将文件名加入到音频列表
            }
            否则
            {
                无效文件.加入成员 (文件列表.取枚举值 ())  // 打开失败的文件

            }

        }
        如果 (无效文件.取成员数 () > 0)  // 统计打开失败的文件,并弹框提示
        {
            变量 无效列表 <类型 = 文本型>
            无效文件.枚举循环 ()
            {
                无效列表 = 无效列表 + 无效文件.取枚举值 () + "\r\n"
            }
            信息框 ("部分文件载入失败，可能是非音频文件或者格式不支持。\r\n" + 无效列表, 信息框按钮.警告图标, "警告")


        }
    }

    方法 载入播放列表 <折叠>
    参数 文件名 <类型 = 文本型>
    {
        变量 播放列表 <类型 = 字节集类>
        如果 (播放列表.从文件读字节集 (文件名) >= 0)  // 尝试打开播放列表,为m3u8格式
        {
            如果 (字节集内容是否相同 (播放列表.取字节集左边 (3), 创建字节集 (0xEF, 0xBB, 0xBF)) == 真)  // 判断是否为有签名的UTF8
            {
                播放列表.字节集删除 (0, 3)  // 如果是,删除字节集中的签名
            }
            变量 临时数组 <类型 = 文本数组类>
            变量 文件数组 <类型 = 文本数组类>
            分割文本 (UTF8到文本 (播放列表), "\r\n", 临时数组)
            临时数组.枚举循环 ()
            {
                如果 (是否以字符开头 (临时数组.取枚举值 (), '#') == 假)  // m3u8 用 # 作为标签,我们简单把这些标签排除,只保留音频文件
                {
                    文件数组.加入成员 (临时数组.取枚举值 ())
                }

            }
            导入音频文件 (文件数组)  // 将音频文件导入到播放列表
        }
    }

    方法 保存播放列表 <折叠>
    参数 文件名 <类型 = 文本型>
    {
        变量 列表文本 <类型 = 文本型>
        变量 列表文件 <类型 = 字节集类>
        音频列表.枚举循环 ()
        {
            列表文本 = 列表文本 + 音频列表.取枚举值 () + "\r\n"

        }
        列表文件 = 文本到UTF8 (列表文本, 假)
        // 列表文件.插入字节集 (0, 创建字节集 (0xEF, 0xBB, 0xBF)) //加入UTF8 BOM签名,据说标准上不加,但Foobar 2000加了
        列表文件.写字节集到文件 (文件名)
    }

    方法 浏览_打开文件 <公开 类型 = 文本型 注释 = "调用系统的文件对话框选择打开文件" 返回值注释 = "返回文件名,失败或未选择返回空文本" 折叠 @禁止流程检查 = 真>
    参数 父窗口句柄 <类型 = 变整数 注释 = "父窗口的句柄,0=表示无父窗口" @默认值 = 0>
    参数 标题 <类型 = 文本型 注释 = "文件对话框的标题,默认为\"打开\"" @默认值 = 空对象>
    参数 过滤器 <类型 = 文本型 注释 = " 要选择的文件后缀,过滤器文本由单个或多个成对的文本串组成,"
            注释 = " 每对文本串的第一个提供显示文本,如:\"文本文件(*.txt)\"; 第二个指定实际的过滤匹配符,如: \"*.txt\"," 注释 = " 所有各文本串之间用\"|\"号隔开."
            注释 = " 例如 \"MP4文件(*.mp4;*.m4a)|*.mp4;*.m4a|所有文件(*.*)|*.*\"" 折叠2 @默认值 = "所有文件(*.*)|*.*">
    参数 初始过滤器 <类型 = 整数 注释 = "指定初始过滤器在\"过滤器\"属性中的索引位置,1为第一个过滤器" @默认值 = 0>
    参数 初始目录 <类型 = 文本型 注释 = "留空为程序的运行文件夹" @默认值 = 空对象>
    参数 默认文件后缀 <类型 = 文本型 注释 = "当用户没有输入文件的后缀名称时所自动使用的文件后缀名称" @默认值 = 空对象>
    参数 创建时提示 <类型 = 逻辑型 注释 = "如果输入的文件不存在，提示是否创建" @默认值 = 真>
    {
        变量 过滤器字节集 <类型 = 字节集类>
        过滤器字节集 = 文本到字节集 (过滤器)
        过滤器字节集.子字节集替换 (文本到字节集 ("|"), 创建字节集 (0, 0))
        如果 (文本是否为空 (初始目录) == 真)
        {
            初始目录 = 取运行目录 ()
        }
        @ TCHAR szBuffer[4*MAX_PATH] = _T ("");
        @ OPENFILENAME ofn= {0};
        @ ofn.lStructSize = sizeof (ofn);
        @ ofn.hwndOwner = (@<父窗口句柄> != 0) ? (HWND)@<父窗口句柄> : NULL;
        @ ofn.lpstrFilter = (LPCWSTR)@<过滤器字节集>.GetPtr ();
        @ ofn.lpstrInitialDir = @<初始目录>;
        @ ofn.lpstrFile = szBuffer;
        @ if (@<标题>.IsEmpty () == false ) ofn.lpstrTitle = @<标题>;
        @ ofn.nMaxFile = sizeof (szBuffer);
        @ ofn.nFilterIndex = @<初始过滤器>;
        @ if (@<默认文件后缀>.IsEmpty () == false )  ofn.lpstrDefExt = @<默认文件后缀>;
        @ ofn.Flags = OFN_EXPLORER | OFN_HIDEREADONLY | OFN_FILEMUSTEXIST | OFN_PATHMUSTEXIST;
        @ if (@<创建时提示>) ofn.Flags |= OFN_CREATEPROMPT;
        @ if (GetOpenFileNameW (&ofn)) {
        @     return ofn.lpstrFile;
        @ } else {
        @     return _T ("");
        @ }
    }

    方法 浏览_保存文件 <公开 类型 = 文本型 注释 = "调用系统的文件对话框选择保存文件" 返回值注释 = "返回文件名,失败或未选择返回空文本" 折叠 @禁止流程检查 = 真>
    参数 父窗口句柄 <类型 = 变整数 注释 = "父窗口的句柄,0=表示无父窗口" @默认值 = 0>
    参数 标题 <类型 = 文本型 注释 = "文件对话框的标题，默认为\"保存\"" @默认值 = 空对象>
    参数 过滤器 <类型 = 文本型 注释 = " 要选择的文件后缀,过滤器文本由单个或多个成对的文本串组成,"
            注释 = " 每对文本串的第一个提供显示文本,如:\"文本文件(*.txt)\"; 第二个指定实际的过滤匹配符,如: \"*.txt\"," 注释 = " 所有各文本串之间用\"|\"号隔开."
            注释 = " 例如 \"MP4文件(*.mp4;*.m4a)|*.mp4;*.m4a|所有文件(*.*)|*.*\"" 折叠2 @默认值 = "所有文件(*.*)|*.*">
    参数 初始过滤器 <类型 = 整数 注释 = "指定初始过滤器在\"过滤器\"属性中的索引位置,1为第一个过滤器" @默认值 = 0>
    参数 初始目录 <类型 = 文本型 注释 = "留空为程序的运行文件夹" @默认值 = 空对象>
    参数 默认文件后缀 <类型 = 文本型 注释 = "当用户没有输入文件的后缀名称时所自动使用的文件后缀名称" @默认值 = 空对象>
    参数 文件覆盖提示 <类型 = 逻辑型 注释 = "如果选择的文件已经存在,提示是否覆盖" @默认值 = 真>
    {
        变量 过滤器字节集 <类型 = 字节集类>
        过滤器字节集 = 文本到字节集 (过滤器)
        过滤器字节集.子字节集替换 (文本到字节集 ("|"), 创建字节集 (0, 0))
        如果 (文本是否为空 (初始目录) == 真)
        {
            初始目录 = 取运行目录 ()
        }
        @ TCHAR szBuffer[4*MAX_PATH] = _T ("");
        @ OPENFILENAME ofn= {0};
        @ ofn.lStructSize = sizeof (ofn);
        @ ofn.hwndOwner = (@<父窗口句柄> != 0) ? (HWND)@<父窗口句柄> : NULL;
        @ ofn.lpstrFilter = (LPCWSTR)@<过滤器字节集>.GetPtr ();
        @ ofn.lpstrInitialDir = @<初始目录>;
        @ ofn.lpstrFile = szBuffer; //存放文件的缓冲区
        @ if (@<标题>.IsEmpty () == false ) ofn.lpstrTitle = @<标题>;
        @ ofn.nMaxFile = sizeof(szBuffer);
        @ ofn.nFilterIndex = @<初始过滤器>;
        @ if (@<默认文件后缀>.IsEmpty () == false )  ofn.lpstrDefExt = @<默认文件后缀>;
        @ ofn.Flags = OFN_EXPLORER | OFN_HIDEREADONLY | OFN_FILEMUSTEXIST | OFN_PATHMUSTEXIST;
        @ if (@<文件覆盖提示>) ofn.Flags |= OFN_OVERWRITEPROMPT;
        @ if (GetSaveFileNameW (&ofn)) {
        @     return ofn.lpstrFile;
        @ } else {
        @     return _T ("");
        @ }
    }

    方法 超级列表框_文件被拖放 <接收事件 类型 = 整数 注释 = "当文件被拖放到本窗口组件上后,将发送本事件." 注释 = "注意: 仅当\"允许文件拖放\"属性被设置为真时,本事件才会被发送." 折叠>
    参数 来源对象 <类型 = 超级列表框 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    参数 所拖放文件 <类型 = 文本数组类 注释 = "提供所有被拖放到本组件上的文件名,数组成员数必定大于0.">
    {
        如果 (来源对象 == 播放列表框)
        {
            导入音频文件 (所拖放文件)  // 将拖放接收到的音频文件导入到播放列表
        }
        返回 (0)
    }
}

类 播放器菜单 <基础类 = 菜单类 折叠 隐藏值属性 = "0"
        @设计内容 = "1\n0\n文件(&F)\n文件菜单\n20000\n\n\n0\n0\n0\n0\n0\n1\n添加文件(&A)...\n添加文件\n20001\n\n\n0\n0\n0\n0\n0\n1\n移除文件(&D)\n移除文件\n20002\n\nDel\n0\n0\n0\n0\n0\n1\n载入播放列表(&I)...\n载入播放列表\n20004\n\nI\n1\n0\n0\n0\n0\n1\n保存播放列表(&S)...\n保存播放列表\n20005\n\nS\n1\n0\n0\n0\n0\n1\n退出(&X)\n退出\n20003\n\nQ\n1\n0\n0\n0\n0\n0\n播放(&P)\n播放菜单\n20006\n\n\n0\n0\n0\n0\n0\n1\n播放(&P)\n播放\n20007\n\nP\n1\n0\n0\n0\n0\n1\n暂停(&P)\n暂停\n20008\n\n\n0\n0\n0\n0\n1\n1\n停止(&S)\n停止\n20009\n\n\n0\n0\n0\n0\n1\n1\n上一首(&U)\n上一首\n20010\n\n\n0\n0\n0\n0\n0\n1\n下一首(&N)\n下一首\n20011\n\n\n0\n0\n0\n0\n0\n1\n随机(&R)\n随机\n20012\n\n\n0\n0\n0\n0\n0\n1\n\n\n0\n\n\n0\n0\n1\n0\n0\n1\n播放次序\n播放次序\n20013\n\n\n0\n0\n0\n0\n0\n2\n默认\n默认\n20015\n\n\n0\n0\n0\n0\n0\n2\n循环\n循环播放\n20016\n\n\n0\n0\n0\n0\n0\n2\n单曲循环\n单曲循环\n20017\n\n\n0\n0\n0\n0\n0\n2\n乱序\n乱序\n20018\n\n\n0\n0\n0\n0\n0\n0\n音效(&E)\n音效\n20019\n\n\n0\n0\n0\n0\n0\n1\n混响(&R)\n混响\n20022\n\n\n0\n0\n0\n0\n1\n1\n二倍速(&D)\n二倍速\n20023\n\n\n0\n0\n0\n0\n1">
{
    常量 文件菜单 <公开 类型 = 整数 值 = 20000 注释 = "文件(&F)" @自动生成 = "mfc">
    常量 添加文件 <公开 类型 = 整数 值 = 20001 注释 = "添加文件(&A)..." @自动生成 = "mfc">
    常量 移除文件 <公开 类型 = 整数 值 = 20002 注释 = "移除文件(&D)" @自动生成 = "mfc">
    常量 载入播放列表 <公开 类型 = 整数 值 = 20004 注释 = "载入播放列表(&I)..." @自动生成 = "mfc">
    常量 保存播放列表 <公开 类型 = 整数 值 = 20005 注释 = "保存播放列表(&S)..." @自动生成 = "mfc">
    常量 退出 <公开 类型 = 整数 值 = 20003 注释 = "退出(&X)" @自动生成 = "mfc">
    常量 播放菜单 <公开 类型 = 整数 值 = 20006 注释 = "播放(&P)" @自动生成 = "mfc">
    常量 播放 <公开 类型 = 整数 值 = 20007 注释 = "播放(&P)" @自动生成 = "mfc">
    常量 暂停 <公开 类型 = 整数 值 = 20008 注释 = "暂停(&P)" @自动生成 = "mfc">
    常量 停止 <公开 类型 = 整数 值 = 20009 注释 = "停止(&S)" @自动生成 = "mfc">
    常量 上一首 <公开 类型 = 整数 值 = 20010 注释 = "上一首(&U)" @自动生成 = "mfc">
    常量 下一首 <公开 类型 = 整数 值 = 20011 注释 = "下一首(&N)" @自动生成 = "mfc">
    常量 随机 <公开 类型 = 整数 值 = 20012 注释 = "随机(&R)" @自动生成 = "mfc">
    常量 播放次序 <公开 类型 = 整数 值 = 20013 注释 = "播放次序" @自动生成 = "mfc">
    常量 默认 <公开 类型 = 整数 值 = 20015 注释 = "默认" @自动生成 = "mfc">
    常量 循环播放 <公开 类型 = 整数 值 = 20016 注释 = "循环" @自动生成 = "mfc">
    常量 单曲循环 <公开 类型 = 整数 值 = 20017 注释 = "单曲循环" @自动生成 = "mfc">
    常量 乱序 <公开 类型 = 整数 值 = 20018 注释 = "乱序" @自动生成 = "mfc">
    常量 音效 <公开 类型 = 整数 值 = 20019 注释 = "音效(&E)" @自动生成 = "mfc">
    常量 混响 <公开 类型 = 整数 值 = 20022 注释 = "混响(&R)" @自动生成 = "mfc">
    常量 二倍速 <公开 类型 = 整数 值 = 20023 注释 = "二倍速(&D)" @自动生成 = "mfc">
    常量 _最小值 <公开 类型 = 整数 值 = 20000 注释 = "所有ID值中的最小值" @自动生成 = "mfc">
    常量 _最大值 <公开 类型 = 整数 值 = 20023 注释 = "所有ID值中的最大值" @自动生成 = "mfc">

    #
}
