<火山程序 类型 = "通常" 版本 = 1 />

包 火山.程序.录音机示例 <注释 = "修改日期: 2023-05-07">

类 启动类 <公开 基础类 = 窗口程序类 折叠>
{
    变量 主窗口对象 <类型 = 我的主窗口>

    方法 启动方法 <公开 类型 = 整数 折叠>
    {
        主窗口对象.创建主窗口 ()
        返回 (1)
    }
}

# ===

类 我的主窗口 <基础类 = 窗口 注释 = "样例主窗口" @视窗.布局 = "client_size = \"500, 240\"" 标题 = "录音机">
{
    变量 标签1 <类型 = 标签 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 101\r\npos = \"20, 10, 80, 24\"" 标题 = "输出设备:">
    变量 标签2 <类型 = 标签 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 102\r\npos = \"20, 50, 80, 24\"" 标题 = "输入设备:">
    变量 组合框_输出设备 <类型 = 组合框 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 103\r\npos = \"110, 10, 370, 24\"" "类型" = 不可编辑下拉式>
    变量 组合框_输入设备 <类型 = 组合框 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 104\r\npos = \"110, 50, 370, 24\"" "类型" = 不可编辑下拉式>
    变量 编辑框_文件名 <类型 = 编辑框 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 105\r\npos = \"20, 94, 365, 24\""
            提示横幅 = "单击浏览设置保存文件名，未设置将使用临时文件">
    变量 按钮_浏览 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 106\r\npos = \"400, 93, 80, 26\"" 标题 = "浏览">
    变量 按钮_录音 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 107\r\npos = \"305, 137, 80, 32\"" 标题 = "录音">
    变量 按钮_回放 <类型 = 按钮 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 108\r\npos = \"400, 137, 80, 32\"" 标题 = "回放" 禁止 = 真>
    变量 选择框_回放 <类型 = 选择框 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 109\r\npos = \"308, 184, 100, 24\"" 标题 = "实时回放">
    变量 进度条_左声道 <类型 = 进度条 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 110\r\npos = \"20, 142, 260, 24\"" 最小位置 = 0
            最大位置 = 32768>
    变量 进度条_右声道 <类型 = 进度条 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 111\r\npos = \"20, 182, 260, 24\"" 最小位置 = 0
            最大位置 = 32768>
    变量 选择框_音效 <类型 = 选择框 折叠2 隐藏值属性 = "0" @视窗.布局 = "id = 112\r\npos = \"414, 184, 80, 24\"" 标题 = "音效">
    变量 时钟_实时回放 <类型 = 时钟 隐藏值属性 = "0" @视窗.布局 = "id = 113\r\npos = \"466, 213, 26, 26\"">
    变量 时钟_事后回放 <类型 = 时钟 隐藏值属性 = "0" @视窗.布局 = "id = 114\r\npos = \"430, 213, 26, 26\"">
    变量 ""
    变量 BASS <类型 = BASS音频类>
    变量 回放句柄 <类型 = 整数 注释 = "全局的回放句柄">
    变量 录音句柄 <类型 = 整数 注释 = "全局的录音句柄">
    变量 音效句柄 <类型 = 整数 注释 = "全局的音效句柄">
    变量 ""
    变量 播放句柄 <类型 = 整数 注释 = "全局的播放句柄,播放刚录制的音频文件">
    变量 当前输出设备 <类型 = 整数 注释 = "当前使用的输出设备,为\"组合框_输出设备\"中的序号">
    变量 当前输入设备 <类型 = 整数 注释 = "当前使用的输出设备,为\"组合框_输入设备\"中的序号">
    变量 文件读写 <类型 = 文件读写类 注释 = "主要用来保存录音文件">
    变量 ""
    变量 文件名 <类型 = 文本型>
    变量 录制信息 <类型 = BASS_录制信息 注释 = "当前录制设备的信息">

    方法 我的主窗口_创建完毕 <接收事件 类型 = 整数 注释 = "当本组件及其中所有子组件均被创建完毕后发送此事件.">
    参数 来源对象 <类型 = 我的主窗口 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    {

        变量 设备信息 <类型 = BASS_设备信息数组>
        // 获取所有可用的输出设备
        BASS.取所有设备信息 (设备信息)
        // 将设备添加到组合框里以便切换输出设备
        设备信息.枚举循环 ()
        {
            组合框_输出设备.加入项目 (设备信息.取枚举值 ().名称)

        }
        组合框_输出设备.置项目文本 (0, "无声音")  // 只要不用"置配置选项"修改配置,初始化的第0个设备都是"无声音"

        // 选择默认输出设备
        当前输出设备 = 1  // 1为默认设备,映射了系统当前选择的输出设备
        组合框_输出设备.现行选中项 = 当前输出设备

        如果 (BASS.初始化 (当前输出设备, 48000, 0, 本对象.取窗口句柄 ()) == 假)  // 使用BASS必须先初始化输出设备,第一个参数也可以用 -1
        {
            // 初始化失败后,使用"无声音"设备重新初始化
            信息框 ("无法初始化默认设备，改为使用\"无声音\"。\r\n可能是输出设备被其他播放器独占了，请退出其他播放器再切换输出设备。", 信息框按钮.警告图标, "警告")
            当前输出设备 = 0
            组合框_输出设备.现行选中项 = 当前输出设备
            BASS.初始化 (当前输出设备, 48000, 0, 本对象.取窗口句柄 ())

        }

        BASS.初始化录制设备 (-1)  // 录制的大部分方法都要先"初始化录制设备"才能使用,-1为默认设备
        组合框_输入设备.加入项目 ("默认录制设备", -1)
        // 获取所有可用的输入设备
        BASS.取所有录制设备信息 (设备信息)
        // 将设备添加到组合框里以便切换输入设备
        设备信息.枚举循环 ()
        {
            组合框_输入设备.加入项目 (BASS.取录制设备类型名称 (设备信息.取枚举索引 ()) + ": " + 设备信息.取枚举值 ().名称, 设备信息.取枚举索引 ())

        }
        // 选择默认输入设备
        当前输入设备 = -1  // 默认录制设备
        组合框_输入设备.现行选中项 = 0  // 默认录制设备

        // 获取设备的信息,主要是获取设备支持的采样率,最新版本的BASS,如果录音使用的采样率超出了设备支持,录出来的音频会变成慢速(测试过旧版的BASS不会)
        BASS.取录制信息 (录制信息)

        // 调试输出 (录制信息)

        返回 (0)
    }

    方法 组合框_列表项被选择 <接收事件 类型 = 整数 注释 = "当某列表项被选择后发送此事件" 折叠>
    参数 来源对象 <类型 = 组合框 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    {
        如果 (来源对象 == 组合框_输出设备)
        {
            如果 (当前输出设备 != 来源对象.现行选中项)  // 简单判断一下,选择项非当前设备才切换
            {
                当前输出设备 = 来源对象.现行选中项
                BASS.释放 ()  // 切换设备之前先释放
                如果 (BASS.初始化 (当前输出设备, 48000, 0, 本对象.取窗口句柄 ()) == 假)  // 再初始化到新的输出设备
                {
                    信息框 ("无法初始化“" + 来源对象.取项目文本 (当前输出设备) + "”，改为使用\"无声音\"。\r\n可能是此设备被其他应用独占了，请退出其他应用再切换到此设备。", 信息框按钮.警告图标, "警告")
                    当前输出设备 = 0
                    来源对象.现行选中项 = 当前输出设备
                    BASS.初始化 (当前输出设备, 48000, 0, 本对象.取窗口句柄 ())

                }

            }
        }
        否则 (来源对象 == 组合框_输入设备)
        {
            如果 (当前输入设备 != 来源对象.取项目数值 (来源对象.现行选中项))  // 简单判断一下,选择项非当前设备才切换
            {
                当前输入设备 = (整数)来源对象.取项目数值 (来源对象.现行选中项)
                BASS.释放录制设备 ()  // 切换设备之前先释放
                如果 (BASS.初始化录制设备 (当前输入设备) == 假)  // 再初始化到新的输出设备
                {
                    信息框 ("无法初始化“" + 来源对象.取项目文本 (当前输入设备) + "”。\r\n" + BASS.取错误描述 (), 信息框按钮.警告图标, "警告")

                }

            }
        }
        返回 (0)
    }

    方法 按钮_被单击 <接收事件 类型 = 整数 注释 = "当按钮被单击后发送此事件">
    参数 来源对象 <类型 = 按钮 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    {
        如果 (来源对象 == 按钮_录音)
        {

            如果 (按钮_录音.标题 == "录音")  // 这个命令既可以判断播放状态,也可以判断录音状态
            {
                如果 (文本是否为空 (文件名) == 真)  // 如果未指定文件名
                {
                    文件名 = 取临时文件名 (取运行目录 ())  // 则生成一个临时文件名
                    // 注意我没删除这些临时文件,你自行处理吧

                }
                如果 (文件是否存在 (文件名) == 真)  // 如果指定的文件名已经存在
                {
                    如果 (信息框 ("以下文件已经存在，是否覆盖?\r\n" + 文件名 + "\r\n单击“是”将覆盖目标文件，单击否“否”停止录音。\r\n如果不想覆盖，请点击“浏览”指定新的文件名。", 位或 (信息框按钮.询问图标, 信息框按钮.是否钮), "询问") == 返回按钮类型.否钮)
                    {
                        返回 (0)

                    }

                }
                如果 (文件读写.打开文件 (文件名, 文件打开方式.重写, 文件共享方式.禁止写) == 假)  // 如果已经存在同名文件,将覆盖
                {
                    信息框 ("无法保存录音文件，结束录音。", 信息框按钮.警告图标, "警告")
                    返回 (0)
                }
                变量 文件头 <类型 = 字节集类>
                BASS辅助类.组装WAVE (文件头, 2, 录制信息.采样率, BASS_位深度.位深_16位)
                文件读写.移到文件首 ()
                文件读写.写出字节集 (文件头)
                文件读写.关闭文件 ()
                录音句柄 = BASS.开始录制 (录制信息.采样率, 2)
                如果 (录音句柄 == 0)
                {
                    信息框 ("无法开始录制，可能是录音设备未初始化。\r\n" + BASS.取错误描述 (), 信息框按钮.警告图标, "警告")
                    返回 (0)
                }
                按钮_录音.标题 = "停止"
                按钮_回放.禁止 = 真
                组合框_输入设备.禁止 = 真
                组合框_输出设备.禁止 = 真
                时钟_实时回放.时钟周期 = 100

            }
            否则
            {
                BASS.停止 (录音句柄)
                文件读写.关闭文件 ()

                按钮_录音.标题 = "录音"
                如果 (取文件尺寸 (文件名) > 44)
                {
                    按钮_回放.禁止 = 假

                }
                组合框_输入设备.禁止 = 假
                组合框_输出设备.禁止 = 假
                时钟_实时回放.时钟周期 = 0

            }
        }
        否则 (来源对象 == 按钮_回放)
        {

            如果 (BASS.取通道状态 (播放句柄) == 0)  // 如果在停止状态
            {
                播放句柄 = BASS.打开流文件 (文件名)
                BASS.播放 (播放句柄)
                来源对象.标题 = "停止"
                按钮_录音.禁止 = 真
                组合框_输入设备.禁止 = 真
                组合框_输出设备.禁止 = 真
                时钟_事后回放.时钟周期 = 100

            }
            否则
            {
                停止播放 ()

            }

        }
        否则 (来源对象 == 按钮_浏览)
        {
            如果 (通用文件对话框.保存文件 (文件名, "Windows PCM (*.wav)|*.wav", , , , , "wav") == 真)
            {
                编辑框_文件名.标题 = 文件名
            }

        }
        返回 (0)
    }

    方法 BASS音频类_录制回调 <接收事件 类型 = 整数 注释 = "执行\"开始录制\"后,本事件会持续收到一段段的录制数据,你可以在此保存或同步回放录制数据"
            返回值注释 = "返回0为继续录制,返回其他任意数字为停止录制.">
    参数 来源对象 <类型 = BASS音频类 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    参数 录制句柄 <类型 = 整数 注释 = "录制的句柄">
    参数 缓冲区 <类型 = 变整数 注释 = "缓冲区中包含了一小段录制数据">
    参数 数据长度 <类型 = 整数 注释 = "缓冲区的数据长度">
    {
        // ===
        // 本事件的返回值要注意一下,返回0(假)会立即主动停止录制,而火山的接收事件都会默认返回0,注意修改
        // ===

        如果 (选择框_回放.选中 == 真)
        {
            BASS.推送流数据 (回放句柄, 缓冲区, 数据长度)  // 将录制的数据推送到实时回放

        }
        // 将录制的数据添加到WAV文件
        如果 (文件读写.是否已打开 () == 假)
        {
            如果 (文件读写.打开文件 (文件名, 文件打开方式.改写, 文件共享方式.禁止写) == 假)
            {
                返回 (0)  // 无法打开文件就立即停止录制
            }

        }
        如果 (缓冲区 != 0)
        {
            文件读写.移到文件尾 ()
            文件读写.写出字节集 (指针到字节集 (缓冲区, 数据长度))
            文件读写.移动读写位置 (文件基准位置.文件首, 4)  // 移动到波形块尺寸的位置
            文件读写.写出字节集 (到字节集 ((整数)文件读写.取文件长度 () - 8))  // 修改波形块尺寸
            文件读写.移动读写位置 (文件基准位置.文件首, 40)  // 移动到WAV数据尺寸的位置
            文件读写.写出字节集 (到字节集 ((整数)文件读写.取文件长度 () - 44))  // 修改WAV数据尺寸
        }
        返回 (1)
    }

    方法 选择框_被单击 <接收事件 类型 = 整数 注释 = "当按钮被单击后发送此事件">
    参数 来源对象 <类型 = 选择框 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    {
        如果 (来源对象 == 选择框_回放)
        {
            如果 (来源对象.选中 == 真)
            {
                回放句柄 = BASS.创建流数据 (录制信息.采样率, 2, 0, 3)  // 创建一个使用内部 STREAMPROC_PUSH 回调的推送流,用于回放录制音频
                BASS.播放 (回放句柄, 假)  // 播放实时回放

            }
            否则
            {
                // 停止和释放实时回放的流
                BASS.停止 (回放句柄)
                BASS.释放流 (回放句柄)

            }

        }
        否则 (来源对象 == 选择框_音效)
        {
            如果 (来源对象.选中 == 真)  // 检查是否已开启混响音效
            {
                变量 混响设置 <类型 = BASS_DX8_REVERB 注释 = "根据音效使用不同类型,具体看\"BASS_音效类型\"中的常量备注">
                音效句柄 = BASS.置通道音效 (回放句柄, BASS_音效类型.BASS_FX_DX8_REVERB)  // 先设置音效类型并返回音效句柄,你可以在一条通道里设置多个音效
                // 下面随便修改一下参数,能听出差别就行,懒得写设置窗口了
                混响设置.输入增益 = 0
                混响设置.混响混合 = 0
                混响设置.混响时间 = 1500
                混响设置.高频混响时间比 = 0.005
                BASS.置音效参数 (音效句柄, 混响设置.取地址 ())  // 最后应用音效的参数,注意这里要用"取变整数地址"方法,返回的是结构体指针

            }
            否则
            {
                BASS.移除通道音效 (回放句柄, 音效句柄)  // 如果已开启就移除

            }

        }
        返回 (0)
    }

    方法 时钟_周期事件 <接收事件 类型 = 整数 注释 = "每当经过了指定的时钟周期,将发送本事件." 折叠>
    参数 来源对象 <类型 = 时钟 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    {
        如果 (来源对象 == 时钟_实时回放)
        {
            变量 左声道 <类型 = 整数类>
            变量 右声道 <类型 = 整数类>
            如果 (BASS.取立体声电平 (录音句柄, 左声道, 右声道) == 真)
            {
                // 电平的取值范围是0(无声)到32768(最大),直接把进度条的最大位置改成32768,就不需要计算位置了
                进度条_左声道.位置 = 左声道.值
                进度条_右声道.位置 = 左声道.值
            }


        }
        否则 (来源对象 == 时钟_事后回放)
        {
            如果 (BASS.取通道状态 (播放句柄) > 0)  // 大于0表示音频还没播放完
            {
                变量 左声道 <类型 = 整数类>
                变量 右声道 <类型 = 整数类>
                如果 (BASS.取立体声电平 (播放句柄, 左声道, 右声道) == 真)
                {
                    进度条_左声道.位置 = 左声道.值
                    进度条_右声道.位置 = 右声道.值

                }

            }
            否则  // 回放已经播放完毕
            {
                停止播放 ()
            }


        }
        返回 (0)
    }

    方法 停止播放 <折叠>
    {
        BASS.停止 (播放句柄)
        BASS.释放流 (播放句柄)
        按钮_回放.标题 = "回放"
        按钮_录音.禁止 = 假
        组合框_输入设备.禁止 = 假
        组合框_输出设备.禁止 = 假
        时钟_事后回放.时钟周期 = 0
        进度条_左声道.位置 = 0
        进度条_右声道.位置 = 0
    }

    #
}
